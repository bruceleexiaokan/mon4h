/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package v3;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

public class AgentConfigContainer implements org.apache.thrift.TBase<AgentConfigContainer, AgentConfigContainer._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AgentConfigContainer");

  private static final org.apache.thrift.protocol.TField GLOBAL_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("globalLevel", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField APP_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("appLevel", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField IP_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("ipLevel", org.apache.thrift.protocol.TType.MAP, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AgentConfigContainerStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AgentConfigContainerTupleSchemeFactory());
  }

  private AgentConfig globalLevel; // required
  private Map<String,AgentConfig> appLevel; // required
  private Map<String,AgentConfig> ipLevel; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GLOBAL_LEVEL((short)1, "globalLevel"),
    APP_LEVEL((short)2, "appLevel"),
    IP_LEVEL((short)3, "ipLevel");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GLOBAL_LEVEL
          return GLOBAL_LEVEL;
        case 2: // APP_LEVEL
          return APP_LEVEL;
        case 3: // IP_LEVEL
          return IP_LEVEL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GLOBAL_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("globalLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AgentConfig.class)));
    tmpMap.put(_Fields.APP_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("appLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AgentConfig.class))));
    tmpMap.put(_Fields.IP_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("ipLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AgentConfig.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AgentConfigContainer.class, metaDataMap);
  }

  public AgentConfigContainer() {
  }

  public AgentConfigContainer(
    AgentConfig globalLevel,
    Map<String,AgentConfig> appLevel,
    Map<String,AgentConfig> ipLevel)
  {
    this();
    this.globalLevel = globalLevel;
    this.appLevel = appLevel;
    this.ipLevel = ipLevel;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AgentConfigContainer(AgentConfigContainer other) {
    if (other.isSetGlobalLevel()) {
      this.globalLevel = new AgentConfig(other.globalLevel);
    }
    if (other.isSetAppLevel()) {
      Map<String,AgentConfig> __this__appLevel = new HashMap<String,AgentConfig>();
      for (Map.Entry<String, AgentConfig> other_element : other.appLevel.entrySet()) {

        String other_element_key = other_element.getKey();
        AgentConfig other_element_value = other_element.getValue();

        String __this__appLevel_copy_key = other_element_key;

        AgentConfig __this__appLevel_copy_value = new AgentConfig(other_element_value);

        __this__appLevel.put(__this__appLevel_copy_key, __this__appLevel_copy_value);
      }
      this.appLevel = __this__appLevel;
    }
    if (other.isSetIpLevel()) {
      Map<String,AgentConfig> __this__ipLevel = new HashMap<String,AgentConfig>();
      for (Map.Entry<String, AgentConfig> other_element : other.ipLevel.entrySet()) {

        String other_element_key = other_element.getKey();
        AgentConfig other_element_value = other_element.getValue();

        String __this__ipLevel_copy_key = other_element_key;

        AgentConfig __this__ipLevel_copy_value = new AgentConfig(other_element_value);

        __this__ipLevel.put(__this__ipLevel_copy_key, __this__ipLevel_copy_value);
      }
      this.ipLevel = __this__ipLevel;
    }
  }

  public AgentConfigContainer deepCopy() {
    return new AgentConfigContainer(this);
  }

  @Override
  public void clear() {
    this.globalLevel = null;
    this.appLevel = null;
    this.ipLevel = null;
  }

  public AgentConfig getGlobalLevel() {
    return this.globalLevel;
  }

  public void setGlobalLevel(AgentConfig globalLevel) {
    this.globalLevel = globalLevel;
  }

  public void unsetGlobalLevel() {
    this.globalLevel = null;
  }

  /** Returns true if field globalLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetGlobalLevel() {
    return this.globalLevel != null;
  }

  public void setGlobalLevelIsSet(boolean value) {
    if (!value) {
      this.globalLevel = null;
    }
  }

  public int getAppLevelSize() {
    return (this.appLevel == null) ? 0 : this.appLevel.size();
  }

  public void putToAppLevel(String key, AgentConfig val) {
    if (this.appLevel == null) {
      this.appLevel = new HashMap<String,AgentConfig>();
    }
    this.appLevel.put(key, val);
  }

  public Map<String,AgentConfig> getAppLevel() {
    return this.appLevel;
  }

  public void setAppLevel(Map<String,AgentConfig> appLevel) {
    this.appLevel = appLevel;
  }

  public void unsetAppLevel() {
    this.appLevel = null;
  }

  /** Returns true if field appLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetAppLevel() {
    return this.appLevel != null;
  }

  public void setAppLevelIsSet(boolean value) {
    if (!value) {
      this.appLevel = null;
    }
  }

  public int getIpLevelSize() {
    return (this.ipLevel == null) ? 0 : this.ipLevel.size();
  }

  public void putToIpLevel(String key, AgentConfig val) {
    if (this.ipLevel == null) {
      this.ipLevel = new HashMap<String,AgentConfig>();
    }
    this.ipLevel.put(key, val);
  }

  public Map<String,AgentConfig> getIpLevel() {
    return this.ipLevel;
  }

  public void setIpLevel(Map<String,AgentConfig> ipLevel) {
    this.ipLevel = ipLevel;
  }

  public void unsetIpLevel() {
    this.ipLevel = null;
  }

  /** Returns true if field ipLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetIpLevel() {
    return this.ipLevel != null;
  }

  public void setIpLevelIsSet(boolean value) {
    if (!value) {
      this.ipLevel = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GLOBAL_LEVEL:
      if (value == null) {
        unsetGlobalLevel();
      } else {
        setGlobalLevel((AgentConfig)value);
      }
      break;

    case APP_LEVEL:
      if (value == null) {
        unsetAppLevel();
      } else {
        setAppLevel((Map<String,AgentConfig>)value);
      }
      break;

    case IP_LEVEL:
      if (value == null) {
        unsetIpLevel();
      } else {
        setIpLevel((Map<String,AgentConfig>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GLOBAL_LEVEL:
      return getGlobalLevel();

    case APP_LEVEL:
      return getAppLevel();

    case IP_LEVEL:
      return getIpLevel();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GLOBAL_LEVEL:
      return isSetGlobalLevel();
    case APP_LEVEL:
      return isSetAppLevel();
    case IP_LEVEL:
      return isSetIpLevel();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AgentConfigContainer)
      return this.equals((AgentConfigContainer)that);
    return false;
  }

  public boolean equals(AgentConfigContainer that) {
    if (that == null)
      return false;

    boolean this_present_globalLevel = true && this.isSetGlobalLevel();
    boolean that_present_globalLevel = true && that.isSetGlobalLevel();
    if (this_present_globalLevel || that_present_globalLevel) {
      if (!(this_present_globalLevel && that_present_globalLevel))
        return false;
      if (!this.globalLevel.equals(that.globalLevel))
        return false;
    }

    boolean this_present_appLevel = true && this.isSetAppLevel();
    boolean that_present_appLevel = true && that.isSetAppLevel();
    if (this_present_appLevel || that_present_appLevel) {
      if (!(this_present_appLevel && that_present_appLevel))
        return false;
      if (!this.appLevel.equals(that.appLevel))
        return false;
    }

    boolean this_present_ipLevel = true && this.isSetIpLevel();
    boolean that_present_ipLevel = true && that.isSetIpLevel();
    if (this_present_ipLevel || that_present_ipLevel) {
      if (!(this_present_ipLevel && that_present_ipLevel))
        return false;
      if (!this.ipLevel.equals(that.ipLevel))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_globalLevel = true && (isSetGlobalLevel());
    builder.append(present_globalLevel);
    if (present_globalLevel)
      builder.append(globalLevel);

    boolean present_appLevel = true && (isSetAppLevel());
    builder.append(present_appLevel);
    if (present_appLevel)
      builder.append(appLevel);

    boolean present_ipLevel = true && (isSetIpLevel());
    builder.append(present_ipLevel);
    if (present_ipLevel)
      builder.append(ipLevel);

    return builder.toHashCode();
  }

  public int compareTo(AgentConfigContainer other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    AgentConfigContainer typedOther = (AgentConfigContainer)other;

    lastComparison = Boolean.valueOf(isSetGlobalLevel()).compareTo(typedOther.isSetGlobalLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGlobalLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.globalLevel, typedOther.globalLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppLevel()).compareTo(typedOther.isSetAppLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appLevel, typedOther.appLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIpLevel()).compareTo(typedOther.isSetIpLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIpLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipLevel, typedOther.ipLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AgentConfigContainer(");
    boolean first = true;

    sb.append("globalLevel:");
    if (this.globalLevel == null) {
      sb.append("null");
    } else {
      sb.append(this.globalLevel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appLevel:");
    if (this.appLevel == null) {
      sb.append("null");
    } else {
      sb.append(this.appLevel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ipLevel:");
    if (this.ipLevel == null) {
      sb.append("null");
    } else {
      sb.append(this.ipLevel);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AgentConfigContainerStandardSchemeFactory implements SchemeFactory {
    public AgentConfigContainerStandardScheme getScheme() {
      return new AgentConfigContainerStandardScheme();
    }
  }

  private static class AgentConfigContainerStandardScheme extends StandardScheme<AgentConfigContainer> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AgentConfigContainer struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GLOBAL_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.globalLevel = new AgentConfig();
              struct.globalLevel.read(iprot);
              struct.setGlobalLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APP_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map84 = iprot.readMapBegin();
                struct.appLevel = new HashMap<String,AgentConfig>(2*_map84.size);
                for (int _i85 = 0; _i85 < _map84.size; ++_i85)
                {
                  String _key86; // required
                  AgentConfig _val87; // required
                  _key86 = iprot.readString();
                  _val87 = new AgentConfig();
                  _val87.read(iprot);
                  struct.appLevel.put(_key86, _val87);
                }
                iprot.readMapEnd();
              }
              struct.setAppLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IP_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map88 = iprot.readMapBegin();
                struct.ipLevel = new HashMap<String,AgentConfig>(2*_map88.size);
                for (int _i89 = 0; _i89 < _map88.size; ++_i89)
                {
                  String _key90; // required
                  AgentConfig _val91; // required
                  _key90 = iprot.readString();
                  _val91 = new AgentConfig();
                  _val91.read(iprot);
                  struct.ipLevel.put(_key90, _val91);
                }
                iprot.readMapEnd();
              }
              struct.setIpLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AgentConfigContainer struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.globalLevel != null) {
        oprot.writeFieldBegin(GLOBAL_LEVEL_FIELD_DESC);
        struct.globalLevel.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.appLevel != null) {
        oprot.writeFieldBegin(APP_LEVEL_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.appLevel.size()));
          for (Map.Entry<String, AgentConfig> _iter92 : struct.appLevel.entrySet())
          {
            oprot.writeString(_iter92.getKey());
            _iter92.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.ipLevel != null) {
        oprot.writeFieldBegin(IP_LEVEL_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.ipLevel.size()));
          for (Map.Entry<String, AgentConfig> _iter93 : struct.ipLevel.entrySet())
          {
            oprot.writeString(_iter93.getKey());
            _iter93.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AgentConfigContainerTupleSchemeFactory implements SchemeFactory {
    public AgentConfigContainerTupleScheme getScheme() {
      return new AgentConfigContainerTupleScheme();
    }
  }

  private static class AgentConfigContainerTupleScheme extends TupleScheme<AgentConfigContainer> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AgentConfigContainer struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetGlobalLevel()) {
        optionals.set(0);
      }
      if (struct.isSetAppLevel()) {
        optionals.set(1);
      }
      if (struct.isSetIpLevel()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetGlobalLevel()) {
        struct.globalLevel.write(oprot);
      }
      if (struct.isSetAppLevel()) {
        {
          oprot.writeI32(struct.appLevel.size());
          for (Map.Entry<String, AgentConfig> _iter94 : struct.appLevel.entrySet())
          {
            oprot.writeString(_iter94.getKey());
            _iter94.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetIpLevel()) {
        {
          oprot.writeI32(struct.ipLevel.size());
          for (Map.Entry<String, AgentConfig> _iter95 : struct.ipLevel.entrySet())
          {
            oprot.writeString(_iter95.getKey());
            _iter95.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AgentConfigContainer struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.globalLevel = new AgentConfig();
        struct.globalLevel.read(iprot);
        struct.setGlobalLevelIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map96 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.appLevel = new HashMap<String,AgentConfig>(2*_map96.size);
          for (int _i97 = 0; _i97 < _map96.size; ++_i97)
          {
            String _key98; // required
            AgentConfig _val99; // required
            _key98 = iprot.readString();
            _val99 = new AgentConfig();
            _val99.read(iprot);
            struct.appLevel.put(_key98, _val99);
          }
        }
        struct.setAppLevelIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map100 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.ipLevel = new HashMap<String,AgentConfig>(2*_map100.size);
          for (int _i101 = 0; _i101 < _map100.size; ++_i101)
          {
            String _key102; // required
            AgentConfig _val103; // required
            _key102 = iprot.readString();
            _val103 = new AgentConfig();
            _val103.read(iprot);
            struct.ipLevel.put(_key102, _val103);
          }
        }
        struct.setIpLevelIsSet(true);
      }
    }
  }

}

