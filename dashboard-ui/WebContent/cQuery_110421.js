/** * cQuery JavaScript Library * http://www.ctrip.com/ * * Copyright(C) 2008 - 2011, Ctrip All rights reserved. *	Version: 110421 * * Date: 2012-06-04 *//**  * @namespace cQuery * @class cQuery * @extends Object * cQuery 1.0 apply for www.ctrip.com * @author cdchu@ctrip.com*/;(function(){	// fix ie6 error.message special type	function fixErrorString(t){		return (''+t).slice();	}	try{		if (window.cQuery) return;		window.cQuery=function(a,b,c){			return cQuery.isCDom(a)?a:new cDom(a,b,c);		};		//正则表达式的集合		var usedRe={			//browser			isOpera:/opera/,			isIE:/msie (\d+)/,			isFirefox:/firefox\/(\d+)/,			isChrome:/chrome/,			isSafari:/safari/,			isIPhone:/iphone/,			isIPad:/ipad/,			isIPadUCWeb:/ucweb/,			//判断是空格			space:/\s+/g,			//trim			trimMulti:/^[\s\xA0]+|[\s\xA0]+$/gm,			trim:/^[\s\xA0]+|[\s\xA0]+$/g,			//json			stringifyJSON:/([\n\r\\\/\'\"])/g,			//errStack			errStack:[				/^\s*at [^ ]* \((.*?):(\d+):\d+\)$/m,				/^\s*at (.*?):(\d+):\d+$/m,				/^\s*@(.*?):\d+$/m			],			//判断整数			isInt:/^-?([1-9]\d*)?\d$/,			//判断浮点数			isFloat:/^-?(([1-9]\d*)?\d(\.\d*)?|\.\d+)$/,			//判断是日期 (yyyy-mm-dd)的格式			isDate:/^(\d{4})-(\d{1,2})-(\d{1,2})$/,			//判断是时间 (yyyy-mm-dd h:m:s.ms)的格式			isDateTime:/^(\d{4})-(\d{1,2})-(\d{1,2}) (\d{1,2}):(\d{1,2}):(\d{1,2})(\.\d+)?$/,			//extend			toReStringA:/([\.\\\/\+\*\?\[\]\{\}\(\)\^\$\|])/g,			toReStringB:/[\r\t\n]/g,			toDate:/^(\d{4})-(\d{1,2})-(\d{1,2})( \d{1,2}:\d{1,2}:\d{1,2}(\.\d+)?)?$/,			toDateTime:/^(\d{4})-(\d{1,2})-(\d{1,2})( (\d{1,2}):(\d{1,2}):(\d{1,2})(\.\d+)?)?$/,			toFormatString:/([yMdhmsS])+/g,			toCurStringA:/(\d)(\d{3}(,|\.|$))/,			toCurStringB:/^(-?)\./,			toIntFix:/,/g,			cssFix:/-(.)/g,			//offset			offsetA:/^(none|hidden)$/i,			//ajax			ajax:/xml/i,			//tmpl regexp			tmplMapString:/[\r\n\'\"\\]/g,			tmplCheckVari:/(^|[^\.])\b([a-z_$][\w$]*)/gi,			tmplParse:/^[\s\S]*?(?=(\$\{|\{\{))/,			tmplKey_$:/^\$\{([\s\S]+)\}$/,			tmplKey_cmd:/^\{\{\s*(if|else|\/if|\/?loop|\/?each|\/?enum|tmpl)\b.*\}\}$/,			tmplKey_if:/^\{\{\s*if\s+(.+?)\s*\}\}$/,			tmplKey_else:/^\{\{\s*else(\s+(.+?))?\s*\}\}$/,			tmplKey_loop:/^\{\{\s*loop(\s*\(([^,\)]+)(,([^,\)]+))?\))?\s+(.+?)\s*\}\}$/,			tmplKey_each:/^\{\{\s*each(\s*\(([^,\)]+)(,([^,\)]+))?(,([^,\)]+))?\))?\s+(.+?)\s*\}\}$/,			tmplKey_enum:/^\{\{\s*enum(\s*\(([^,\)]+)(,([^,\)]+))?\))?\s+(.+?)\s*\}\}$/,			tmplKey_tmpl:/^\{\{\s*tmpl\s+(.+?)(,([^,]+?))?\s*\}\}$/,			//url unique hash			isUrlUniqueHash:/^#uid_\d+$/,			//self script			isSelfScript:/cQuery_110421(\.src)?\.js/i		};		//cDom data hash		var dataHash={};		//jsonp response		cQuery.jsonpResponse=cQuery.undefined;		/**		 * @cfg {htmlElement} activeEl 获得焦点的元素		 */		var activeEl=null;				//jQuery		var jQueryStatus='';		/*基础属性*/		cQuery.isReady=false;		cQuery.isLoaded=false;		cQuery.undefined=(function(a){return a;})();		cQuery.tmp={};				/**		 * @cfg {object} cQuery.browser 浏览器判断			<pre>			{				isOpera:false,				isIE:false,				isIE6:false,				isIE7:false,				isIE8:false,				isIE9:false,				isFirefox:false,				isFirefox2:false,				isFirefox3:false,				isFirefox4:false,				isChrome:false,				isSafari:false			}			</pre>		 */		cQuery.browser=(function(){			var b={				isOpera:false,				isIE:false,				isIE6:false,				isIE7:false,				isIE8:false,				isIE9:false,				isFirefox:false,				isFirefox2:false,				isFirefox3:false,				isFirefox4:false,				isChrome:false,				isSafari:false,				isIPhone:false,				isIPad:false,				isIPadUCWeb:false			};			var ua=navigator.userAgent.toLowerCase();			var vd=(navigator.vendor||'').toLowerCase();			var arr;			//Opera			if (usedRe.isOpera.test(ua)){				b.isOpera=true;				return b;			}			//IE			else if (arr=ua.match(usedRe.isIE)){				b.isIE=true;				b['isIE'+arr[1]]=true;				return b;			}			//Firefox			else if (arr=ua.match(usedRe.isFirefox)){				b.isFirefox=true;				b['isFirefox'+arr[1]]=true;			}			//Chrome			else if (usedRe.isChrome.test(ua)){				b.isChrome=true;			}			//Safari			else if (usedRe.isSafari.test(ua)){				b.isSafari=true;				if (usedRe.isIPhone.test(ua)){					b.isIPhone=true;				}else if (usedRe.isIPad.test(ua)){					b.isIPad=true;					if (usedRe.isIPadUCWeb.test(vd)){						b.isIPadUCWeb=true;					}				}			}			return b;		})();				/**		 * @method cQuery.type		 * 判断变量的类型		 * @param {object} 待检测的变量		 * @return {string} 返回变量的类型		 */		cQuery.type=function(obj){			if (obj==null) return String(obj);			var h={'[object Boolean]':'boolean','[object Number]':'number','[object String]':'string','[object Function]':'function','[object Array]':'array','[object Date]':'date','[object RegExp]':'regexp','[object Error]':'error'};			var t=Object.prototype.toString.call(obj);			if (t in h) return h[t];			if (t=='[object Object]') t=obj+'';			var arr=t.match(/^\[object (HTML\w+)\]$/);			if (arr) return arr[1];			return 'object';		};				/**		 * @method cQuery.uid		 * 获取元素对应的唯一标识符			 * @param {htmlElement} 元素		 * @return {string} 返回唯一标识符		 */		cQuery.uid=function(el){			var uid;			if (el&&cQuery.isCDom(el)){				el=el[0];			}			if (el&&(el==window||el.nodeType)){				if ('_uid_' in el){					return el._uid_;				}else{					if (document.uniqueID){						uid=el._uid_=el==window?'ms_window':el.uniqueID;						return uid;					}else{						uid=el._uid_=cQuery.uid();						return uid;					}				}			}else{				return 'uid_'+new Date().getTime()+(Math.random()*1e10).toFixed(0);			}		};		/**		 * @method cQuery.isPlainObject		 * 判断变量是否为字面量对象 		 * @param {object} 待检测的元素		 * @return {boolean} 返回一个对象是否由{}或new Object()创建 true | false		 */		cQuery.isPlainObject=function(obj){			if (!obj||cQuery.type(obj)!=="object"||obj.nodeType||obj==obj.window){				return false;			}			var hasOwn=Object.prototype.hasOwnProperty;			try{				// Not own constructor property must be Object				if (obj.constructor&&					!hasOwn.call(obj,"constructor")&&					!hasOwn.call(obj.constructor.prototype,"isPrototypeOf")){					return false;				}			}catch(errA){				// IE8,9 Will throw exceptions on certain host objects				return false;			}			// cquery object is not a plain Object			if (cQuery.isCDom(obj)){				return false;			}			// Own properties are enumerated firstly, so to speed up,			// if last one is own, then all properties are own.			var key;			for (key in obj){				if (!hasOwn.call(obj,key)&&key in Object.prototype){					if (obj[key]!==Object.prototype[key]){						return false;					}				}			}			return true;		};		/**		 * @method cQuery.isEmptyObject		 * 判断变量是否为空对象		 * @param {object} 待检测的元素		 * @return {boolean} 返回变量是否为空对象 true | false		 */		cQuery.isEmptyObject=function(obj){			for (var name in obj)				return false;			return true;		};		/**		 * @method cQuery.isCDom		 * 判断变量是否为cDom		 * @param {object} 待检测的元素		 * @return {boolean} 返回变量是否为cDom true | false		 */		cQuery.isCDom=function(obj){			return obj&&obj.hasOwnProperty&&!obj.hasOwnProperty('_v')&&cQuery.fn._v==obj._v;		};		/**		 * @method cQuery.stringifyJSON		 * 将json对象转化成字符串		 * @param {object(json)} json对象		 * @return {string} 返回转换之后的字符串		 */		cQuery.stringifyJSON=function(obj){			var str,t=window.JSON;			try{				if (t&&t.stringify){					str=t.stringify(obj);				}else{					var arr=[],i=0,n,p;					var stringHash={'\n':'\\n','\r':'\\r'};					switch (cQuery.type(obj)){						case null:							str='null';							break;						case 'undefined':							str='undefined';							break;						case 'object':							for (p in obj){								if (obj.hasOwnProperty(p)){									arr[i++]=cQuery.stringifyJSON(p)+':'+cQuery.stringifyJSON(obj[p]);								}							}							str='{'+arr.join(',')+'}';							break;						case 'array':							for (i=0,n=obj.length;i<n;i++){								arr[i]=cQuery.stringifyJSON(obj[i]);							}							str='['+arr.join(',')+']';							break;						case 'string':							str='\"'+obj.replace(usedRe.stringifyJSON,function(a){								return stringHash[a]||'\\'+a;							})+'\"';							break;						case 'date':							str='new Date('+variable.getTime()+')';							break;						case 'number':						case 'boolean':						case 'function':						case 'regexp':							str=obj.toString();							break;						default:							str='null';					}				}				return str;			}catch(errA){				cQuery.error('stringifyJSON','invalid Object');			}			return null;		};				/**		 * @method cQuery.parseJSON		 * 将字符串转换成json对象		 * @param {string} 字符串		 * @return {object(json)} 返回转换之后的json对象		 */		cQuery.parseJSON=function(str){			if (cQuery.type(str)!='string'||!str){				return null;			}			str=str.trim();			var obj=null,t=window.JSON;			try{				if (t&&t.parse){					obj=t.parse(str);					return obj;				}			}catch(errA){				cQuery.log('parseJSON','Nonstandard JSON: '+str);			};			try{				obj=(new Function("return ("+str+');'))();			}catch(errA){				cQuery.error('parseJSON','invalid JSON: '+str);			}			return obj;		};		/**		 * @method cQuery.parseXML		 * 将字符串转换成xml document		 * @param {string} 字符串		 * @return {XmlDocument} 返回转换之后的xml document		 */		cQuery.parseXML=function(str){			var t,xml,d;			if (window.DOMParser){ // Standard				t=new DOMParser();				xml=t.parseFromString(str,"text/xml");			}else{ // IE				xml=new ActiveXObject("Microsoft.XMLDOM");				xml.async="false";				xml.loadXML(str);			}			d=xml.documentElement;			if (!d||!d.nodeName||d.nodeName==="parsererror")				cQuery.error('parseXML','invalid XML: '+str);			return xml;		};				/**		 * @method cQuery.error		 * 输出错误的信息		 * @param {error} 错误对象或名称		 * @param {string} 对应的错误信息		 */ 		cQuery.error=function(name,msg,info){			var err,file='',line='',stack='',number='';			if (cQuery.type(name)=='string'){				err={					msg:fixErrorString(msg||''),					file:'',					line:'',					number:0,					stack:'',					name:fixErrorString(name||'')				};				if (window.console&&console.error&&info){					for (var key in info){						if (info.hasOwnProperty(key)){							console.log(key+': ',info[key]);						}					}				}			}else{				err={					msg:fixErrorString(name.message||name.description||''),					file:fixErrorString(name.fileName||name.sourceURL||''),					line:name.lineNumber||name.line||0,					number:name.number||0,					stack:fixErrorString(name.stack||''),					name:fixErrorString(name.name)				};				if (!err.file&&err.stack){					for (var i=0;i<usedRe.errStack.length;i++){						var arr=err.stack.match(usedRe.errStackA);						if (arr){							break;						}					}					if (arr){						err.file=arr[1];						err.line=parseInt(arr[2],10);					}				}			}			if(cQuery.browser.isIE){				err.error=new Error(err.number,err.msg);			}else{				err.error=new Error(err.msg,err.file,err.line);			}			if (cQuery.config&&cQuery.config('allowDebug')){				debugger;			}			setTimeout(function(){				if (window.$LAB&&$LAB.errorQueue){					$LAB.errorQueue.push(err);				}else{					throw err.error;				}			});		};		/**		 * @method cQuery.log		 * 调试输出。		 * @param {object} 输出的调试信息或者对应的键值. 不传入参数，表示输入现在的时间; 传入一个参数，表示输入此信息		 * @param {string}  输出的调试信息 		 */ 		cQuery.log=function(name,msg){			if (window.console&&console.log){				switch (arguments.length){					case 0:						name='timestamp';						msg=new Date().toFormatString('yyyy-MM-dd hh:mm:ss,SSS');						break;					case 1:						msg=name;						name='log';						break;				}				console.log('[ '+name+' ] '+cQuery.stringifyJSON(msg));			}		};		cQuery.debug=function(){			if (window.console&&console.log){				var arr=Array.prototype.slice.call(arguments);				if (console.log.apply){					console.log.apply(console,arr);				}else{					console.log(arr.join(' | '));				}			}		};				/**		 * @method cQuery.extend		 * 将对象2的属性或者方法扩展到对象1		 * @param {boolean} [ 可选 ] true表示深度复制;false表示不是深度复制，且如果有值，则不做覆盖		 * @param {object} 被扩展的对象1		 * @param {object} 扩展的对象2		 * @param {object} [ 可选 ] 扩展的对象3...N(都是扩展到对象1上)		 * @return {object} 扩展完毕的对象		 */		cQuery.extend=function(){			var deep=null,arg=[].slice.call(arguments,0),tar=arg.shift(),src;			if (tar===null||cQuery.type(tar)=="boolean"){				deep=tar;				tar=arg.shift();			}			if (!arg.length){				arg[0]=tar;				tar=cQuery;			}			while (src=arg.shift()){				for (var name in src){					if (!src.hasOwnProperty||src.hasOwnProperty(name)&&tar!==src[name]){						var it=name in tar;						var tt=cQuery.type(tar[name]);						var ts=cQuery.type(src[name]);						if (deep===true&&it&&tt==ts){							switch (tt){	//							case 'array':	//								var i=0,m=src[name].length;	//								var j=0,n=tar[name].length;	//								for (;i<m;i++){	//									check:{	//										for (;j<n;j++){	//											if (src[name][i]===tar[name][j])	//												break check;	//										}	//										tar[name].push(src[name][i]);	//									}	//								}	//								break;								case 'object':									cQuery.extend(deep,tar[name],src[name]);									break;								default:									tar[name]=src[name];									break;							}						}else if (!(deep===false&&it)){							tar[name]=src[name];						}					}				}			}			return tar;		};						/**		 * @cfg {object} cQuery常量		 * <pre>		 {			COMMON_DONOTHING:function(){},			AJAX_METHOD_GET:'GET',			AJAX_METHOD_POST:'POST',			ting:'keepFirst',			AJAX_UNIQUETYPE_KEEPLAST:'keepLast',			//键盘			KEY_ESC:27,			KEY_F1:112,			KEY_F2:113,			KEY_F3:114,			KEY_F4:115,			KEY_F5:116,			KEY_F6:117,			KEY_F7:118,			KEY_F8:119,			KEY_F9:120,			KEY_F10:121,			KEY_F11:122,			KEY_F12:123,			KEY_UP:38,			KEY_DOWN:40,			KEY_LEFT:37,			KEY_RIGHT:39,			KEY_ENTER:13,			KEY_SPACE:32,			KEY_TAB:9,			KEY_HOME:36,			KEY_END:35,			KEY_PAGEUP:33,			KEY_PAGEDOWN:34,			KEY_BACKSPACE:8		}</pre>		 */		cQuery.extend({			COMMON_DONOTHING:function(){},			AJAX_METHOD_GET:'GET',			AJAX_METHOD_POST:'POST',			ting:'keepFirst',			AJAX_UNIQUETYPE_KEEPLAST:'keepLast',			//键盘			KEY_ESC:27,			KEY_F1:112,			KEY_F2:113,			KEY_F3:114,			KEY_F4:115,			KEY_F5:116,			KEY_F6:117,			KEY_F7:118,			KEY_F8:119,			KEY_F9:120,			KEY_F10:121,			KEY_F11:122,			KEY_F12:123,			KEY_UP:38,			KEY_DOWN:40,			KEY_LEFT:37,			KEY_RIGHT:39,			KEY_ENTER:13,			KEY_SPACE:32,			KEY_TAB:9,			KEY_HOME:36,			KEY_END:35,			KEY_PAGEUP:33,			KEY_PAGEDOWN:34,			KEY_BACKSPACE:8,			//模版			TMPL_TYPE_STRICT:'strict',			TMPL_TYPE_NORMAL:'normal'		});				/**		 * @class cQuery.loader		 * 页面css和js的文件预加载器		 * @namespace cQuery		 */		cQuery.loader={			/**			* @cfg {object} 预加载的对象			*/			_loaded:{},			/*			_jsonpCache:{				url:{					status:'loading'|'loaded',					onload:[],					onerror:[],					data:cQuery.jsonpResponse				}			}			*/			_jsonpBusy:false,			_jsonpQueue:[],			_jsonpCache:{},			/**			 * @method pre			 * 使用link或object预加载			 * @param {string} 预加载的请求地址			 * @param {object} 预加载的配置项			 * 	<pre>				{					width:0, 	//宽度					height:0,	//高度					disabled:'disabled',	//是否可用					style:{display:'none'},	//是否显示					rel:'alternate stylesheet',					onload:cQuery.COMMON_DONOTHING,	//加载成功的回调函数					onerror:cQuery.COMMON_DONOTHING	//加载失败的回调函数				}				</pre>			 */			pre:function(url,opt){				var opt=cQuery.extend(true,{					width:0,					height:0,					disabled:'disabled',					style:{display:'none'},					rel:'alternate stylesheet',					onload:cQuery.COMMON_DONOTHING,					onerror:cQuery.COMMON_DONOTHING				},opt||{});				if (this._loaded[url]){					if (opt.onload)						opt.onload.apply();					return;				}				var loadFn=opt.onload;				opt.onload=function(){					cQuery.loader._loaded[url]=true;					if (loadFn)						loadFn.apply(obj,arguments);				};				var k=0,_this=this;				var obj;				if (cQuery.browser.isIE||cQuery.browser.isOpera)					obj=_this._createLink(url,opt);				else					obj=_this._createObject(url,opt);			},						/**			 * @method js			 * 动态加载js文件			 * @param {string} 预加载的请求地址			 * @param {object} 预加载的配置项			 * 	<pre>				{					type:'text/javascript', //类型					charset:cQuery.config('charset'),	//js文件编码					async:true,	//是否异步加载					group:'',	//所属组					onload:cQuery.COMMON_DONOTHING,	//加载成功的回调函数					onerror:cQuery.COMMON_DONOTHING	//加载失败的回调函数				}				</pre>			 */			js:function(url,opt){				opt=cQuery.extend({					type:'text/javascript',					charset:cQuery.config('charset'),					async:false,					group:'',					onload:cQuery.COMMON_DONOTHING,					onerror:cQuery.COMMON_DONOTHING				},opt||{});				var s=document.createElement('script');				var t=opt.onload;				opt.onload=function(){					t.apply(s,arguments);					s.onload=s.onreadystatechange=cQuery.COMMON_DONOTHING;				};				cQuery.extend(s,opt);				s.onreadystatechange=function(){					switch (s.readyState){						case 'loaded':						case 'complete':							opt.onload.apply(s,arguments);							break;						default:							break;					}				};				s.src=url;				this._appendToHead(s);				return s;			},			jsText:function(){						},			//reference			//http://www.zachleat.com/web/load-css-dynamically/			//https://github.com/bga/jbasis/blob/548511245b707666e68954340d3b195ad6eca845/src/$jb.Loader.CSSResource.js			css:function(url,opt){				opt=cQuery.extend({					type:'text/css',					charset:cQuery.config('charset'),					rel:'stylesheet'				},opt||{});				var l;				if (document.createStyleSheet){					l=document.createStyleSheet();				}else{					l=document.createElement('link');				}				cQuery.extend(l,opt);				l.href=url;				this._appendToHead(l);				return l;			},			image:function(url,opt){				opt=cQuery.extend({					onload:cQuery.COMMON_DONOTHING,					onerror:cQuery.COMMON_DONOTHING				},opt||{});				var i=new Image();				cQuery.extend(i,opt);				i.src=url;				return s;			},			jsonp:function(url,opt){				opt=cQuery.extend({					type:'text/javascript',					charset:cQuery.config('charset'),					async:true,					group:'',					onload:cQuery.COMMON_DONOTHING,					onerror:cQuery.COMMON_DONOTHING				},opt||{});				if (url in this._jsonpCache){					var t=this._jsonpCache[url];					t.onload[t.onload.length]=opt.onload;					t.onerror[t.onerror.length]=opt.onerror;					if (t.status=='loaded'){						cQuery.jsonpResponse=t.data;						this._jsonpRun(url);					}				}else{	//				if (cQuery.browser.isIE&&this._jsonpBusy){					if (this._jsonpBusy){						this._jsonpQueue[this._jsonpQueue.length]=Array.prototype.slice.call(arguments);						return;					}					this._jsonpBusy=true;					var t=this._jsonpCache[url]={						status:'loading',						onload:[opt.onload],						onerror:[opt.onerror]					};					opt.onload=this._jsonpRun.bind(this,url);					t.script=this.js(url,opt);				}			},			_jsonpRun:function(url){				var t=this._jsonpCache[url];				if (cQuery.jsonpResponse==cQuery.undefined){					delete this._jsonpCache[url];					var f;					while (f=t.onerror.shift()){						f();					}				}else{					t.status='loaded';					t.data=cQuery.copy(cQuery.jsonpResponse);					cQuery.jsonpResponse=cQuery.undefined;					var f;					while (f=t.onload.shift()){						f(t.data);					}				}				this._jsonpBusy=false;				//if (cQuery.browser.isIE){					var t=this._jsonpQueue.shift();					if (t){						this.jsonp.apply(this,t);					}				//}			},						/**			 * @method _createLink			 * [ 私有方法, 仅限内部调用 ] 创建link			 * @param {string} link的链接			 * @param {object} 创建link的配置项			 * @return {object} 创建完毕的link对象			 * @hide			 */			_createLink:function(url,opt){				var obj=document.createElement('link');				cQuery.extend(true,obj,opt);				obj.href=url;				this._appendToHead(obj);				return obj;			},						/**			 * @method _createObject			 * [ 私有方法, 仅限内部调用 ] 创建预加载的object			 * @param {string} object的data(预加载的链接)			 * @param {object} 创建的object的配置项			 * @return {object} 创建完毕的object对象			 * @hide			 */			_createObject:function(url,opt){				var obj=document.createElement('object');				cQuery.extend(true,obj,opt);				obj.data=url;				this._appendToBody(obj);				return obj;			},						/**			 * @method _appendToHead			 * [ 私有方法, 仅限内部调用 ] 将html元素附加到head或者从head中移除			 * @param {htmlElement} 附加或者移除的html元素(预加载元素)			 * @param {boolean} 是否是移除对象			 * @return {object} 附件或者移除的object对象			 * @hide			 */			_appendToHead:function(obj,isRemove){				var h=document.head||document.getElementsByTagName("head")[0]||document.documentElement;				if (h.firstChild)					h.insertBefore(obj,h.firstChild);				else					h.appendChild(obj);				if (isRemove)					h.removeChild(obj);				return obj;			},						/**			 * @method _appendToBody			 * [ 私有方法, 仅限内部调用 ] 将html元素附加到body或者从body中移除			 * @param {htmlElement} 附加或者移除的html元素(预加载元素)			 * @param {boolean} 是否是移除对象			 * @return {object} 附件或者移除的object对象			 */			_appendToBody:function(obj,isRemove){				var b=document.body;				if (!b){					//cQuery.error('appendToBody','No body element.');					var uid=cQuery.uid();					document.write('<input id="'+uid+'" type="hidden"><\/input>');					var t=document.getElementById(uid);					t.parentNode.removeChild(t);					b=document.body;				}				if (b.firstChild)					b.insertBefore(obj,b.firstChild);				else					b.appendChild(obj);				if (isRemove)					b.removeChild(obj);				return obj;			}		};		/**		 * @class cQuery.String		 * String字符串扩展方法		 * @namespace cQuery		 */		cQuery.extend(false,String.prototype,{			/**			 * @method trim			 * 去除字符串的收尾空格			 * @param {boolean} 是否多行匹配			 * @return {string} 返回去除了收尾空格的字符串			 */ 			trim:function(isMulti){				return this.replace(isMulti?usedRe.trimMulti:usedRe.trim,'');			},			/**			 * @method repeat			 * 生成重复字符串			 * @param {integer} 重复的次数			 * @return {string} 返回生成好的重复的字符串			 */ 			repeat:function(times){				var arr=[];				arr[times]='';				return arr.join(this);			},						/**			 * @method isInt			 * 判断是整数或者指定范围的整数			 * @param {integer} [ 可选 ] 最小的整数值			 * @param {integer} [ 可选 ] 最大的整数值			 * @return {boolean} 返回 是否是整数或者指定范围的整数			 */ 			isInt:function(allowMin,allowMax){				if (usedRe.isInt.test(this)){					var val=parseInt(this,10);					if (typeof allowMin=='number'&&val<allowMin){						return false;					}					if (typeof allowMax=='number'&&val>allowMax){						return false;					}					return true;				}				return false;			},			/**			 * @method isFloat			 * 判断是浮点数或者指定范围的浮点数			 * @param {float} [ 可选 ] 最小的浮点数值			 * @param {float} [ 可选 ] 最大的浮点数值			 * @return {boolean} 返回 是否是浮点数或者指定范围的浮点数			 */ 			isFloat:function(allowMin,allowMax){				if (usedRe.isFloat.test(this)){					var val=parseFloat(this,10);					if (typeof allowMin=='number'&&val<allowMin){						return false;					}					if (typeof allowMax=='number'&&val>allowMax){						return false;					}					return true;				}				return false;			},			/**			 * @method isDate			 * 判断是日期 (yyyy-mm-dd)的格式			 * @return {boolean} 返回是否是日期 (yyyy-mm-dd)的格式			 */ 			isDate:function(){				var arr=this.match(usedRe.isDate);				if (arr){					var y=arr[1].toInt(),m=arr[2].toInt()-1,d=arr[3].toInt();					var t=new Date(y,m,d);					if (t.getFullYear()==y&&t.getMonth()==m&&t.getDate()==d)						return true;				}				return false;			},						/**			 * @method isDateTime			 * 判断是日期时间 (yyyy-mm-dd h:m:s.ms)的格式			 * @return {boolean} 返回是否是日期时间 (yyyy-mm-dd h:m:s.ms)的格式			 */ 			isDateTime:function(){				var arr=this.match(usedRe.isDateTime);				if (arr){					var y=arr[1].toInt(),m=arr[2].toInt()-1,d=arr[3].toInt();					var h=(arr[4]||'').toInt()||0,min=(arr[5]||'').toInt()||0,s=(arr[6]||'').toInt()||0;					var t=new Date(y,m,d,h,min,s);					if (t.getFullYear()==y&&t.getMonth()==m&&t.getDate()==d&&t.getHours()==h&&t.getMinutes()==min&&t.getSeconds()==s)						return true;				}				return false;			},						/**			 * @method toReString			 * 转义正则特殊字符			 * @return {string} 返回转义后的特殊字符 (\r转为\\r；\n转为\\n；\t转为\\t；)			 */ 			toReString:function(){				var h={'\r':'\\r','\n':'\\n','\t':'\\t'};				return this.replace(usedRe.toReStringA,"\\$1").replace(usedRe.toReStringB,function(a){return h[a]});			},						/**			 * @method toInt			 * 转换为整型			 * @return {integer} 返回十进制的整型			 */ 			toInt:function(){				return parseInt(this.replace(usedRe.toIntFix,''),10);			},						/**			 * @method toDate:			 * 转换为日期型			 * @return {object} 返回yyyy-mm-dd 格式的日期对象			 */ 			toDate:function(){				var arr=this.match(usedRe.toDate);				if (arr){					var y=arr[1].toInt(),m=arr[2].toInt()-1,d=arr[3].toInt();					var t=new Date(y,m,d);					if (t.getFullYear()==y&&t.getMonth()==m&&t.getDate()==d)						return t;				}				return null;			},						/** 			 * @method toDateTime			 * 转换为日期时间型			 * @return {object} 返回(yyyy-mm-dd h:m:s.ms)格式的日期时间对象			 */ 			toDateTime:function(){				var arr=this.match(usedRe.toDateTime);				if (arr){					var y=arr[1].toInt(),m=arr[2].toInt()-1,d=arr[3].toInt();					var h=(arr[5]||'').toInt()||0,min=(arr[6]||'').toInt()||0,s=(arr[7]||'').toInt()||0;					var t=new Date(y,m,d,h,min,s);					if (t.getFullYear()==y&&t.getMonth()==m&&t.getDate()==d&&t.getHours()==h&&t.getMinutes()==min&&t.getSeconds()==s)						return t;				}				return null;			},						/**			 * @method _wrap			 * [私有方法] 生成html标签包裹的字符串			 * @param {string} [ 可选 ] html标签名(如"div");			 * @return {object} 如果无参数，则返回本身；如果有参数，则返回以参数为标签包裹的字符串			 * @hide			 */ 			_wrap:function(tag){				return tag?'<'+tag+'>'+this+'</'+tag+'>':this;			}		});						 /**		 * @class cQuery.Number		 * Number数字的扩展方法		 * @namespace cQuery		 */		cQuery.extend(false,Number.prototype,{			/**			 * @method toCurString			 * 转换为货币字符串			 * @param {integer} [ 可选 ] 小数保留的位数。如果留空，则默认为2			 * @return {object}  返回以逗号分隔的货币表示方式. (如123456.2232 返回  "123,456.22"）/(\d)(\d{3}(,|\.|$))/			 */			toCurString:function(len){				var n=this.toFixed(arguments.length?len:2),re=usedRe.toCurStringA;				while(re.test(n))					n=n.replace(re,"$1,$2");				return n=n.replace(usedRe.toCurStringB,"$10.");			}		});						 /**		 * @class cQuery.Array		 * Array数组的扩展方法		 * @namespace cQuery		 */		cQuery.extend(false,Array.prototype,{					/**			 * @method unique			 * 移除数组中的重复项			 * @return {object}  返回移除重复项之后的数组			 */			unique:function(){				if (this.length){					for (var i=0,n=this.length;i<n;i++){						for (var j=i+1;j<n;j++){							if (this[i]===this[j]){								this.splice(j,1);								j--;								n--;							}						}					}				}				return this;			},						/**			 * @method each			 * 对数组中的每一项执行回调函数			 * @param {object} 回调函数 (value,index)			 */			each:Array.prototype.forEach||function(f,_this){				for (var i=0,n=this.length;i<n;i++)					f.call(_this,this[i],i,this);				return this;			},						/**			 * @method map			 * 对数组中的每一项执行回调函数，将返回值组成新的数组			 * @param {object} 回调函数 (value,index)			 * @return {object} 使用回调函数之后的新的数组			 */			map:function(f,_this){				var arr=[],j=0;				for (var i=0,n=this.length;i<n;i++){					arr[j++]=f.call(_this,this[i],i,this);				}				return arr;			},						/**			 * @method filter			 * 对数组中的每一项执行回调函数，将返回值为true的项组成新的数组			 * @param {object} 回调函数 (value,index)			 * @return {object} 经过回调函数筛选之后的新的数组			 */			filter:function(f,_this){				var arr=[],j=0;				for (var i=0,n=this.length;i<n;i++){					var v=this[i];					if (f.call(_this,v,i,this)===true){						arr[j++]=v;					}				}				return arr;			},						/**			 * @method indexOf			 * 在数组中查找指定项			 * @param {object} 被查找的对象			 * @param {integer} 开始查找的位置(如果是负数，则加上此数组的长度)			 * @return {integer} 如果找到，则返回被查找对象的位置;否则返回-1；			 */			indexOf:function(o,p){				var n=this.length;				p=Number(p)||0;				p=p<0?Math.ceil(p):Math.floor(p);				if (p<0) p+=n;				for (;p<n;p++){					if (this[p]===o)						return p;				}				return -1;			}		});						/**		 * @class cQuery.Date		 * Date日期的扩展方法		 * @namespace cQuery		 */		cQuery.extend(false,Date.prototype,{			/**			 * @method addYears			 * 加上特定的年份			 * @param {integer} 需要加上的特定年份			 * @return {object} 返回加好年份的日期对象			 */			addYears:function(y){				var d=new Date(+this);				d.setYear(d.getFullYear()+y);				return d;			},						/**			 * @method addMonths			 * 加上特定的月份			 * @param {integer} 需要加上的特定月份			 * @return {object} 返回加好月份的日期对象			 */			addMonths:function(M){				var d=new Date(+this);				d.setMonth(d.getMonth()+M);				return d;			},						/**			 * @method addDays			 * 加上特定的天数			 * @param {integer} 需要加上的特定天数			 * @return {object} 返回加好天数的日期对象			 */			addDays:function(D){				var d=new Date(+this);				d.setDate(d.getDate()+D);				return d;			},						/**			 * @method addHours			 * 加上特定的小时数			 * @param {integer} 需要加上的特定小时数			 * @return {object} 返回加好小时数的日期对象			 */			addHours:function(h){				var d=new Date(+this);				d.setHours(d.getHours()+h);				return d;			},						/**			 * @method addMinutes			 * 加上特定的分钟数			 * @param {integer} 需要加上的特定分钟数			 * @return {object} 返回加好分钟数的日期对象			 */			addMinutes:function(m){				var d=new Date(+this);				d.setMinutes(d.getMinutes()+m);				return d;			},						/**			 * @method addSeconds			 * 加上特定的秒数			 * @param {integer} 需要加上的特定秒数			 * @return {object} 返回加好秒数的日期对象			 */			addSeconds:function(s){				var d=new Date(+this);				d.setSeconds(d.getSeconds()+s);				return d;			},						/**			 * @method toDate			 * 生成对应的日期对象			 * @return {object} 返回日期对象			 */			toDate:function(){				return new Date(this.getFullYear(),this.getMonth(),this.getDate());			},						/**			 * @method toStdDateString			 * 生成对应的日期字符串			 * @return {string} 返回日期字符串			 */			toStdDateString:function(){				return this.getFullYear()+'-'+(this.getMonth()+1)+'-'+this.getDate();			},			toStdDateTimeString:function(){				return this.getFullYear()+'-'+(this.getMonth()+1)+'-'+this.getDate()+' '+this.getHours()+':'+this.getMinutes()+':'+this.getSeconds();			},			/**			 * @method toEngDateString			 * 生成对应的英文版日期字符串			 * @return {string} 返回英文版日期字符串			 */			toEngDateString:function(){				var h=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];				return h[this.getMonth()]+'-'+this.getDate()+'-'+this.getFullYear();			},						/**			 * @method toFormatString			 * 生成需要的格式的日期字符串			 * @param {string} 格式　例如(yyyy-mm-dd)			 * @return {string} 返回特定格式的日期字符串			 */			toFormatString:function(fmt){				var h={					'y':this.getFullYear(),					'M':this.getMonth()+1,					'd':this.getDate(),					'h':this.getHours(),					'm':this.getMinutes(),					's':this.getSeconds(),					'S':this.getMilliseconds()				};				var minL={'y':2};				for (var name in h){					if (h.hasOwnProperty(name)&&!(name in minL))						minL[name]=h[name].toString().length;				}				return fmt.replace(usedRe.toFormatString,function(a,b){					var t=h[b];					var l=Math.max(a.length,minL[b]);					return ('0'.repeat(l)+t).slice(-l);				});			}		});						/**		 * @class cQuery.Function		 * Function方法的扩展方法		 * @namespace cQuery		 */		cQuery.extend(false,Function.prototype,{					/**			 * @method bind			 * 绑定函数的this指向			 */			bind:function(_this){				var fn=this;				var arg=Array.prototype.slice.call(arguments,1);				return function(){					return fn.apply(_this,arg.concat(Array.prototype.slice.call(arguments,0)));				};			},						/**			 * @method pass			 * 绑定函数的参数			 */			pass:function(){				var fn=this;				var arg=Array.prototype.slice.call(arguments,0);				return function(){					fn.apply(this,arg.concat(Array.prototype.slice.call(arguments,0)));				};			},						/**			 * @method delay			 * 方法延迟执行			 * @param {integer} 延迟的毫秒数			 */			delay:function(t){				var f=setTimeout(this.wrap(),t);				f.clear=function(){					clearTimeout(f)				};				return f;			},			repeat:function(t){				var f=setInterval(this.wrap(),t);				f.clear=function(){					clearInterval(f);				};				return f;			},			wrap:function(){				if (cQuery.browser.isIE){					return this;				}else{					var fn=this;					return function(){						try{							fn.apply(this);						}catch(errA){							cQuery.error(errA);						}					};				}			},			run:function(){				var fn=this.wrap();				fn.apply(this);			}		});		cQuery.run=function(){			var argv=arguments;			for (var i=0;i<argv.length;i++){				switch (cQuery.type(argv[i])){					case 'function':						argv[i].run();						break;					case 'string':						(function(){							var fn=new Function(argv[i]);							fn.call(fn);						}).run();						break;					case 'array':						(function(){							if (argv[i].length){								var fn=new Function(argv[i].length-1);								fn.apply(fn,argv[i].slice(0,-1));							}						}).run();						break;					default:						break;				}			}		};		/**		 * @class cQuery.storage		 * 本地存储		 * @namespace cQuery		 */		 /*		 jStorage.js		 http://www.jstorage.info/		cQuery.storage={			set:function(key,value,expire){},			get:function(key){},			remove:function(key){},			expire:function(key,expire){},			clear:function(){},			keys:function(){},			size:function(){},			isEnabled:true|false		};		 */		try{			;(function(){function m(){if(e.jStorage)try{c=o(""+e.jStorage)}catch(a){e.jStorage="{}"}else e.jStorage="{}";j=e.jStorage?(""+e.jStorage).length:0}function g(){try{e.jStorage=p(c),d&&(d.setAttribute("jStorage",e.jStorage),d.save("jStorage")),j=e.jStorage?(""+e.jStorage).length:0}catch(a){}}function i(a){if(!a||"string"!=typeof a&&"number"!=typeof a)throw new TypeError("Key name must be string or numeric");if("__jstorage_meta"==a)throw new TypeError("Reserved key name");return!0}function k(){var a,			b,d,e=Infinity,f=!1;clearTimeout(n);if(c.__jstorage_meta&&"object"==typeof c.__jstorage_meta.TTL){a=+new Date;d=c.__jstorage_meta.TTL;for(b in d)d.hasOwnProperty(b)&&(d[b]<=a?(delete d[b],delete c[b],f=!0):d[b]<e&&(e=d[b]));Infinity!=e&&(n=setTimeout(k,e-a));f&&g()}}var c={},e={jStorage:"{}"},d=null,j=0,p=cQuery.stringifyJSON,o=cQuery.parseJSON,h=!1,n,l={isXML:function(a){return(a=(a?a.ownerDocument||a:0).documentElement)?"HTML"!==a.nodeName:!1},encode:function(a){if(!this.isXML(a))return!1;try{return(new XMLSerializer).serializeToString(a)}catch(b){try{return a.xml}catch(c){}}return!1},			decode:function(a){var b="DOMParser"in window&&(new DOMParser).parseFromString||window.ActiveXObject&&function(a){var b=new ActiveXObject("Microsoft.XMLDOM");b.async="false";b.loadXML(a);return b};if(!b)return!1;a=b.call("DOMParser"in window&&new DOMParser||window,a,"text/xml");return this.isXML(a)?a:!1}},f={version:"0.1.6.0",set:function(a,b){i(a);l.isXML(b)&&(b={_is_xml:!0,xml:l.encode(b)});c[a]=b;g();return b},get:function(a,b){i(a);return a in c?c[a]&&"object"==typeof c[a]&&c[a]._is_xml&&c[a]._is_xml?			l.decode(c[a].xml):c[a]:"undefined"==typeof b?null:b},deleteKey:function(a){i(a);return a in c?(delete c[a],c.__jstorage_meta&&"object"==typeof c.__jstorage_meta.TTL&&a in c.__jstorage_meta.TTL&&delete c.__jstorage_meta.TTL[a],g(),!0):!1},setTTL:function(a,b){var d=+new Date;i(a);b=Number(b)||0;return a in c?(c.__jstorage_meta||(c.__jstorage_meta={}),c.__jstorage_meta.TTL||(c.__jstorage_meta.TTL={}),0<b?c.__jstorage_meta.TTL[a]=d+b:delete c.__jstorage_meta.TTL[a],g(),k(),!0):!1},flush:function(){c=			{};g();return!0},storageObj:function(){function a(){}a.prototype=c;return new a},index:function(){var a=[],b;for(b in c)c.hasOwnProperty(b)&&"__jstorage_meta"!=b&&a.push(b);return a},storageSize:function(){return j},currentBackend:function(){return h},storageAvailable:function(){return!!h},reInit:function(){var a;if(d&&d.addBehavior){a=document.createElement("link");d.parentNode.replaceChild(a,d);d=a;d.style.behavior="url(#default#userData)";document.getElementsByTagName("head")[0].appendChild(d);			d.load("jStorage");a="{}";try{a=d.getAttribute("jStorage")}catch(b){}e.jStorage=a;h="userDataBehavior"}m()}};(function(){var a=!1;if("localStorage"in window)try{window.localStorage.setItem("_tmptest","tmpval"),a=!0,window.localStorage.removeItem("_tmptest")}catch(b){}if(a)try{window.localStorage&&(e=window.localStorage,h="localStorage")}catch(c){}else if("globalStorage"in window)try{window.globalStorage&&(e=window.globalStorage[window.location.hostname],h="globalStorage")}catch(f){}else if(d=document.createElement("link"),			d.addBehavior){d.style.behavior="url(#default#userData)";document.getElementsByTagName("head")[0].appendChild(d);d.load("jStorage");a="{}";try{a=d.getAttribute("jStorage")}catch(g){}e.jStorage=a;h="userDataBehavior"}else{d=null;return}m();k()})();cQuery.storage={set:function(a,b,c){a=f.set(a,b);"number"==cQuery.type(c)&&(a=a&&f.setTTL(6E4*c));return a},get:f.get,remove:f.deleteKey,expire:function(a,b){return f.setTTL(a,"number"==cQuery.type(b)?6E4*b:b)},clear:f.flush,keys:f.index,size:f.storageSize,			isEnabled:f.storageAvailable()}})();		}catch(errA){			cQuery.storage={				set:function(key,value,expire){},				get:function(key){return null;},				remove:function(key){},				expire:function(key,expire){},				clear:function(){},				keys:function(){return [];},				size:function(){return 0;},				isEnabled:false			};			cQuery.error(errA);		}		//DOM选择器		/*!		 * Sizzle CSS Selector Engine		 *  Copyright 2011, The Dojo Foundation		 *  Released under the MIT, BSD, and GPL Licenses.		 *  More information: http://sizzlejs.com/		 */		try{			;(function(Y,ia){function j(a,b,c,d){var c=c||[],b=b||v,g,f,e,i,h=b.nodeType;if(!a||"string"!==typeof a)return c;if(1!==h&&9!==h)return[];e=F(b);if(!e&&!d&&(g=ja.exec(a)))if(i=g[1])if(9===h)if((f=b.getElementById(i))&&f.parentNode){if(f.id===i)return c.push(f),c}else return c;else{if(b.ownerDocument&&(f=b.ownerDocument.getElementById(i))&&Z(b,f)&&f.id===i)return c.push(f),c}else{if(g[2])return A.apply(c,B.call(b.getElementsByTagName(a),0)),c;if((i=g[3])&&$&&b.getElementsByClassName)return A.apply(c,			B.call(b.getElementsByClassName(i),0)),c}return N(a.replace(G,"$1"),b,c,d,e)}function C(a){return function(b){return"input"===b.nodeName.toLowerCase()&&b.type===a}}function aa(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function y(a){return q(function(b){b=+b;return q(function(c,d){for(var g,f=a([],c.length,b),e=f.length;e--;)if(c[g=f[e]])c[g]=!(d[g]=c[g])})})}function H(a,b,c){if(a===b)return c;for(a=a.nextSibling;a;){if(a===b)return-1;a=a.nextSibling}return 1}			function I(a,b){var c,d,g,f,e,i,h;if(e=ba[m][a])return b?0:e.slice(0);e=a;i=[];for(h=l.preFilter;e;){if(!c||(d=ka.exec(e)))d&&(e=e.slice(d[0].length)),i.push(g=[]);c=!1;if(d=la.exec(e))g.push(c=new ca(d.shift())),e=e.slice(c.length),c.type=d[0].replace(G," ");for(f in l.filter)if((d=J[f].exec(e))&&(!h[f]||(d=h[f](d))))g.push(c=new ca(d.shift())),e=e.slice(c.length),c.type=f,c.matches=d;if(!c)break}return b?e.length:e?j.error(a):ba(a,i).slice(0)}function O(a,b,c){var d=b.dir,g=c&&"parentNode"===b.dir,			f=ma++;return b.first?function(b,c,f){for(;b=b[d];)if(g||1===b.nodeType)return a(b,c,f)}:function(b,c,h){if(h)for(;b=b[d];){if((g||1===b.nodeType)&&a(b,c,h))return b}else for(var k,s=D+" "+f+" ",p=s+P;b=b[d];)if(g||1===b.nodeType){if((k=b[m])===p)return b.sizset;if("string"===typeof k&&0===k.indexOf(s)){if(b.sizset)return b}else{b[m]=p;if(a(b,c,h))return b.sizset=!0,b;b.sizset=!1}}}}function Q(a){return 1<a.length?function(b,c,d){for(var g=a.length;g--;)if(!a[g](b,c,d))return!1;return!0}:a[0]}function K(a,			b,c,d,g){for(var f,e=[],i=0,h=a.length,k=null!=b;i<h;i++)if(f=a[i])if(!c||c(f,d,g))e.push(f),k&&b.push(i);return e}function R(a,b,c,d,g,f){d&&!d[m]&&(d=R(d));g&&!g[m]&&(g=R(g,f));return q(function(e,f,h,k){if(!e||!g){var s,p,t=[],l=[],m=f.length;if(!(p=e)){p=b||"*";var r=h.nodeType?[h]:h,o=[];s=0;for(var n=r.length;s<n;s++)j(p,r[s],o,e);p=o}r=a&&(e||!b)?K(p,t,a,h,k):p;o=c?g||(e?a:m||d)?[]:f:r;c&&c(r,o,h,k);if(d){p=K(o,l);d(p,[],h,k);for(h=p.length;h--;)if(s=p[h])o[l[h]]=!(r[l[h]]=s)}if(e)for(h=a&&			o.length;h--;){if(s=o[h])e[t[h]]=!(f[t[h]]=s)}else o=K(o===f?o.splice(m,o.length):o),g?g(null,f,o,k):A.apply(f,o)}})}function S(a){var b,c,d,g=a.length,f=l.relative[a[0].type];c=f||l.relative[" "];for(var e=f?1:0,i=O(function(a){return a===b},c,!0),h=O(function(a){return-1<da.call(b,a)},c,!0),k=[function(a,c,d){return!f&&(d||c!==L)||((b=c).nodeType?i(a,c,d):h(a,c,d))}];e<g;e++)if(c=l.relative[a[e].type])k=[O(Q(k),c)];else{c=l.filter[a[e].type].apply(null,a[e].matches);if(c[m]){for(d=++e;d<g&&!l.relative[a[d].type];d++);			return R(1<e&&Q(k),1<e&&a.slice(0,e-1).join("").replace(G,"$1"),c,e<d&&S(a.slice(e,d)),d<g&&S(a=a.slice(d)),d<g&&a.join(""))}k.push(c)}return Q(k)}function na(a,b){var c=0<b.length,d=0<a.length,g=function(f,e,i,h,k){var m,p,t=[],n=0,x="0",r=f&&[],o=null!=k,q=L,w=f||d&&l.find.TAG("*",k&&e.parentNode||e),u=D+=null==q?1:Math.E;o&&(L=e!==v&&e,P=g.el);for(;null!=(k=w[x]);x++){if(d&&k){for(m=0;p=a[m];m++)if(p(k,e,i)){h.push(k);break}o&&(D=u,P=++g.el)}c&&((k=!p&&k)&&n--,f&&r.push(k))}n+=x;if(c&&x!==n){for(m=			0;p=b[m];m++)p(r,t,e,i);if(f){if(0<n)for(;x--;)!r[x]&&!t[x]&&(t[x]=oa.call(h));t=K(t)}A.apply(h,t);o&&(!f&&0<t.length&&1<n+b.length)&&j.uniqueSort(h)}o&&(D=u,L=q);return r};g.el=0;return c?q(g):g}function N(a,b,c,d,g){var f,e,i,h,k=I(a);if(!d&&1===k.length){e=k[0]=k[0].slice(0);if(2<e.length&&"ID"===(i=e[0]).type&&9===b.nodeType&&!g&&l.relative[e[1].type]){b=l.find.ID(i.matches[0].replace(z,""),b,g)[0];if(!b)return c;a=a.slice(e.shift().length)}for(f=J.POS.test(a)?-1:e.length-1;0<=f;f--){i=e[f];if(l.relative[h=			i.type])break;if(h=l.find[h])if(d=h(i.matches[0].replace(z,""),T.test(e[0].type)&&b.parentNode||b,g)){e.splice(f,1);a=d.length&&e.join("");if(!a)return A.apply(c,B.call(d,0)),c;break}}}U(a,k)(d,b,g,c,T.test(a));return c}function ea(){}var P,V,l,M,F,Z,U,W,E,L,fa=!0,m=("sizcache"+Math.random()).replace(".",""),ca=String,v=Y.document,n=v.documentElement,D=0,ma=0,oa=[].pop,A=[].push,B=[].slice,da=[].indexOf||function(a){for(var b=0,c=this.length;b<c;b++)if(this[b]===a)return b;return-1},q=function(a,			b){a[m]=null==b||b;return a},w=function(){var a={},b=[];return q(function(c,d){b.push(c)>l.cacheLength&&delete a[b.shift()];return a[c]=d},a)},ga=w(),ba=w(),ha=w(),w="\\[[\\x20\\t\\r\\n\\f]*((?:\\\\.|[-\\w]|[^\\x00-\\xa0])+)[\\x20\\t\\r\\n\\f]*(?:([*^$|!~]?=)[\\x20\\t\\r\\n\\f]*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|("+"(?:\\\\.|[-\\w]|[^\\x00-\\xa0])+".replace("w","w#")+")|)|)[\\x20\\t\\r\\n\\f]*\\]",X=":((?:\\\\.|[-\\w]|[^\\x00-\\xa0])+)(?:\\((?:(['\"])((?:\\\\.|[^\\\\])*?)\\2|([^()[\\]]*|(?:(?:"+w+			")|[^:]|\\\\.)*|.*))\\)|)",G=RegExp("^[\\x20\\t\\r\\n\\f]+|((?:^|[^\\\\])(?:\\\\.)*)[\\x20\\t\\r\\n\\f]+$","g"),ka=/^[\x20\t\r\n\f]*,[\x20\t\r\n\f]*/,la=/^[\x20\t\r\n\f]*([\x20\t\r\n\f>+~])[\x20\t\r\n\f]*/,pa=RegExp(X),ja=/^(?:#([\w\-]+)|(\w+)|\.([\w\-]+))$/,T=/[\x20\t\r\n\f]*[+~]/,qa=/h\d/i,ra=/input|select|textarea|button/i,z=/\\(?!\\)/g,J={ID:/^#((?:\\.|[-\w]|[^\x00-\xa0])+)/,CLASS:/^\.((?:\\.|[-\w]|[^\x00-\xa0])+)/,NAME:/^\[name=['"]?((?:\\.|[-\w]|[^\x00-\xa0])+)['"]?\]/,TAG:RegExp("^("+"(?:\\\\.|[-\\w]|[^\\x00-\\xa0])+".replace("w",			"w*")+")"),ATTR:RegExp("^"+w),PSEUDO:RegExp("^"+X),POS:/:(even|odd|eq|gt|lt|nth|first|last)(?:\([\x20\t\r\n\f]*((?:-\d)?\d*)[\x20\t\r\n\f]*\)|)(?=[^-]|$)/i,CHILD:RegExp("^:(only|nth|first|last)-child(?:\\([\\x20\\t\\r\\n\\f]*(even|odd|(([+-]|)(\\d*)n|)[\\x20\\t\\r\\n\\f]*(?:([+-]|)[\\x20\\t\\r\\n\\f]*(\\d+)|))[\\x20\\t\\r\\n\\f]*\\)|)","i"),needsContext:RegExp("^[\\x20\\t\\r\\n\\f]*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\([\\x20\\t\\r\\n\\f]*((?:-\\d)?\\d*)[\\x20\\t\\r\\n\\f]*\\)|)(?=[^-]|$)",			"i")},u=function(a){var b=v.createElement("div");try{return a(b)}catch(c){return!1}finally{}},w=u(function(a){a.appendChild(v.createComment(""));return!a.getElementsByTagName("*").length}),sa=u(function(a){a.innerHTML="<a href='#'></a>";return a.firstChild&&"undefined"!==typeof a.firstChild.getAttribute&&"#"===a.firstChild.getAttribute("href")}),ta=u(function(a){a.innerHTML="<select></select>";a=typeof a.lastChild.getAttribute("multiple");return"boolean"!==a&&"string"!==a}),$=u(function(a){a.innerHTML=			"<div class='hidden e'></div><div class='hidden'></div>";if(!a.getElementsByClassName||!a.getElementsByClassName("e").length)return!1;a.lastChild.className="e";return 2===a.getElementsByClassName("e").length}),ua=u(function(a){a.id=m+0;a.innerHTML="<a name='"+m+"'></a><div name='"+m+"'></div>";n.insertBefore(a,n.firstChild);var b=v.getElementsByName&&v.getElementsByName(m).length===2+v.getElementsByName(m+0).length;V=!v.getElementById(m);n.removeChild(a);return b});try{B.call(n.childNodes,0)[0].nodeType}catch(va){B=			function(a){for(var b,c=[];b=this[a];a++)c.push(b);return c}}j.matches=function(a,b){return j(a,null,null,b)};j.matchesSelector=function(a,b){return 0<j(b,null,null,[a]).length};M=j.getText=function(a){var b,c="",d=0;if(b=a.nodeType)if(1===b||9===b||11===b){if("string"===typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=M(a)}else{if(3===b||4===b)return a.nodeValue}else for(;b=a[d];d++)c+=M(b);return c};F=j.isXML=function(a){return(a=a&&(a.ownerDocument||a).documentElement)?			"HTML"!==a.nodeName:!1};Z=j.contains=n.contains?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||!(1===d.nodeType&&c.contains&&c.contains(d)))}:n.compareDocumentPosition?function(a,b){return b&&!!(a.compareDocumentPosition(b)&16)}:function(a,b){for(;b=b.parentNode;)if(b===a)return!0;return!1};j.attr=function(a,b){var c,d=F(a);d||(b=b.toLowerCase());return(c=l.attrHandle[b])?c(a):d||ta?a.getAttribute(b):(c=a.getAttributeNode(b))?"boolean"===typeof a[b]?a[b]?			b:null:c.specified?c.value:null:null};l=j.selectors={cacheLength:50,createPseudo:q,match:J,attrHandle:sa?{}:{href:function(a){return a.getAttribute("href",2)},type:function(a){return a.getAttribute("type")}},find:{ID:V?function(a,b,c){if("undefined"!==typeof b.getElementById&&!c)return(a=b.getElementById(a))&&a.parentNode?[a]:[]}:function(a,b,c){if("undefined"!==typeof b.getElementById&&!c)return(b=b.getElementById(a))?b.id===a||"undefined"!==typeof b.getAttributeNode&&b.getAttributeNode("id").value===			a?[b]:ia:[]},TAG:w?function(a,b){if("undefined"!==typeof b.getElementsByTagName)return b.getElementsByTagName(a)}:function(a,b){var c=b.getElementsByTagName(a);if("*"===a){for(var d,g=[],f=0;d=c[f];f++)1===d.nodeType&&g.push(d);return g}return c},NAME:ua&&function(a,b){if("undefined"!==typeof b.getElementsByName)return b.getElementsByName(name)},CLASS:$&&function(a,b,c){if("undefined"!==typeof b.getElementsByClassName&&!c)return b.getElementsByClassName(a)}},relative:{">":{dir:"parentNode",first:!0},			" ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){a[1]=a[1].replace(z,"");a[3]=(a[4]||a[5]||"").replace(z,"");"~="===a[2]&&(a[3]=" "+a[3]+" ");return a.slice(0,4)},CHILD:function(a){a[1]=a[1].toLowerCase();"nth"===a[1]?(a[2]||j.error(a[0]),a[3]=+(a[3]?a[4]+(a[5]||1):2*("even"===a[2]||"odd"===a[2])),a[4]=+(a[6]+a[7]||"odd"===a[2])):a[2]&&j.error(a[0]);return a},PSEUDO:function(a){var b,c;if(J.CHILD.test(a[0]))return null;if(a[3])a[2]=			a[3];else if(b=a[4]){if(pa.test(b)&&(c=I(b,!0))&&(c=b.indexOf(")",b.length-c)-b.length))b=b.slice(0,c),a[0]=a[0].slice(0,c);a[2]=b}return a.slice(0,3)}},filter:{ID:V?function(a){a=a.replace(z,"");return function(b){return b.getAttribute("id")===a}}:function(a){a=a.replace(z,"");return function(b){return(b="undefined"!==typeof b.getAttributeNode&&b.getAttributeNode("id"))&&b.value===a}},TAG:function(a){if("*"===a)return function(){return!0};a=a.replace(z,"").toLowerCase();return function(b){return b.nodeName&&			b.nodeName.toLowerCase()===a}},CLASS:function(a){var b=ga[m][a];b||(b=ga(a,RegExp("(^|[\\x20\\t\\r\\n\\f])"+a+"([\\x20\\t\\r\\n\\f]|$)")));return function(a){return b.test(a.className||"undefined"!==typeof a.getAttribute&&a.getAttribute("class")||"")}},ATTR:function(a,b,c){return function(d){d=j.attr(d,a);if(null==d)return"!="===b;if(!b)return!0;d+="";return"="===b?d===c:"!="===b?d!==c:"^="===b?c&&0===d.indexOf(c):"*="===b?c&&-1<d.indexOf(c):"$="===b?c&&d.substr(d.length-c.length)===c:"~="===b?-1<			(" "+d+" ").indexOf(c):"|="===b?d===c||d.substr(0,c.length+1)===c+"-":!1}},CHILD:function(a,b,c,d){return"nth"===a?function(a){var b,e;b=a.parentNode;if(1===c&&0===d)return!0;if(b){e=0;for(b=b.firstChild;b&&!(1===b.nodeType&&(e++,a===b));b=b.nextSibling);}e-=d;return e===c||0===e%c&&0<=e/c}:function(b){var c=b;switch(a){case "only":case "first":for(;c=c.previousSibling;)if(1===c.nodeType)return!1;if("first"===a)return!0;c=b;case "last":for(;c=c.nextSibling;)if(1===c.nodeType)return!1;return!0}}},			PSEUDO:function(a,b){var c,d=l.pseudos[a]||l.setFilters[a.toLowerCase()]||j.error("unsupported pseudo: "+a);return d[m]?d(b):1<d.length?(c=[a,a,"",b],l.setFilters.hasOwnProperty(a.toLowerCase())?q(function(a,c){for(var e,i=d(a,b),h=i.length;h--;)e=da.call(a,i[h]),a[e]=!(c[e]=i[h])}):function(a){return d(a,0,c)}):d}},pseudos:{not:q(function(a){var b=[],c=[],d=U(a.replace(G,"$1"));return d[m]?q(function(a,b,c,i){for(var i=d(a,null,i,[]),h=a.length;h--;)if(c=i[h])a[h]=!(b[h]=c)}):function(a,f,e){b[0]=			a;d(b,null,e,c);return!c.pop()}}),has:q(function(a){return function(b){return 0<j(a,b).length}}),contains:q(function(a){return function(b){return-1<(b.textContent||b.innerText||M(b)).indexOf(a)}}),enabled:function(a){return!1===a.disabled},disabled:function(a){return!0===a.disabled},checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){a.parentNode&&a.parentNode.selectedIndex;return!0===a.selected},parent:function(a){return!l.pseudos.empty(a)},			empty:function(a){for(var b,a=a.firstChild;a;){if("@"<a.nodeName||3===(b=a.nodeType)||4===b)return!1;a=a.nextSibling}return!0},header:function(a){return qa.test(a.nodeName)},text:function(a){var b,c;return"input"===a.nodeName.toLowerCase()&&"text"===(b=a.type)&&(null==(c=a.getAttribute("type"))||c.toLowerCase()===b)},radio:C("radio"),checkbox:C("checkbox"),file:C("file"),password:C("password"),image:C("image"),submit:aa("submit"),reset:aa("reset"),button:function(a){var b=a.nodeName.toLowerCase();			return"input"===b&&"button"===a.type||"button"===b},input:function(a){return ra.test(a.nodeName)},focus:function(a){var b=a.ownerDocument;return a===b.activeElement&&(!b.hasFocus||b.hasFocus())&&!(!a.type&&!a.href)},active:function(a){return a===a.ownerDocument.activeElement},first:y(function(){return[0]}),last:y(function(a,b){return[b-1]}),eq:y(function(a,b,c){return[0>c?c+b:c]}),even:y(function(a,b){for(var c=0;c<b;c+=2)a.push(c);return a}),odd:y(function(a,b){for(var c=1;c<b;c+=2)a.push(c);return a}),			lt:y(function(a,b,c){for(b=0>c?c+b:c;0<=--b;)a.push(b);return a}),gt:y(function(a,b,c){for(c=0>c?c+b:c;++c<b;)a.push(c);return a})}};W=n.compareDocumentPosition?function(a,b){return a===b?(E=!0,0):(!a.compareDocumentPosition||!b.compareDocumentPosition?a.compareDocumentPosition:a.compareDocumentPosition(b)&4)?-1:1}:function(a,b){if(a===b)return E=!0,0;if(a.sourceIndex&&b.sourceIndex)return a.sourceIndex-b.sourceIndex;var c,d,g=[],f=[];c=a.parentNode;d=b.parentNode;var e=c;if(c===d)return H(a,b);if(c){if(!d)return 1}else return-1;			for(;e;)g.unshift(e),e=e.parentNode;for(e=d;e;)f.unshift(e),e=e.parentNode;c=g.length;d=f.length;for(e=0;e<c&&e<d;e++)if(g[e]!==f[e])return H(g[e],f[e]);return e===c?H(a,f[e],-1):H(g[e],b,1)};[0,0].sort(W);fa=!E;j.uniqueSort=function(a){var b,c=1;E=fa;a.sort(W);if(E)for(;b=a[c];c++)b===a[c-1]&&a.splice(c--,1);return a};j.error=function(a){throw Error("Syntax error, unrecognized expression: "+a);};U=j.compile=function(a,b){var c,d=[],g=[],f=ha[m][a];if(!f){b||(b=I(a));for(c=b.length;c--;)f=S(b[c]),			f[m]?d.push(f):g.push(f);f=ha(a,na(g,d))}return f};v.querySelectorAll&&function(){var a,b=N,c=/'|\\/g,d=/\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,g=[":focus"],f=[":active",":focus"],e=n.matchesSelector||n.mozMatchesSelector||n.webkitMatchesSelector||n.oMatchesSelector||n.msMatchesSelector;u(function(a){a.innerHTML="<select><option selected=''></option></select>";a.querySelectorAll("[selected]").length||g.push("\\[[\\x20\\t\\r\\n\\f]*(?:checked|disabled|ismap|multiple|readonly|selected|value)");			a.querySelectorAll(":checked").length||g.push(":checked")});u(function(a){a.innerHTML="<p test=''></p>";a.querySelectorAll("[test^='']").length&&g.push("[*^$]=[\\x20\\t\\r\\n\\f]*(?:\"\"|'')");a.innerHTML="<input type='hidden'/>";a.querySelectorAll(":enabled").length||g.push(":enabled",":disabled")});g=RegExp(g.join("|"));N=function(a,d,e,f,l){if(!f&&!l&&(!g||!g.test(a))){var j,n,q=!0,r=m;n=d;j=9===d.nodeType&&a;if(1===d.nodeType&&"object"!==d.nodeName.toLowerCase()){j=I(a);(q=d.getAttribute("id"))?			r=q.replace(c,"\\$&"):d.setAttribute("id",r);r="[id='"+r+"'] ";for(n=j.length;n--;)j[n]=r+j[n].join("");n=T.test(a)&&d.parentNode||d;j=j.join(",")}if(j)try{return A.apply(e,B.call(n.querySelectorAll(j),0)),e}catch(o){}finally{q||d.removeAttribute("id")}}return b(a,d,e,f,l)};e&&(u(function(b){a=e.call(b,"div");try{e.call(b,"[test!='']:sizzle"),f.push("!=",X)}catch(c){}}),f=RegExp(f.join("|")),j.matchesSelector=function(b,c){c=c.replace(d,"='$1']");if(!F(b)&&!f.test(c)&&(!g||!g.test(c)))try{var k=e.call(b,			c);if(k||a||b.document&&11!==b.document.nodeType)return k}catch(l){}return 0<j(c,null,null,[b]).length})}();l.pseudos.nth=l.pseudos.eq;l.filters=ea.prototype=l.pseudos;l.setFilters=new ea;"function"===typeof define&&define.amd?define(function(){return j}):Y.Sizzle=j})(window);		}catch(errA){			cQuery.error(errA);		}		/**		 * @class cQuery.event		 * 事件处理		 * @namespace cQuery		 */		cQuery.event={			/**			 * @method _opt			 * 设置默认的option			 * @return {object}			 * <pre>				 {					arguments:[],					priority:50				}				</pre>			 * @hide			 */			_opt:function(){				return {					arguments:[],					priority:50				};			},						/**			 * @cfg {object} _evts 事件列队 			 * @hide			 */			_evts:{},						/**			 * @cfg {object} _cEvts 事件参数映射			 * @hide			 */			_cEvts:{				'ready':{el:document.documentElement}			},						/**			 * @method _sort			 * 事件排序			 * @param {object} CQuery event的集合			 * @return {object} CQuery event的根据优先级排序之后的集合			 * @hide			 */			_sort:function(typed){				typed.sort(function(a,b){					var ap=a.opt.priority;					var bp=b.opt.priority;					return ap>bp?1:(ap==bp?0:-1);				});			},						/**			 * @method add			 * 添加事件			 * @param {object} 需要增加事件的元素。可以是数组也可以是单个元素。			 * @param {object} 需要增加的事件类型。			 * @param {object} 需要增加的事件名称			 * @param {object} 配置项			 */			add:function(els,types,handler,opt){				if (cQuery.type(els)!=='array'&&!cQuery.isCDom(els)){					els=[els];				}				if (cQuery.type(types)!=='array'){					types=[types];				}				if (cQuery.type(handler)!=='function'){					cQuery.error('event.add','handler is not a function',{						els:els,types:types,handler:handler,opt:opt					});					return;				}				var el,type,c,uid,eld,typed,d,evt;				opt=cQuery.extend(true,this._opt(),opt);				for (var i=0,m=els.length;i<m;i++){					el=els[i];					for (var j=0,n=types.length;j<n;j++){						type=types[j];						c=this._cEvts[type];						if (c){							if (c.el) el=c.el;							if (c.type) type=c.type;						}						uid=cQuery.uid(el);						eld=this._evts[uid]=this._evts[uid]||{};						d={opt:opt,handler:handler};						if (eld[type]){							typed=eld[type];							typed.push(d);						}else{							typed=eld[type]=[d];							if (el.addEventListener)								el.addEventListener(type,this._run,false);							else{								var fn=el['on'+type];								if (cQuery.type(fn)=='function')									typed.unshift({opt:this._opt(),handler:fn});								el['on'+type]=this._run;							}						}						this._sort(typed);						//window.onload						if (el===window&&type=='load'&&cQuery.isLoaded){							setTimeout(function(){								evt=cQuery.event.create(el,type);								handler.apply(el,[evt].concat(opt.arguments||[]));							},1);						}					}				}			},						/**			 * @method remove			 * 移除事件			 * @param {object} 需要移除事件的元素。可以是数组也可以是单个元素。			 * @param {object} 需要移除的事件类型。			 * @param {object} 需要移除的事件名称。			 */			remove:function(els,types,handler){				if (cQuery.type(els)!=='array'&&!cQuery.isCDom(els)){					els=[els];				}				if (cQuery.type(types)!=='array'){					types=[types];				}				var el,type,c,uid,eld,typed,d,x;				elLabel:for (var i=0,m=els.length;i<m;i++){					el=els[i];					for (var j=0,n=types.length;j<n;j++){						type=types[j];						c=this._cEvts[type];						if (c){							if (c.el) el=c.el;							if (c.type) type=c.type;						}						uid=el._uid_;						if (!uid)							continue elLabel;						eld=this._evts[uid];						if (!eld)							continue elLabel;						typed=eld[type];						if (!typed)							continue;						x=typed.length;						while (x--){							if (typed[x].handler==handler)								typed.splice(x,1);						}						if (!typed.length){							if (el.removeEventListener)								el.removeEventListener(type,this._run,false);							else								el['on'+type]=null;							delete eld[type];						}					}				}			},						/**			 * @method trigger			 * 触发事件			 * @param {object} 需要触发事件的元素。可以是数组也可以是单个元素。			 * @param {object} 需要触发的事件类型。			 * @param {object} 配置项			 */			trigger:function(els,types,opt){				if (cQuery.type(els)!=='array'&&!cQuery.isCDom(els)){					els=[els];				}				if (cQuery.type(types)!=='array'){					types=[types];				}				var el,type,c,evt;				for (var i=0,m=els.length;i<m;i++){					el=els[i];					for (var j=0,n=types.length;j<n;j++){						type=types[j];						c=this._cEvts[type];						if (c){							if (c.el) el=c.el;							if (c.type) type=c.type;						}						evt=this.create(el,type);						this._run.call(el,evt,opt);					}				}			},						create:function(el,type){				if (document.createEvent){					evt=document.createEvent('HTMLEvents');					evt.initEvent(type,true,true);					try{						cQuery.extend(evt,{							target:el						});					}catch(errA){						evt.skip=true;						el.dispatchEvent(evt);						delete evt.skip;					};				}else if (document.createEventObject){					evt=document.createEventObject();					cQuery.extend(evt,{						srcElement:el,						type:type					});				}				return evt;			},			debug:function(els){				if (cQuery.type(els)!=='array'&&!cQuery.isCDom(els)){					els=[els];				}				var el,uid;				cQuery.debug('-------------------- event --------------------');				for (var i=0,m=els.length;i<m;i++){					el=els[i];					uid=el._uid_;					eld=uid?this._evts[uid]:null;					cQuery.debug('['+i+']',el,eld||'null');				}			},			/**			 * @method clone			 * 元素之间的事件克隆			 * @param {object} 被拷贝的元素源。可以是数组也可以是单个元素。			 * @param {object} 拷贝到的元素。可以是数组也可以是单个元素。			 * @param {object} 事件是否要合并。			 */			clone:function(fromEl,toEls,isMerge){				if (cQuery.type(els)!=='array'&&!cQuery.isCDom(els)){					els=[els];				}				if (cQuery.type(types)!=='array'){					types=[types];				}				var fromUid=fromEl._uid_;				if (!fromUid){					cQuery.error('event.clone','no uid found');					return;				}				var fromEld=this._evts[fromUid];				if (!fromEld)					return;				var toEl,toUid,toEld;				for (var i=0,m=toEls.length;i<m;i++){					toEl=toEls[i];					if (toEl==fromEl)						continue;					toUid=cQuery.uid(toEl);					toEld=this._evts[toUid]=this._evts[toUid]||{};					if (isMerge){						toEld=this._evts[toUid]=cQuery.extend(true,toEld,fromEld);						for (var type in toEld)							this._sort(toEld[type]);					}else{						for (var type in toEld){							if (toEld.hasOwnProperty(type)){								if (toEl.removeEventListener)									toEl.removeEventListener(type,this._run,false);								else									toEl['on'+type]=null;							}						}						toEld=this._evts[toUid]=cQuery.copy(fromEld);					}					for (var type in toEld){						if (toEld.hasOwnProperty(type)&&!(isMerge&&type in fromEld)){							if (toEl.addEventListener)								toEl.addEventListener(type,this._run,false);							else{								var fn=toEl['on'+type];								if (cQuery.type(fn)=='function')									typed.unshift({opt:this._opt(),handler:fn});								toEl['on'+type]=this._run;							}						}					}				}			},						/**			 * @method _run			 * 执行事件列队			 * @param {object} 事件源 event			 * @param {object} 配置项			 */			_run:function(e,opt){				try{					if (e&&e.skip){						return;					}					var _this=this;					if (!e){						var win=(function(){							switch (_this.nodeType||-1){								case -1:									if (setInterval in _this){										return _this;									}else{										return window;									}								case 9:									var doc=_this;									break;								default:									var doc=_this.ownerDocument;									break; 							}							return doc.defaultView||doc.parentWindow;						})();						e=win.event;					}					var uid=cQuery.uid(this);					if (!uid){						//cQuery.error('event._run','no uid found');						return;					}					var eld=cQuery.event._evts[uid];					if (!eld){						//cQuery.error('event._run','no elment data found');						return;					}					var typed=eld[e.type];					if (!typed){						//cQuery.error('event._run','no type data found');						return;					}					e=cQuery.event.fixProperty(e,this);					opt=opt||{};					var d,rv,trv;					for (var i=0,n=typed.length;i<n;i++){						d=typed[i];						cQuery.extend(d.opt,opt);						if (cQuery.config('allowDebug')){							trv=d.handler.apply(this,[e].concat(d.opt.arguments||[]));						}else{							try{								trv=d.handler.apply(this,[e].concat(d.opt.arguments||[]));							}catch(errA){								cQuery.error(errA);							}						}						if (rv===cQuery.undefined){							rv=trv;						}else if (rv!==false){							rv=trv;						}					}					return rv;				}catch(errB){					cQuery.error(errB);				}			},			fixProperty:function(e,host){				e.host=host;				if (!e.target){					e.target=e.srcElement||document;				}				if (e.target!==null&&e.target.nodeType===3){					e.target=e.target.parentNode;				}				if (!e.relatedTarget&&e.fromElement){					e.relatedTarget=e.fromElement===e.target?e.toElement:e.fromElement;				}				// Calculate pageX/Y if missing and clientX/Y available				if (e.pageX==null&&e.clientX!=null){					var doc=e.target.ownerDocument||document,						docEl=doc.documentElement,						body=doc.body;					e.pageX=e.clientX+(docEl&&docEl.scrollLeft||body&&body.scrollLeft||0)-(docEl&&docEl.clientLeft||body&&body.clientLeft||0);					e.pageY=e.clientY+(docEl&&docEl.scrollTop||body&&body.scrollTop||0)-(docEl&&docEl.clientTop||body&&body.clientTop||0);				}				// Add which for key events				if (e.which==null&&(e.charCode!=null||e.keyCode!=null)){					e.which=e.charCode!=null?e.charCode:e.keyCode;				}				// Add metaKey to non-Mac browsers (use ctrl for PC's and Meta for Macs)				if (!e.metaKey&&e.ctrlKey){					e.metaKey=e.ctrlKey;				}				// Add which for click: 1 === left; 2 === middle; 3 === right				// Note: button is not normalized, so don't use it				if (!e.which&&e.button!==undefined){					e.which=(e.button&1?1:(e.button&2?3:(e.button&4?2:0)));				}				cQuery.extend(false,e,this.fixMethod);				return e;			},			fixMethod:{				preventDefault:function(){					this.returnValue=false;				},				stopPropagation:function(){					this.cancelBubble=true;				},				stop:function(){					this.preventDefault();					this.stopPropagation();				}			}		};								/**		 * @class cQuery.mod		 * cQuery的模块		 * @namespace cQuery		 */		cQuery.mod={			/**			  * @cfg {object} _mods 模块hash表			  * @hide			  */			_mods:{},						/**			  * @cfg {object} _instances 模块实例hash表			  * @hide			  */			_instances:{},						/**			 * @method load			 * 加载模块代码			 * @param {string} 模块名称			 * @param {string} 模块版本号			 * @param {object} 加载完并且初始化模块后，回调函数。			 */			load:function(name,version,callback){				var opts={};				var t=opts[name]={};				t[version]=callback;				this.multiLoad(opts);			},						/**			 * @method multiLoad			 * 加载多种模块代码			 * @param {object} 模块名称			 *<pre>			opt={				'address':{					'1.0':function(){},					'2.0':null				},				'calendar':['1.0',"2.0"],				'page':'1.0'			}</pre>			 * @param {object} 模块加载完，并且初始化之后的回调函数			 */			multiLoad:function(opts,onload){				if (!opts)					return;				var multi='',name,version,opt,copt,t,ct;				var multiArr=[],count=0;				for (name in opts){					if (!opts.hasOwnProperty(name))						continue;					opt=opts[name];					copt=this._mods[name];					if (!copt){						copt=this._mods[name]={};					}					//fix opt					switch (cQuery.type(opt)){						case 'string':							t=opt;							opt={};							opt[t]=null;							break;						case 'array':							t=opt;							opt={};							for (var i=0,n=t.length;i<n;i++)								opt[t[i]]=null;							break;						case 'object':							break;						default:							continue;					}					//for each version					for (version in opt){						t=opt[version];						ct=copt[version];						if (ct){							switch (ct.status){								case 'buffer':									ct.status='loading';									if (t){										ct.callback.push(t);									}									if (cQuery.config('loadMultiMod')){										multiArr[count++]=name+'-'+version;									}else{										count++;										(function(ct){											var t;											cQuery.loader.js(cQuery.config('modPath')+name+'-'+version+'.js',{												charset:'utf-8',												onload:function(){													count--;													if (!count&&onload)														onload();												}											});										})(ct);									}									break;								case 'loading':									if (t){										ct.callback.push(t);									}									break;								case 'loaded':									if (t){										t();									}									break;							}						}else{							ct=copt[version]={								name:name,								version:version,								status:'loading',								callback:t?[t]:[]							};														if (cQuery.config('loadMultiMod')){								multiArr[count++]=name+'-'+version;							}else{								count++;								(function(ct){									var t;									cQuery.loader.js(cQuery.config('modPath')+name+'-'+version+'.js',{										charset:'utf-8',										onload:function(){											count--;											if (!count&&onload)												onload();										}									});								})(ct);							}						}					}				}				//multiLoad				if (count&&cQuery.config('loadMultiMod')){					multiArr.sort();					cQuery.loader.js(cQuery.config('modPath')+multiArr.join('_')+'.js',{						charset:'utf-8',						onload:function(){							if (onload)								onload();						}					});				}			},						/**			 * @method reg			 * 注册模块代码			 * @param {object} 模块的基本属性			 *<pre>			  var cls={					name:'myMod',					version:'1.0',					init:function(){},					uninit:function(){},					module:myMod				};</pre>			 */			/*			(function($){				var cls={					name:'myMod',					version:'1.0',					init:function(){},					uninit:function(){},					module:myMod				};				function myMod(){					this.init();				}				//私有属性或方法加_前缀				//属性读写必需使用_set与_get				$.extend(myMod.prototype,{					init:function(){},					uninit:function(){},					_privateProperty1:'test',					_privateProperty2:123,					publicProperty1:'test',					publicProperty1_set:function(){},					publicProperty1_get:function(){},					publicProperty2:123,					publicProperty2_set:null, // no set permitions					publicProperty2_get:function(){},					_privateMethod1:function(){},					_privateMethod2:function(){},					publicMethod1:function(){},					publicMethod2:function(){}				});				$.mod.reg(cls);			})(cQuery);			*/			reg:function(cls){				if (!cls){					return;				}				var opt=this._getModOpt(cls.name,cls.version,true);				opt.status='loaded';				opt.init=cls.init;				opt.uninit=cls.uninit;				opt.module=cls.module;				if (opt.init){					opt.init();				}				var t;				while (t=opt.callback.shift()){					t();				}				//process buffer instances				var instances=this._getInstanceOpt(cls.name,cls.version);				if (instances){					var uid,buffer,ins;					for (uid in instances){						buffer=instances[uid].buffer;						if (buffer){							delete instances[uid].buffer;							while (t=buffer.shift()){								switch (t.cmd){									case 'new':										ins=this._getInstance.apply(this,t.args);										break;									case 'get':										ins.get.apply(ins,t.args);										break;									case 'set':										ins.set.apply(ins,t.args);										break;									case 'method':										ins.method.apply(ins,t.args);										break;								}							}							instances[uid]=ins;						}					}				}			},						/**			 * @method _getModOpt			 * [ 私有方法 ] 获取模块的属性			 * @param {string} 模块的名称			 * @param {string} 模块的版本号			 * @param {boolean} 是否缓冲。如果设置为true，那么可以在模块没有加载的时候，预先设置它的属性和方法，当模块加载完毕之后会自动执行；如果设置为false则没有上述方法。			 * @hide			 */			_getModOpt:function(name,version,isBuffer){				if (isBuffer===cQuery.undefined){					isBuffer=cQuery.config('modBuffer');				}				var t=this._mods[name];				if (!t){					if (isBuffer){						t=this._mods[name]={};					}else{						return null;					}				}				var opt=t[version];				if (!opt){					if (isBuffer){						opt=t[version]={							name:name,							version:version,							status:'buffer',							callback:[]						};					}else{						return null;					}				}				return opt;			},						/**			 * @method _getInstanceOpt			 * [ 私有方法 ] 获取模块实例的属性			 * @param {string} 模块实例的名称			 * @param {string} 模块的版本号			 * @return  {object} 返回模块实例的属性对象或者null			 * @hide			 */			_getInstanceOpt:function(name,version){				var t=this._instances[name];				if (!t){					return null;				}				var opt=t[version];				if (!opt){					return null;				}				return opt;			},			debug:function(els){				if (cQuery.type(els.length)!=='number') els=[els];				var el,uid;				cQuery.debug('--------------------  mod  --------------------');				for (var i=0,m=els.length;i<m;i++){					el=els[i];					uid=el._uid_;					var ins=[],j=0,name,version,t,u;					if (uid){						for (name in this._instances){							t=this._instances[name];							for (version in t){								u=t[version];								if (uid in u){									ins[j++]=u[uid];								}							}						}					}					cQuery.debug('['+i+']',el,ins.length?ins:'null');				}			},						/**			 * @method _destoryInstance			 * [ 私有方法 ] 销毁模块实例			 * @param {string} 模块实例			 * @hide			 */			_destoryInstance:function(instance){				var t;				for (t in instance){					if (instance.hasOwnProperty(t)){						delete instance[t];					}				}			},						/**			 * @method unreg			 * [ 私有方法 ] 反注册			 * @param {string} 模块的名称			 * @param {string} 模块的版本号			 */			unreg:function(name,version){				var opt=this._getModOpt(name,version);				if (!opt){					return;				}				var instances=this._getInstanceOpt(name,version),t;				if (instances){					var uid,t;					for (uid in instances){						t=instances[uid];						t.uninit();					}					delete this._instances[name][version];					if (cQuery.isEmptyObject(this._instances[name])){						delete this._instances[name];					}				}				if (opt.uninit)					opt.uninit();				delete this._mods[name][version];				if (cQuery.isEmptyObject(this._mods[name])){					delete this._mods[name];				}			},									/**			 * @method _getBufferInstance			 * [ 私有方法 ] 缓冲实例			 * @param {string} 模块的名称			 * @param {string} 模块的版本号			 * @param {string} 模块的唯一uid号			 * @return {object} 缓冲实例			 * @hide			 */			_getBufferInstance:function(name,version,uid){				var ins={					name:name,					version:version,					uid:uid,					buffer:[{						cmd:'new',						args:arguments					}]				};				ins.get=function(){					this.buffer.push({						cmd:'get',						args:arguments					});					return null;				};				ins.set=function(){					this.buffer.push({						cmd:'set',						args:arguments					});					return null;				};				ins.method=function(){					this.buffer.push({						cmd:'method',						args:arguments					});					return null;				};				ins.uninit=function(){					cQuery.mod._destoryInstance(this);					delete cQuery.mod._instances[name][version][uid];					return this;				};				return ins;			},									/**			 * @method _newByArray			 * [ 私有方法 ] 使用数组作为参数创建实例			 * @param {string} 模块配置的名称			 * @param {string} 模块的参数集合			 * @return {object} 返回实例			 * @hide			 */			_newByArray:function(cls,args){				var clsUid=cQuery.uid();				var argsUid=cQuery.uid();				var body=document.body;				cQuery.tmp[clsUid]=cls;				cQuery.tmp[argsUid]=args;				var arr=[];				for (var i=0,n=args.length;i<n;i++){					arr[i]='args['+i+']';				}				var t=new Function('var cls=cQuery.tmp["'+clsUid+'"],args=cQuery.tmp["'+argsUid+'"];var t=new cls('+arr.join(',')+');return t;')();				delete cQuery.tmp[clsUid];				delete cQuery.tmp[argsUid];				return t;			},									/**			 * @method _getInstance			 * [ 私有方法 ] 模块实例			 * @param {string} 模块的名称			 * @param {string} 模块的版本号			 * @param {string} 模块的唯一uid号			 * @return {object} 返回实例			 * @hide			 */			_getInstance:function(name,version,uid,arg1,arg2,callback){				var opt=this._getModOpt(name,version);				var argArr=Array.prototype.slice.call(arguments,3,5);				var mod=this._newByArray(opt.module,argArr);				var ins=this._instances[name][version][uid]||{};				cQuery.extend(ins,{					name:name,					version:version,					uid:uid,					buffer:false,					callback:cQuery.type(callback)=='function'?callback:null				});				ins.set=function(property,value){					var opt,p,v,f,arg;					switch (cQuery.type(property)){						case 'string':							if (!property||property[0]=='_'){								cQuery.error('mod('+name+':'+version+').set','invalid property name '+property);								return;							}							opt={};							opt[property]=value;							arg=Array.prototype.slice.call(arguments,2);							break;						case 'object':							opt=property;							arg=Array.prototype.slice.call(arguments,1);							break;						default:							return;					}					for (p in opt){						if (p[0]=='_'){							cQuery.error('mod('+name+':'+version+').set','invalid property name '+p);							continue;						}						v=opt[p];						if (p in mod){							if (p+'_set' in mod){								if (cQuery.type(mod[p+'_set'])=='function'){									return mod[p+'_set'].apply(mod,[v].concat(arg));								}else{									cQuery.error('mod('+name+':'+version+').set',p+'_set is not a function');									return;								}							}else{								cQuery.error('mod('+name+':'+version+').set','no '+p+' set permitions');								return;							}						}else{							cQuery.error('mod('+name+':'+version+').set',p+' is not a public property');							return;						}					}				};				ins.get=function(property){					if (cQuery.type(property)!='string'||!property||property[0]=='_'){						cQuery.error('mod('+opt.name+':'+opt.version+').set','invalid property name '+property);						return;					}					if (property in mod){						if (property+'_get' in mod){							if (cQuery.type(mod[property+'_get'])=='function'){								return mod[property+'_get'].apply(mod,Array.prototype.slice.call(arguments,1));							}else{								cQuery.error('mod('+opt.name+':'+opt.version+').get',property+'_set is not a function');								return;							}						}else{							cQuery.error('mod('+opt.name+':'+opt.version+').get','no '+property+' set permitions');							return;						}					}else{						cQuery.error('mod('+opt.name+':'+opt.version+').get',property+' is not a public property');						return;					}				};				ins.method=function(method){					if (cQuery.type(method)!='string'||!method||method[0]=='_'){						cQuery.error('mod('+opt.name+':'+opt.version+').method','invalid method name '+property);						return;					}					if (method in mod){						var f=mod[method];						if (cQuery.type(f)=='function'){							return f.apply(mod,Array.prototype.slice.call(arguments,1));						}else{							cQuery.error('mod('+opt.name+':'+opt.version+').method',method+' is not a function');							return;						}					}else{						cQuery.error('mod('+opt.name+':'+opt.version+').method',method+' is not a public method');						return;					}				};				ins.uninit=function(){					this.method('uninit');					cQuery.mod._destoryInstance(this);					delete cQuery.mod._instances[name][version][uid];					return this;				};				if (ins.callback){					ins.callback.apply(ins,argArr);				}				return ins;			},						/**			 * @method instantiate			 * 初始化模块实例			 * @param {string} 模块的名称			 * @param {string} 模块的版本号			 * @param {string} 模块的唯一uid号			 * @return 返回初始化好的模块实例			 */			instantiate:function(name,version,uid){				var opt=this._getModOpt(name,version);				if (!opt){					cQuery.error('mod('+name+':'+version+').instantiate('+uid+')','module has not been loaded');					return null;				}				var t,ins;				if (name in this._instances){					t=this._instances[name];				}else{					t=this._instances[name]={};				}				if (version in t){					t=t[version];				}else{					t=t[version]={};				}				if (uid in t){					cQuery.error('mod('+name+':'+version+').instantiate('+uid+')','module has already been instantiated');					return t[uid];				}				if (opt.status=='loaded'){					ins=this._getInstance.apply(this,arguments);				}else{					ins=this._getBufferInstance.apply(this,arguments);				}				t[uid]=ins;				return ins;			}		};				/**		 * @class cQuery.ajax		 * ajax的模块		 * @namespace cQuery		 */		 		 /**		  * @method cQuery.ajax		  * ajax初始化		  * @param {string} 请求ajax的地址		  * @param {string} ajax的配置		  * @return {object} ajax的请求对象		  */		cQuery.ajax=function(url,opt){			return cQuery.ajax.request(url,opt);		};				cQuery.extend(cQuery.ajax,{			/**			 * @cfg {object} ajax的对象			 * @hide			 */			_xhrs:{},						/**			 * @cfg {object}  _uniques			 * @hide			 */			_uniques:{},						/**			 * @method _remove			 * 根据key键值删除一个ajax对象			 * @param {string} key键值			 * @hide			 */			_remove:function(uid){				if (uid in this._xhrs){					delete this._xhrs[uid];				}				if (uid in this._uniques){					delete this._uniques[uid];				}			},						/**			 * @method _getXhr			 * 生成一个ajax对象			 * @return {object} 根据不同的浏览器返回一个xmlhttprequest对象			 * @hide			 */			_getXhr:function(){				var arr=["MSXML2.XMLHTTP","Microsoft.XMLHTTP"],xhr;				try{					xhr=new XMLHttpRequest();				}catch(errA){					for (var i=0;i<arr.length;i++){						try{							xhr=new ActiveXObject(arr[i]);							break;						}catch(errB){						}					}				}				if (xhr){					return xhr;				}else{					cQuery.error('ajax._getXhr','create XMLHttpRequest object failed');					return null;				}			},						/**			 * @method request			 * 发送一个ajax的请求			 * @param {string} 请求的ajax地址			 * @param {object} 发送请求的配置			 * <pre>				{					method:cQuery.AJAX_METHOD_GET,					context:{},					escape:false,					async:true,					cache:false,					header:{},					unique:'',					uniqueType:cQuery.AJAX_UNIQUETYPE_KEEPLAST,					onsuccess:cQuery.COMMON_DONOTHING,					onerror:cQuery.COMMON_DONOTHING,					onabort:cQuery.COMMON_DONOTHING				}				</pre>			 */			request:function(url,opt){				//default opt				opt=cQuery.extend({					method:cQuery.AJAX_METHOD_GET,					context:{},					escape:false,					async:true,					cache:false,					header:{},					unique:'',					uniqueType:cQuery.AJAX_UNIQUETYPE_KEEPLAST,					onsuccess:cQuery.COMMON_DONOTHING,					onerror:cQuery.COMMON_DONOTHING,					onabort:cQuery.COMMON_DONOTHING				},opt);								//fix opt				var i,s,t,u;				switch (opt.method){					case cQuery.AJAX_METHOD_GET:					case cQuery.AJAX_METHOD_POST:						break;					default:						cQuery.error('ajax','invalid method');						return;				}				if (!cQuery.isPlainObject(opt.header)){					cQuery.error('ajax','invalid header');					return;				}				switch (cQuery.type(opt.context)){					case 'string':						break;					case 'object':						s=[];						i=0;						for (t in opt.context){							if (!opt.context.hasOwnProperty(t)){								continue;							}							u=opt.context[t];							switch (cQuery.type(u)){								case 'array':								case 'object':									u=cQuery.stringifyJSON(u);									break;								case 'date':									u.toStdDateTimeString();									break;								default:									u=u.toString();									break;							}							if (opt.escape){								u=escape(u);							}							s[i++]=encodeURIComponent(t)+'='+encodeURIComponent(u);						}						opt.context=s.join('&');						break;					default:						cQuery.error('ajax','invalid context');						return;				}				if (cQuery.type(opt.unique)!='string'){					cQuery.error('ajax','invalid unique');					return;				}				if (cQuery.type(opt.onsuccess)!='function'){					cQuery.error('ajax','invalid onsuccess function');					return;				}				if (cQuery.type(opt.onerror)!='function'){					cQuery.error('ajax','invalid onerror function');					return;				}				if (cQuery.type(opt.onabort)!='function'){					cQuery.error('ajax','invalid onabort function');					return;				}				//unique				if (opt.unique){					if (opt.unique in this._uniques){						switch (opt.uniqueType){							case cQuery.AJAX_UNIQUETYPE_KEEPFIRST:								cQuery.log('ajax('+opt.unique+')','AJAX_UNIQUETYPE_KEEPFIRST');								return;							case cQuery.AJAX_UNIQUETYPE_KEEPLAST:								cQuery.log('ajax('+opt.unique+')','AJAX_UNIQUETYPE_KEEPLAST');								this._uniques[opt.unique].abort();								break;							default:								cQuery.error('ajax','invalid uniqueType');								return;						}					}				}				//start xhr				var xhr=this._getXhr();				if (!xhr){					return null;				}				var uid=cQuery.uid();				this._xhrs[uid]=xhr;				if (opt.unique){					this._uniques[uid]=xhr;				}				xhr.open(opt.method, url||document.URL, opt.async);				if (!('Content-Type' in opt.header)){					xhr.setRequestHeader('Content-Type','application\/x-www-form-urlencoded; charset=utf-8');				}				if (!opt.cache&&!('If-Modified-Since' in opt.header)){					xhr.setRequestHeader('If-Modified-Since','0');				}				for (t in opt.header){					xhr.setRequestHeader(t,opt.header[t]);				}				xhr.onreadystatechange=function(){					switch (xhr.readyState){						case 0:							cQuery.ajax._remove(uid);							opt.onabort.call(xhr);							break;						case 4:							cQuery.ajax._remove(uid);							if (xhr.status>=200&&xhr.status<300||xhr.status==304){								var ret;								if (usedRe.ajax.test(xhr.getResponseHeader('content-type'))){									ret=xhr.responseXML;								}else{									ret=xhr.responseText;								}								opt.onsuccess.call(xhr,xhr,ret);							}else{								opt.onerror.call(xhr,xhr);							}							break;					}				};				xhr.send(opt.context);				return xhr;			},						/**			 * @method abort			 * 取消ajax的请求			 */			abort:function(){				var uid,xhr;				for (uid in this._xhrs){					xhr=this._xhrs[uid].abort();					this._remove(uid);				}			}		});		/**		 * @method cQuery.jsonp		 * jsonp		 */ 		cQuery.jsonp=function(url,opt){			return cQuery.jsonp.request(url,opt);		};		cQuery.extend(cQuery.jsonp,{			request:function(url,opt){				return cQuery.loader.jsonp(url,opt);			}		});		/**		 * @class cQuery.fx		 * 动画特效		 * @namespace cQuery		 */		cQuery.fx={			_refs:{},			add:function(){						},			remove:function(){							},			run:function(){						}		};		/**		 * @class cQuery.tmpl		 * javascript模板引擎		 * @namespace cQuery		 */		cQuery.tmpl={			/**			 * @cfg {object} 模板 [ 私有属性 ] 			 */			_tmpls:{},						/**			 * @cfg  {object} 模板引擎关键字 [ 私有属性 ]			 */			_keyword1:['break','delete','function','return','typeof','case','do','if','switch','var','catch','else','in','this','void','continue','false','instanceof','throw','while','debugger','finally','new','true','with','default','for','null','try'],						/**			 * @cfg  {object} 模板引擎关键字 [ 私有属性 ]			 */			_keyword2:['abstract','double','goto','native','static','boolean','enum','implements','package','super','byte','export','import','private','synchronized','char','extends','int','protected','throws','class','final','interface','public','transient','const','float','long','short','volatile'],						/**			 * @cfg  {object} 模板引擎关键字Hash表 [ 私有属性 ]			 */			_keywordHash:null,						/**			 * @cfg  {object} 转义字符对应表 [ 私有属性 ]			 */			_stringMap:{				'\r':'\\r',				'\n':'\\n',				'"':'\\"',				'\'':'\\\'',				'\\':'\\\\'			},						/**			 * @method _init			 * [ 私有方法 ] 初始化模板引擎，关键字初始化等。			 */			_init:function(){				if (this._keywordHash){					return;				}				this._keywordHash={};				for (var i=0,n=this._keyword1.length;i<n;i++){					this._keywordHash[this._keyword1[i]]=true;				}				for (var i=0,n=this._keyword2.length;i<n;i++){					this._keywordHash[this._keyword2[i]]=true;				}			},						/**			 * @method _mapString			 * [ 私有方法 ] 初始化转义词			 * @param {string} 需要转义的字符串			 * @return {string} 转义完毕后的字符串			 */			_mapString:function(str){				var map=this._stringMap;				return str.replace(usedRe.tmplMapString,function(a){					return map[a]||a;				});			},						/**			 * @method _parse			 * [ 私有方法 ] 根据模板进行解析			 * @param {string} 待解析的字符串			 * @return {string} 解析完毕的字符串			 */			_parse:function(source){				var arr=[],k=0,start;				main:					while (true){						//find start						start='';						source=source.replace(usedRe.tmplParse,function(a,b){							arr[k++]={								type:'txt',								value:a							};							start=b;							return '';						});						if (!start){							arr[k++]={								type:'txt',								value:source							};							break main;						}						//find end						vari:							if (start=='${'){								var stack=1;								for (var i=2,n=source.length;i<n;i++){									var chr=source.substr(i,1);									switch (chr){										case '{':											stack++;											break;										case '}':											stack--;											break;									}									if (!stack){										arr[k++]={type:'vari',value:source.slice(0,i+1)};										source=source.slice(i+1);										break vari;									}								}								arr[k++]={									type:'txt',									value:source								};								break main;							}						cmd:							if (start=='{{'){								var stack=2;								for (var i=2,n=source.length;i<n;i++){									var chr=source.substr(i,1);									switch (chr){										case '{':											stack++;											break;										case '}':											stack--;											break;									}									if (!stack){										arr[k++]={											type:source.substr(i-1,1)=='}'?'cmd':'txt',											value:source.slice(0,i+1)										};										source=source.slice(i+1);										break cmd;									}								}								arr[k++]={									type:'txt',									value:source								};								break main;							}					}				return arr;			},						/**			 * @method _checkVari			 * [ 私有方法 ] 对没有定义过的变量名做容错处理			 * @param {string} 字符串			 * @return {string} 返回容错处理后的字符串			 */			_checkVari:function(){				var arr=[],k=0,vari,hash=this._keywordHash;				for (var i=0,n=arguments.length;i<n;i++){					vari=arguments[i];					vari.replace(usedRe.tmplCheckVari,function(a,b,c){						if (!hash.hasOwnProperty(c)){							arr[k++]='if (typeof '+c+'=="undefined") _undefined["'+c+'"]="";';						}					});				}				return arr.join('');			},			_splitVari:function(vari){				var arr=[],k=0;				var t=(vari+' ,').split('');				var stack=[],start=0;				for (var i=0,n=t.length;i<n;i++){					if ((stack[0]=='"'||stack[0]=='\'')&&t[i]=='\\'){						i++;						continue;					}					switch (t[i]){						case ',':							if (!stack.length){								arr[k++]=vari.slice(start,i).trim();								start=i+1;							}							break;						case '(':						case '[':						case '{':							stack.unshift(t[i]);							break;						case ')':							if (stack[0]=='('){								stack.shift();							}							break;						case ']':							if (stack[0]=='['){								stack.shift();							}							break;						case '}':							if (stack[0]=='{'){								stack.shift();							}							break;						case '"':						case '\'':							if (stack[0]==t[i]){								stack.shift();							}else{								stack.unshift(t[i]);							}							break;					}				}				return arr;			},			/**			 * @method _makeFn			 * [ 私有方法 ] 创建函数组			 * @param {string} 模板			 * @return {string}  返回函数			 */			_makeFn:function(tmpl){				var stack=[],level=0;				var fnArr=[],k=0;				fnArr[k++]='var _o=[],_k=0,_undefined={};if(!$data){$data={};}if(!$opt){$opt={};}with(_undefined){with($opt){with($data){';				var tmp='_undefined["#tmp"]';				for (var i=0,n=tmpl.length;i<n;i++){					switch (tmpl[i].type){						case 'txt':							fnArr[k++]='_o[_k++]="'+this._mapString(tmpl[i].value)+'";';							break;						case 'vari':							var arr=tmpl[i].value.match(usedRe.tmplKey_$);							var def=this._checkVari(arr[1]);							fnArr[k++]=def+'_o[_k++]='+arr[1]+';';							break;						case 'cmd':							var arr1=tmpl[i].value.match(usedRe.tmplKey_cmd);							if (!arr1){								break;							}							switch (arr1[1]){								case 'if':									var arr2=tmpl[i].value.match(usedRe.tmplKey_if);									stack[++level]=1;									var def=this._checkVari(arr2[1]);									fnArr[k++]=def+'try{'+tmp+'='+arr2[1]+';}catch($error){'+tmp+'=false;};if ('+tmp+'){';									break;								case 'else':									var arr2=tmpl[i].value.match(usedRe.tmplKey_else);									if (arr2[1]){										stack[level]++;										var def=this._checkVari(arr2[2]);										fnArr[k++]='}else{'+def+'try{'+tmp+'='+arr2[2]+';}catch($error){'+tmp+'=false;};'+'if ('+tmp+'){';									}else										fnArr[k++]='}else{';									break;								case '/if':									fnArr[k++]='}'.repeat(stack[level--]);									break;								case 'loop':									var arr2=tmpl[i].value.match(usedRe.tmplKey_loop);									var _i=arr2[2]||'$index',_l=arr2[4]||'$length',_n=arr2[5];									var def=this._checkVari(_n);									_n=this._splitVari(_n);									switch (_n.length){										case 1:											_n=[0,_n[0],1];										case 2:											_n=[_n[0],_n[1],1];									}									var f;									switch (_n[2]){										case 0:											_n[2]='';											f='<';											break;										case 1:											_n[2]='++';											f='<';											break;										case -1:											_n[2]='--';											f='<';											break;										default:											if (isFloat(_n[2])){												var t=parseFloat(_n[2],10);												f=t>=0?'<':'>';												_n[2]='+='+_n[2];											}											break;									}									if (f){										fnArr[k++]=def+'(function(){for (var '+_i+'='+_n[0]+','+_l+'='+_n[1]+';'+_i+f+_l+';'+_i+_n[2]+'){';									}else{										fnArr[k++]=def+'(function(){for (var '+_i+'='+_n[0]+','+_l+'='+_n[1]+',$step='+_n[2]+';$step>=0^'+_i+'<'+_l+';'+_i+'+=$step){';									}									break;								case '/loop':									fnArr[k++]='}})();';									break;								case 'each': // each (index[,value[,length]]) vari									var arr2=tmpl[i].value.match(usedRe.tmplKey_each);									var _i=arr2[2]||'$index',_v=arr2[4]||'$value',_l=arr2[6]||'$length',_n=arr2[7];									var def=this._checkVari(_n);									fnArr[k++]=def+'(function(){for (var '+_i+'=0,'+_l+'=('+_n+').length;'+_i+'<'+_l+';'+_i+'++){var '+_v+'='+_n+'['+_i+'];with('+_v+'){';									break;								case '/each':									fnArr[k++]='}}})();';									break;								case 'enum':									var arr2=tmpl[i].value.match(usedRe.tmplKey_enum);									var _k=arr2[2]||'$key',_v=arr2[4]||'$value',_n=arr2[5];									var def=this._checkVari(_n);									fnArr[k++]=def+'(function(){for (var '+_k+' in '+_n+'){var '+_v+'='+_n+'['+_k+'];with('+_v+'){';									break;								case '/enum':									fnArr[k++]='}}})();';									break;								case 'tmpl':									var arr2=tmpl[i].value.match(usedRe.tmplKey_tmpl);									arr2[3]=arr2[3]||'$data';									var def=this._checkVari(arr2[1],arr2[3]);									fnArr[k++]=def+'_o[_k++]=cQuery.tmpl.render('+arr2[1]+','+arr2[3]+');';									break;								default:									break;							}							break;						default:							break;					}				}				fnArr[k++]='}}} return _o.join("");';				var fnStr=fnArr.join('');				try{					var fn=new Function('$data','$opt',fnStr);				}catch (errA){					cQuery.error('tmpl._makefn','invalid source');					cQuery.error(errA);					cQuery.log('tmpl._makefn',fnStr);					return cQuery.COMMON_DONOTHING;				}				return fn;			},						/* strict for high performance render */			_makeFnStrict:function(tmpl){				var stack=[],level=0;				var fnArr=[],k=0;				fnArr[k++]='\					var _o=[],_k=0;\					if (!$data){\						$data={};\					}\					if (!$opt){\						$opt={};\					}\				';				for (var i=0,n=tmpl.length;i<n;i++){					switch (tmpl[i].type){						case 'txt':							fnArr[k++]='_o[_k++]="'+this._mapString(tmpl[i].value)+'";';							break;						case 'vari':							var arr=tmpl[i].value.match(usedRe.tmplKey_$);							fnArr[k++]='_o[_k++]='+arr[1]+';';							break;						case 'cmd':							var arr1=tmpl[i].value.match(usedRe.tmplKey_cmd);							if (!arr1){								break;							}							switch (arr1[1]){								case 'if':									var arr2=tmpl[i].value.match(usedRe.tmplKey_if);									stack[++level]=1;									fnArr[k++]='if ('+arr2[1]+'){';									break;								case 'else':									var arr2=tmpl[i].value.match(usedRe.tmplKey_else);									if (arr2[1]){										stack[level]++;										fnArr[k++]='}else{ if ('+arr2[2]+'){';									}else{										fnArr[k++]='}else{';									}									break;								case '/if':									fnArr[k++]='}'.repeat(stack[level--]);									break;								case 'loop':									var arr2=tmpl[i].value.match(usedRe.tmplKey_loop);									var _i=arr2[2]||'$index',_l=arr2[4]||'$length',_n=arr2[5];									_n=this._splitVari(_n);									switch (_n.length){										case 1:											_n=[0,_n[0],1];										case 2:											_n=[_n[0],_n[1],1];									}									var f;									switch (_n[2]){										case 0:											_n[2]='';											f='<';											break;										case 1:											_n[2]='++';											f='<';											break;										case -1:											_n[2]='--';											f='<';											break;										default:											if (isFloat(_n[2])){												var t=parseFloat(_n[2],10);												f=t>=0?'<':'>';												_n[2]='+='+_n[2];											}											break;									}									if (f){										fnArr[k++]='(function(){for (var '+_i+'='+_n[0]+','+_l+'='+_n[1]+';'+_i+f+_l+';'+_i+_n[2]+'){';									}else{										fnArr[k++]='(function(){for (var '+_i+'='+_n[0]+','+_l+'='+_n[1]+',$step='+_n[2]+';$step>=0^'+_i+'<'+_l+';'+_i+'+=$step){';									}									break;								case '/loop':									fnArr[k++]='}})();';									break;								case 'each': // each (index[,value[,length]]) vari									var arr2=tmpl[i].value.match(usedRe.tmplKey_each);									var _i=arr2[2]||'$index',_v=arr2[4]||'$value',_l=arr2[6]||'$length',_n=arr2[7];									fnArr[k++]='(function(){for (var '+_i+'=0,'+_l+'=('+_n+').length;'+_i+'<'+_l+';'+_i+'++){var '+_v+'='+_n+'['+_i+'];';									break;								case '/each':									fnArr[k++]='}})();';									break;								case 'enum':									var arr2=tmpl[i].value.match(usedRe.tmplKey_enum);									var _k=arr2[2]||'$key',_v=arr2[4]||'$value',_n=arr2[5];									fnArr[k++]='(function(){for (var '+_k+' in '+_n+'){var '+_v+'='+_n+'['+_k+'];';									break;								case '/enum':									fnArr[k++]='}})();';									break;								case 'tmpl':									var arr2=tmpl[i].value.match(usedRe.tmplKey_tmpl);									arr2[3]=arr2[3]||'$data';									fnArr[k++]='_o[_k++]=cQuery.tmpl.renderStrict('+arr2[1]+','+arr2[3]+');';									break;								default:									break;							}							break;						default:							break;					}				}				fnArr[k++]='return _o.join("");';				var fnStr=fnArr.join('');				try{					var fn=new Function('$data','$opt',fnStr);				}catch (errA){					cQuery.error('tmpl._makeFnStrict','invalid source');					cQuery.error(errA);					cQuery.log('tmpl._makeFnStrict',fnStr);					return cQuery.COMMON_DONOTHING;				}				return fn;			},			_getCache:function(source){				var t=this._tmpls[source];				if (!t){					t=this._tmpls[source]={						source:source					};				}				if (!t.tmpl){					t.tmpl=this._parse(source);				}				return t;			},			/**			 * @method render			 * 根据模板渲染成结果			 * @param {string} 模板的内容			 * @param {string} 数据的内容			 * @param {object} 配置项			 * @return {string} 返回模板渲染之后的结果			 */			render:function(source,data,opt){				this._init();				var error=0;				var t=this._getCache(source);				if (!t.fn){					t.fn=this._makeFn(t.tmpl);				}				try{					var str=t.fn(data,opt);				}catch(errA){					cQuery.error('tmpl.render',t.fn.toString().slice(0,200)+'...');					return '';				}				return str;			},			renderStrict:function(source,data,opt){				this._init();				var error=0;				var t=this._getCache(source);				if (!t.fnStrict){					t.fnStrict=this._makeFnStrict(tmpl);				}				try{					var str=t.fnStrict(data,opt);				}catch(errA){					cQuery.error('tmpl.renderStrict',t.renderStrict.toString().slice(0,200)+'...');					return '';				}				return str;			}		};		/**		 * @class cQuery.commonFn		 * @namespace cQuery		 */		cQuery.extend(cQuery,{						/**			 * @method cQuery.ready			 * 页面初始化完毕的事件			 * @param {object} 回调函数			 * @param {object} 事件的option选项 			 */			ready:function(handler,opt){				cQuery.event.add(document.documentElement,'ready',handler,opt);				if (cQuery.isReady){					setTimeout(function(){						var evt=cQuery.event.create(document.documentElement,'ready');						handler.call(document.documentElement,evt);					},1);				}			},						/**			 * @cfg {object} _jQueryFn			 * @hide			 */			_jQueryFn:[],						/**			 * @method cQuery.jQueryReady			 * 页面初始化完毕的事件			 * @param {object} 回调函数			 * @param {object} 事件的option选项 			 */			jQueryReady:function(fn){				if (cQuery.type(fn)!='function'){					cQuery.error('jQueryReady','invalid function '+fn);					return;				}				var _this=this;				switch (jQueryStatus){					case '':						this._jQueryFn.push(fn);						jQueryStatus='loading';						cQuery.loader.js(cQuery.config('jQueryPath'),{							onload:function(){								jQueryStatus='loaded';								jQuery.extend(jQueryExtend);								var t;								window.$=jQuery;								while (t=_this._jQueryFn.shift()){									t(jQuery);								}								window[cQuery.config('namespace')]=cQuery;							}						});						break;					case 'loading':						this._jQueryFn.push(fn);						break;					case 'loaded':						window.$=jQuery;						t(jQuery);						window[cQuery.config('namespace')]=cQuery;						break;				}			},						/**			 * @method cQuery.copy			 * 复制一个对象			 * @param {object} 被复制的对象。array或者object			 * @param {boolean} 是否深度复制			 * @return 复制好的新对象			 */			copy:function(obj,isFull){				var t=cQuery.type(obj);				var newObj;				switch (t){					case 'array':						newObj=[];						for (var i=0,n=obj.length;i<n;i++)							newObj[i]=this.copy(obj[i]);						break;					case 'object':						if (cQuery.isCDom(obj)){							newObj=cQuery.fn.pushStack(obj.toArray());						}else{							newObj={};							for (var name in obj){								if (isFull||!obj.hasOwnProperty||obj.hasOwnProperty(name))									newObj[name]=this.copy(obj[name]);							}						}						break;					default:						newObj=obj;						break;				}				return newObj;			},						/**			 * @method cQuery.bindMethod			 * 为一个对象绑定方法			 * @param {boolean} 是否是自身的属性			 * @param {object} 被绑定的对象			 * @param {object} 绑定的方法			 */			bindMethod:function(isOwnProperty,obj,ref){				if (cQuery.type(isOwnProperty)!=='boolean'){					ref=obj;					obj=isOwnProperty;					isOwnProperty=false;				}				var name,t;				if (!ref){					ref=obj;				}				for (name in obj){					if (!isOwnProperty||obj.hasOwnProperty(name)){						if (cQuery.type(obj[name])=='function'){								obj[name]=obj[name].bind(ref);						}					}				}			},						/**			 * @method cQuery.active			 * 返回当前获得焦点的元素			 * @return {object} 返回当前获得焦点的元素			 */			active:function(){				return 'activeElement' in document?document.activeElement:activeEl;			}		});								//jQueryExtend		var jQueryExtend={			_pluginStatus:{},			_pluginFn:{},			plugin:function(url,fn){				var t=jQueryExtend._pluginStatus[url];				var type=cQuery.type(fn);				if (t&&!type){					return;				}				switch (t){					case 'loading':						jQueryExtend._pluginFn[url].push(fn);						break;					case 'loaded':						fn(jQuery);						break;					default:						jQueryExtend._pluginStatus[url]='loading';						jQueryExtend._pluginFn[url]=type=='function'?[fn]:[];						cQuery.loader.js(url,{							onload:function(){								jQueryExtend._pluginStatus[url]='loaded';								var t;								while (t=jQueryExtend._pluginFn[url].shift()){									t(jQuery);								}							}						});				}			}		};				/**		 * @method cDom		 * cDom的扩展		 * @param {object} 选择器		 * @param {object} 		 * @return {object} 返回cDom对象		 */		var cDom=function(selector,context){			// Handle $(""), $(null), or $(undefined)			if (!selector)				return this;			// Handle $(DOMElement)			if (selector==window||selector.nodeType){				this[0]=selector;				this.length=1;				return this;			}			// Handle Array,HTMLCollection			var t=cQuery.type(selector);			if (t=='array'||t=='HTMLCollection')				return this.pushStack(selector);			return this.push.apply(this,Sizzle.apply(null,arguments));		};						/**		 * @class cQuery.fn		 * @namespace cQuery		 */		cQuery.fn=cDom.prototype={			/**			 * @cfg {float} _v 随机数			 * @hide			*/			_v:Math.random(),			length:0,						/**			 * @method push			 加入一个元素，同array的push方法			 */			push:Array.prototype.push,						/**			 * @method pushStack			 * 			 */			pushStack:function(els){				var ret=new cDom();				Array.prototype.push.apply(ret,els);				return ret;			},						/**			 * @method slice			 同array的slice方法			 */			slice:function(){				return this.pushStack(Array.prototype.slice.apply(this,arguments));			},						/**			 * @method splice			 同array的splice方法			 */			splice:function(){				return this.pushStack(Array.prototype.splice.apply(this,arguments));			},						/**			 * @method sort			同array的sort方法			 */			sort:Array.prototype.sort,						/** 			 * @method find			 查找节点。根据提供的选择器，获取当前元素的符合要求的子元素			 * @param {object}  选择器、对象或者元素			 * @return {object} cQuery的元素			 */			find:function(selector){				var arr=[],k=0,t,u;				for (var i=0,m=this.length;i<m;i++){					t=Sizzle(selector,this[i]);					if (!t){						continue;					}					try{						arr[k]=Array.prototype.slice.call(t,0);					}catch(errA){						//修复IE下面htmlCollection不支持slice方法						u=[];						for(var j=0,n=t.length;j<n;j++){							u[j]=t[j];						}						arr[k]=u;					}					k++;				}				arr=Array.prototype.concat.apply([],arr);				Sizzle.uniqueSort(arr);				return this.pushStack(arr);			},						/** 			 * @method filter			 过滤节点。根据提供的选择器，获取当前元素的返回符合要求的元素			 * @param {object}  选择器、对象或者元素			 * @return {object} cQuery的元素			 */			filter:function(selector){				var arr=Sizzle.matches(selector,this.toArray());				return this.pushStack(arr);			},			is:function(selector){				return this.length&&this.filter(selector).length==this.length;			},						/** 			 * @method toArray			 cDom转换到array			 * @return {object} 转换完成的数组			 */			toArray:function(){				return Array.prototype.slice.call(this,0);			},						/** 			 * @method get			 获取dom对象			 * @param {object} 如果是一个整数，则返回对应下标的对象；如果无，则返回将cDom转成Array的对象。			 * @return {object} 返回dom对象			 */			get:function(k){				return cQuery.type(k)=='number'?this[k>=0?k:k+this.length]:this.toArray();			},						/** 			 * @method each			 对dom对象集合每个元素执行一遍回调函数			 * @param {object} 回调函数的名称			 * @param {object} 执行的作用域			 * @return {object} 返回此dom对象集合			 */			each:function(f,_this){				for (var i=0,n=this.length;i<n;i++)					f.call(_this,this.slice(i,i+1),i,this);				return this;			},						/** 			 * @method first			 获取cDom的第一个元素			 * @return {object} 返回cDom的第一个元素			 */			first:function(){return this.slice(0,1);},						/** 			 * @method last			 获取cDom的最后一个元素			 * @return {object} 返回cDom的最后一个元素			 */			last:function(){return this.slice(-1);},			indexOf:function(el){				el=cQuery(el);				if (!el[0]){					cQuery.error('indexOf','the cDom object is empty');					return -1;				}				for (var i=0,n=this.length;i<n;i++){					if (this[i]==el[0]){						return i;					}				}				return -1;			},			/** 			 * @method uid			 获取cDom的uid			 * @return {object} 返回cDom的uid			 */			uid:function(){				var t=this[0];				if (!t){					cQuery.error('uid','the cDom object is empty');					return this;				}				return cQuery.uid(t);			},						/** 			 * @method bind			 为cDom绑定事件			 * @param {object} 需要增加的事件类型。			 * @param {object} 需要增加的事件名称			 * @param {object} 配置项			 * @return {object} 返回cDom			 */			bind:function(types,handler,opt){				cQuery.event.add(this,types,handler,opt);				return this;			},						/** 			 * @method unbind			 为cDom解除绑定事件			 * @param {object} 需要解除绑定的事件类型。			 * @param {object} 需要解除绑定的事件名称			 * @return {object} 返回cDom			 */			unbind:function(types,handler){				cQuery.event.remove(this,types,handler);				return this;			},			debug:function(){				cQuery.debug('==================== debug ====================');				cQuery.debug(this);				cQuery.event.debug(this);				cQuery.mod.debug(this);				cQuery.debug('===============================================');				return this;			},						/** 			 * @method trigger			 cDom触发事件，不触发默认动作			 * @param {object} 需要触发的事件类型。			 * @param {object} 配置项			 * @return {object} 返回cDom			 */			trigger:function(types,opt){				cQuery.event.trigger(this,types,opt);				return this;			},						/** 			 * @method clone			 克隆cDom对象			 * @param {boolean} 是否克隆子节点 			 * @param {boolean} 是否克隆事件			 * @return {object} 返回cDom			 */			clone:function(isConChi,isCpyEvt){				var arr=[],k=0;				var fromEl,toEl;				for (var i=0;i<this.length;i++){					fromEl=this[i];					toEl=fromEl.cloneNode(isConChi);					if (isCpyEvt)						cQuery.event.clone(fromEl,toEl);					arr[k++]=toEl;				}				return this.pushStack(arr);			},						append:function(child){				var t=this[0];				if (!t){					cQuery.error('append','the cDom object is empty');					return this;				}				var c=cQuery.isCDom(child)?child:[child];				for (var i=0,n=c.length;i<n;i++)					t.appendChild(c[i]);				return this;			},			/** 			 * @method appendTo			 把cDom作为附加节点至尾部			 * @param {object} 被附加的cDom			 * @return {object} 返回cDom			 */			appendTo:function(parent){				var p=cQuery.isCDom(parent)?parent[0]:parent;				for (var i=0,n=this.length;i<n;i++){					p.appendChild(this[i]);				}				return this;			},			prepend:function(child){				var t=this[0];				if (!t){					cQuery.error('prepend','the cDom object is empty');					return this;				}				var c=cQuery.isCDom(child)?child:[child];				var f=t.firstChild;				if (f){					for (var i=0,n=c.length;i<n;i++){						t.insertBefore(c[i],f);					}				}else{					this.append(child);				}				return this;			},			/** 			 * @method prependTo			 把cDom作为附加节点至首部			 * @param {object} 被附加的cDom			 * @return {object} 返回cDom			 */			prependTo:function(parent){				var p=cQuery.isCDom(parent)?parent[0]:parent;				var f=p.firstChild;				if (f){					for (var i=0,n=this.length;i<n;i++){						p.insertBefore(this[i],f);					}				}else{					this.appendTo(parent);				}				return this;			},						/** 			 * @method insertBefore			 把cDom作为附加节点至指定节点前			 * @param {object} 被附加的cDom			 * @return {object} 返回cDom			 */			insertBefore:function(child){				var c=cQuery.isCDom(child)?child[0]:child;				var p=c.parentNode;				for (var i=0,n=this.length;i<n;i++){					p.insertBefore(this[i],c);				}				return this;			},						/** 			 * @method insertAfter			 把cDom作为附加节点至指定节点后			 * @param {object} 被附加的cDom			 * @return {object} 返回cDom			 */			insertAfter:function(child){				var c=cQuery.isCDom(child)?child[0]:child;				var p=c.parentNode;				var n=c.nextSibling;				if (n){					for (var i=0,m=this.length;i<m;i++){						p.insertBefore(this[i],n);					}				}else{					this.appendTo(p);				}				return this;			},			remove:function(){				var t;				for (var i=0,n=this.length;i<n;i++){					t=this[i];					t.parentNode.removeChild(t);				}				return this;			},						_createNewHtml1:function(obj,val,tag){				var el,t;				while (t=obj.firstChild)					obj.removeChild(t);				el=obj.ownerDocument.createElement('div');				el.innerHTML=val;				el=el.getElementsByTagName(tag)[0];				if (el){					switch (el.tagName){						case 'SELECT':							while (t=el.firstChild){								switch (t.tagName){									case 'OPTION':										if (cQuery.browser.isIE){											el.options[0]=null;											obj.options.add(new Option(t.text,t.value));										}else{											obj.options.add(t);										}										break;									default:										obj.appendChild(t);										break;								}							}							break;						default:							while (t=el.firstChild)								obj.appendChild(t);							break;					}				}			},			_createNewHtml2:function(obj,val){				var el,t,arr=[],k=0;				var p=obj.parentNode;				el=obj.ownerDocument.createElement('div');				el.innerHTML=val;				while (t=el.firstChild){					p.insertBefore(t,obj);					arr[k++]=t;				}				p.removeChild(obj);				return arr;			},			_writeIframe:function(obj,val,callback){				var url=cQuery.config('blankPage')||'about:blank';				if (obj.src!=url){					obj.src=url;				}				try{					var win=obj.contentWindow||obj.window;					var doc=win.document;					doc.open();					doc.write(val);					doc.close();					if (callback&&cQuery.type(callback)=='function'){						callback.call(obj);					}				}catch(errA){					this._writeIframe.bind(this,obj,val).delay();				};			},			attr:function(key,val){				if (cQuery.type(key)!='string'||!key){					cQuery.error('attr','invalid key');					return null;				}				if (val==cQuery.undefined){					var obj=this[0];					return obj?this[0].getAttribute(key):'';				}else{					var i,n;					for (i=0,n=this.length;i<n;i++){						this[i].setAttribute(key,val);					}				}			},						/** 			 * @method value			 读取或写入value			 * @param {object} 如果为空，则返回此对象的值；否则，给此对象设置值。			 */			value:function(val){				if (val==cQuery.undefined){					var obj=this[0];					return obj?this[0].value:'';				}else{					var i,n;					for (i=0,n=this.length;i<n;i++){						this[i].value=val;					}				}			},						/** 			 * @method html			 读取或写入innerHTML			 * @param {object} 如果为空，则返回此对象的innerHTML；否则，给此对象设置innerHTML。			 * @return {string} 返回innerHTML			 */			html:function(val,callback){				var obj,tag;				if (val==cQuery.undefined){					obj=this[0];					return obj?obj.innerHTML:'';				}else{					for (var i=0,n=this.length;i<n;i++){						obj=this[i];						if (obj.nodeType==1){							tag=obj.tagName.toLowerCase();							ie=cQuery.browser.isIE?'ie':'!ie';							switch (tag+'_'+ie){								case 'thead_ie':								case 'tbody_ie':								case 'tfoot_ie':									val=val._wrap(tag);								case 'table_ie':									val=val._wrap('table');									this._createNewHtml1(obj,val,tag);									break;								case 'tr_ie':									val=val._wrap('tr')._wrap('table');									this._createNewHtml1(obj,val,tag);									break;								case 'optgroup_ie':									val=val._wrap(tag);								case 'select_ie':									val=val._wrap('select');									this._createNewHtml1(obj,val,tag);									break;								case 'style_ie':									obj.cssText=val;									break;								case 'style_!ie':									obj.textContent=val;									break;								case 'script_ie':									obj.text=val;									break;								case 'script_!ie':									obj.text=val;									break;								case 'iframe_ie':								case 'iframe_!ie':									this._writeIframe(obj,val,callback);									break;								default:									obj.innerHTML=val;							}						}					}					return this;				}			},						/** 			 * @method ohtml			 读取或写入outerHTML			 * @param {object} 如果为空，则返回此对象的outerHTML；否则，给此对象设置outerHTML。			 * @return {string} 返回outerHTML			 */			ohtml:function(val){				var obj,arr=[],k=0;				var p,prev,next,t;				if (cQuery.type(val)=='string'){					for (var i=0;i<this.length;i++){						obj=this[i];						if (obj.nodeType==1){							if (obj.outerHTML){								p=obj.parentNode;								prev=obj.previousSibling;								next=obj.nextSibling;								obj.outerHTML=val;								t=prev||p.firstChild;								if (t&&t!=next){									if (t!=prev)										arr[k++]=t;									while ((t=t.nextSibling)&&t!=next){										arr[k++]=t;									}								}							}else{								arr=arr.concat(this._createNewHtml2(obj,val));								k=arr.length;							}						}else							arr[k++]=[obj];					}					return cQuery.fn.pushStack(arr);				}else{					obj=this[0];					if (obj.outerHTML){						return obj.outerHTML;					}else{						t=document.createElement('div');						t.appendChild(obj.cloneNode(true));						return t.innerHTML;					}				}			},						/** 			 * @method text			 读取或写入innerText			 * @param {object} 如果为空，则返回此对象的innerText；否则，给此对象设置innerText。			 * @return {string} 返回text			 */			text:function(val){				var obj;				if (cQuery.type(val)=='string'){					for (var i=0;i<this.length;i++){						obj=this[i];						switch (obj.nodeType){							case 1:								if ('innerText' in obj){									obj.innerText=val;								}else if ('textContent' in obj){									obj.textContent=val;								}							case 3:								obj.nodeValue=val;						}					}					return this;				}else{					obj=this[0];					if (!obj){						return '';					}if ('innerText' in obj){						return obj.innerText;					}else if ('textContent' in obj){						return obj.textContent;					}else{						return '';					}				}			},			/**			 * @method _getCss			 * [ 私有方法, 仅限内部调用 ] 获取元素的css样式 			 * @return {object} 返回元素的样式内容			 * @hide			 */			_getCss:function(){				var obj=this[0],sty;				if (!obj)					return null;				if (window.getComputedStyle){					sty=window.getComputedStyle(obj,null);//cQuery.copy();				}else if (obj.currentStyle){					sty=cQuery.copy(obj.currentStyle);					var t=obj.runtimeStyle;					for (var name in t){						if (t[name])							sty[name]=t[name];					}				}else{					return null;				}				return sty;			},						/**			 * @method css:			 * 获取或者设置元素的css样式。传入一个参数表示获取；传入两个参数表示设置。			 * @param {string|undefined|object} css对应的键值			 * @param {object} 设置css样式的内容			 * @return {object} 如果获取元素，返回元素的样式内容；如果设置参数，返回自身。			 */			css:function(key,value){				var keyType=cQuery.type(key);				switch (arguments.length){					case 0:					case 1:						switch (keyType){							case 'string':								if (key&&key.indexOf(':')==-1){									var sty=this._getCss();									return sty&&key in sty?sty[key]:null;								}else{									for (i=0,n=this.length;i<n;i++){										this[i].style.cssText=key||'';									}								}							case 'undefined':								return this._getCss();							case 'object':								var i,n,t,sty={};								for (t in key){									if (key.hasOwnProperty(t)){										sty[t.replace(usedRe.cssFix,function(a,b){											return b.toUpperCase();										})]=key[t];									}								}								for (i=0,n=this.length;i<n;i++){									cQuery.extend(this[i].style,sty);								}						}						break;					case 2:						if (keyType!='string'){							cQuery.error('css','invalid key');							return this;						}						var i,n;						key=key.replace(usedRe.cssFix,function(a,b){							return b.toUpperCase();						});						for (i=0,n=this.length;i<n;i++){							this[i].style[key]=value;						}						break;				}				return this;			},			click:function(){				for (var i=0,n=this.length;i<n;i++){					var t=this[i];					if ('click' in t&&cQuery.type(t.click)=='function'){						t.click();					}else if ('fireEvent' in t){						t.fireEvent('onclick');					}else if ('createEvent' in document){						var doc=t.ownerDocument;						var e=doc.createEvent('MouseEvents');						e.initMouseEvent('click',true,true,doc.defaultView,1,0,0,0,0,false,false,false,false,0,null);						t.dispatchEvent(e);					}else{						cQuery.error('click','can\'t emulate mouse click event');						continue;					}				}				return this;			},			mask:function(){				var t=this[0];				if (!t){					cQuery.error('mask','the cDom object is empty');					return this;				}				this.unmask();				//init data				var data={};				//show content				data.cssText=t.style.cssText;				data.nextSibling=t.nextSibling;				data.parentNode=t.parentNode;				t.style.position='absolute';				t.style.display='block';				cQuery.container.append(t);				t.style.left=document.documentElement.scrollLeft+document.body.scrollLeft+Math.max(0,(document.documentElement.clientWidth-t.offsetWidth)/2)+'px';				t.style.top=document.documentElement.scrollTop+document.body.scrollTop+Math.max(0,(document.documentElement.clientHeight-t.offsetHeight)/2)+'px';				//show mask				var styleTxt='background:#000;position:absolute;left:0;top:0;width:'+Math.max(document.documentElement.clientWidth,document.body.scrollWidth)+'px;height:'+Math.max(document.documentElement.clientHeight,document.body.scrollHeight)+'px;';				data.maskDiv=document.createElement('div');				data.maskDiv.style.cssText=styleTxt+'filter:progid:DXImageTransform.Microsoft.Alpha(opacity=50);opacity:0.5;';				cQuery(data.maskDiv).insertBefore(t);				if (cQuery.browser.isIE){					data.maskIframe=document.createElement('iframe');					data.maskIframe.style.cssText=styleTxt+'filter:progid:DXImageTransform.Microsoft.Alpha(opacity=0);opacity:0;';					cQuery(data.maskIframe).insertBefore(data.maskDiv);					//cQuery(mask).html('<body style="background:#000;"></body>');				}				//save data				this.data('__mask__',data);				return this;			},			unmask:function(){				var t=this[0];				if (!t){					cQuery.error('unmask','the cDom object is empty');					return this;				}				var data=this.data('__mask__');				if (data){					this[0].style.cssText=data.cssText;					if (data.nextSibling){						this.first().insertBefore(data.nextSibling);					}else{						this.first().appendTo(data.parentNode);					}					cQuery(data.maskDiv).remove();					if (data.maskIframe){						cQuery(data.maskIframe).remove();					}					this.removeData('__mask__');				}			},			cover:function(){				if (!cQuery.browser.isIE6){					return;				}				var t=this[0];				if (!t){					cQuery.error('cover','the cDom object is empty');					return this;				}				this.uncover();				//init data				var data={};				var targetOffset=this.offset();				var parentOffset=this.offsetParent().offset();				//show cover				var cover=document.createElement('iframe');				cover.frameBorder=0;				var zIndex=this.css('zIndex');				cover.style.cssText='background:#FFF;position:absolute;left:'+(targetOffset.left-parentOffset.left)+'px;top:'+(targetOffset.top-parentOffset.top)+'px;width:'+targetOffset.width+'px;height:'+targetOffset.height+'px;filter:progid:DXImageTransform.Microsoft.Alpha(opacity=0);opacity:0;'+(isNaN(zIndex)?'':'z-index:'+(parseInt(zIndex,10)-1));				cQuery(cover).insertBefore(t);				data.cover=cover;				//save data				this.data('__cover__',data);				return this;			},			uncover:function(){				var t=this[0];				if (!t){					cQuery.error('uncover','the cDom object is empty');					return this;				}				var data=this.data('__cover__');				if (data){					cQuery(data.cover).remove();					this.removeData('__cover__');				}			},						/** 			 * @method offset			 读取或设置CSS样式			 * @param {object} 如果为空，则返回此元素的位置(x/y);否则，就是相对于此元素的位置设置			 * @param {object} 设置位置的内容。（12钟点式位置设置）			 * @return {object} 返回位置内容或者元素本身			 */			offset:function(el,opt){				//get offset				if (!el){					var p={top:0,bottom:0,left:0,right:0,width:0,height:0};					if (!this[0])						return p;					var doc=this[0].ownerDocument;					if (!doc)						return p;					var docEl=doc.documentElement;					var t;					if ('getBoundingClientRect' in docEl){						p=this[0].getBoundingClientRect();						p=cQuery.copy(p,true);						t=(this[0]==docEl?0:(docEl.scrollLeft||doc.body.scrollLeft||0))-docEl.clientLeft;						p.left+=t;						p.right+=t;						t=(this[0]==docEl?0:(docEl.scrollTop||doc.body.scrollTop||0))-docEl.clientTop;						p.top+=t;						p.bottom+=t;						p.width=p.right-p.left;						p.height=p.bottom-p.top;						return p;					}else{						t=this[0];						while (t&&(t!=doc||t!=docEl)){							if (t!=this[0]){								p.left-=t.scrollLeft;								p.top-=t.scrollTop;							}							p.left+=p.offsetLeft;							p.top+=p.offsetTop;							t=t.offsetParent();						}						p.left+=docEl.clientLeft;						p.top+=docEl.clientTop;						p.width=p.offsetWidth;						p.height=p.offsetHeight;						p.right=p.left+p.width;						p.bottom=p.left+p.height;						return p;					}				//set offset				}else if (cQuery.isPlainObject(el)){					var obj;					opt=el;					opt.left='left' in opt?(cQuery.type(opt.left)=='number'?opt.left+'px':opt.left):'';					opt.top='top' in opt?(cQuery.type(opt.top)=='number'?opt.top+'px':opt.top):'';					opt.right='right' in opt?(cQuery.type(opt.right)=='number'?opt.right+'px':opt.right):'';					opt.bottom='bottom' in opt?(cQuery.type(opt.bottom)=='number'?opt.bottom+'px':opt.bottom):'';					for (var i=0,n=this.length;i<n;i++){						obj=this.slice(i,i+1);						cQuery.extend(obj[0].style,opt);						if (obj.css('position')=='static')							obj[0].style.position='absolute';					}					return this;				//set el offset				}else{					el=cQuery(el);					if (!el[0])						return this;					if (cQuery.type(opt)=='number')						opt={position:opt};					opt=cQuery.extend({						position:0,						left:0,						top:0,						right:0,						bottom:0					},opt||{});					var obj,sp,op,fp;					var doc=el[0].ownerDocument;					var dsl=doc.documentElement.scrollLeft||doc.body.scrollLeft||0;					var dst=doc.documentElement.scrollTop||doc.body.scrollTop||0;					var isExtA=arguments.callee.caller==el.offsetA;					if (isExtA){						sp=el.offsetA();					}else{						sp=el.offset();					}					for (var i=0,n=this.length;i<n;i++){						obj=this.slice(i,i+1);						if (isExtA){							fp=obj.offsetA();						}else{							fp=obj.offset();						}						switch (opt.position){							case 1:								fp.left=sp.left;								fp.top=sp.top-fp.height;								break;							case 1.5:								fp.left=sp.left+sp.width;								fp.top=sp.top-fp.height;								break;							case 2:								fp.left=sp.left+sp.width;								fp.top=sp.top+sp.height-fp.height;								break;							case 3:								fp.left=sp.left+sp.width;								fp.top=sp.top+sp.height/2-fp.height/2;								break;							case 4:								fp.left=sp.left+sp.width;								fp.top=sp.top;								break;							case 4.5:								fp.left=sp.left+sp.width;								fp.top=sp.top+sp.height;								break;							case 5:								fp.left=sp.left;								fp.top=sp.top+sp.height;								break;							case 6:								fp.left=sp.left+sp.width/2-fp.width/2;								fp.top=sp.top+sp.height;								break;							case 7:								fp.left=sp.left+sp.width-fp.width;								fp.top=sp.top+sp.height;								break;							case 7.5:								fp.left=sp.left-fp.width;								fp.top=sp.top+sp.height;								break;							case 8:								fp.left=sp.left-fp.width;								fp.top=sp.top;								break;							case 9:								fp.left=sp.left-fp.width;								fp.top=sp.top+sp.height/2-fp.height/2;								break;							case 10:								fp.left=sp.left-fp.width;								fp.top=sp.top+sp.height-fp.height;								break;							case 10.5:								fp.left=sp.left-fp.width;								fp.top=sp.top-fp.height;								break;							case 11:								fp.left=sp.left+sp.width-fp.width;								fp.top=sp.top-fp.height;								break;							case 12:								fp.left=sp.left+sp.width/2-fp.width/2;								fp.top=sp.top-fp.height;								break;							default:								var win=doc.defaultView||doc.parentWindow;								if (isExtA){									win=(function(){										try{											while (1){												var tmpWin=win.parent;												if (tmpWin&&tmpWin!=win&&tmpWin.document){													win=tmpWin;												}else{													break;												}											}										}catch (errA){										};										return win;									})();								}								var maxWidth=win.document.documentElement.clientWidth;								var maxHeight=win.document.documentElement.clientHeight;								fp.left=sp.left+fp.width+opt.left-opt.right<maxWidth+dsl||sp.left-dsl<=maxWidth/2?sp.left:sp.left+sp.width-fp.width;								fp.top=sp.top+sp.height+fp.height+opt.top-opt.bottom<maxHeight+dst||sp.top-dst<=maxHeight/2?sp.top+sp.height:sp.top-fp.height;								break;						}						fp.left+=opt.left-opt.right;						fp.top+=opt.top-opt.bottom;						switch (obj.css('position')){							case 'static':								obj[0].style.position='absolute';								break;							case 'relative':								op=obj.offsetParent().offset();								fp.left-=op.left;								fp.top-=op.top;								break;							case 'fixed':								fp.left-=dsl;								fp.top-=dst;								break;						}						obj.offset({left:fp.left,top:fp.top});					}					return this;				}			},						offsetA:function(el,opt){				//get offset				if (!el){					var t=this.first();					if (!t[0]){						return {top:0,bottom:0,left:0,right:0,width:0,height:0};					}					var borderHash={						'thin':2,						'medium':4,						'thick':6					};					var p=t.offset(),fp,fl=0,ft=0;					var doc=t[0].ownerDocument;					var win=doc.defaultView||doc.parentWindow;					while (1){						t=(function(){							try{								var f=win.frameElement;								return f?$(f):false;							}catch(errA){								return false;							}						})();						if (t){							//scroll							fl-=doc.documentElement.scrollLeft||doc.body.scrollLeft;							ft-=doc.documentElement.scrollTop||doc.body.scrollTop;							//border							if (!usedRe.offsetA.test(t.css('borderLeftStyle'))){								var bl=t.css('borderLeftWidth').toLowerCase();								if (bl in borderHash){									bl=borderHash[bl];								}else{									bl=parseInt(bl,10);								}								fl+=bl;							}							if (!usedRe.offsetA.test(t.css('borderTopStyle'))){								var bt=t.css('borderTopWidth').toLowerCase();								if (bt in borderHash){									bt=borderHash[bt];								}else{									bt=parseInt(bt,10);								}								ft+=bt;							}							//iframe offset							fp=t.offset();							fl+=fp.left;							ft+=fp.top;							//doc & win							doc=t[0].ownerDocument;							win=doc.defaultView||doc.parentWindow;						}else{							break;						}					}					p.left+=fl;					p.right+=fl;					p.top+=ft;					p.bottom+=ft;					return p;				//set offset				}else if (cQuery.isPlainObject(el)){					return this.offset(el);				//set el offset				}else{					return this.offset(el,opt);				}			},			/** 			 * @method data			 * @param {string}			 * @param {mixed} 			 * @return {mixed} 			 */			data:function(key,value){				//init data				var t=this[0];				if (!t){					cQuery.error('data','the cDom object is empty');					return this;				}				var uid=cQuery.uid(t);				var data=dataHash[uid];				if (!data){					data=dataHash[uid]={};				}				//get , set value				if (key){					if (!cQuery.type(key)=='string'){						cQuery.error('data','invalid key '+key);						return this;					}					if (value===cQuery.undefined){						return data[key];					}else{						data[key]=value;						return this;					}				}else{					return cQuery.copy(data);				}			},			removeData:function(key){				//init data				var t=this[0];				if (!t){					cQuery.error('removeData','the cDom object is empty');					return this;				}				var uid=cQuery.uid(t);				var data=dataHash[uid];				if (!data){					data=dataHash[uid]={};				}				//remove key				switch (cQuery.type(key)){					case 'string':						delete data[key];						break;					case 'array':						for (var i=0,n=key.length;i<n;i++){							delete data[key[i]];						}						break;					case 'undefined':						data=dataHash[uid]={};						break;					default:						cQuery.error('removeData','invalid key '+key);						break;				}				return this;			},			contains:function(el){				var t=this[0];				if (!t){					cQuery.error('contains','the cDom object is empty');					return false;				}				el=cQuery(el);				if (!el[0]){					return false;				}				for (var i=0,n=el.length;i<n;i++){					if (!Sizzle.contains(t,el[i])){						return false;					}				}				return true;			},						/** 			 * @method regMod			 为元素注册模块			 * @param {string} 模块名称 			 * @param {string} 模块版本号			 * @param {object} 配置属性			 * @return {object} 返回模块实例或者null			 */			regMod:function(name,version,opt,callback){				var t,uid;				t=this[0];				if (!t){					cQuery.error('regMod('+name+','+version+')','the cDom object is empty');					return null;				}				uid=cQuery.uid(t);				return cQuery.mod.instantiate(name,version,uid,t,opt,callback);			},						/** 			 * @method allRegMod			 为一组元素注册模块			 * @param {string} 模块名称 			 * @param {string} 模块版本号			 * @param {object} 配置属性			 * @return {object} 返回模块实例或者null			 */			allRegMod:function(name,version,opt,callback){				var i,n,t,uid,instances=[];				for (i=0,n=this.length;i<n;i++){					t=this[i];					uid=cQuery.uid(t);					instances[i]=cQuery.mod.instantiate(name,version,uid,t,opt,callback);				}				return instances;			},						/** 			 * @method unregMod			 为元素注销模块			 * @param {string} 模块名称 			 * @param {string} 模块版本号			 * @param {object} 配置属性			 * @return {object} 返回本身			 */			unregMod:function(name,version){				var ins=this.getMod(name,version);				if (ins){					ins.uninit();				}else{					cQuery.error('unregMod','Failed to get instance');					return this;				}			},						/** 			 * @method allUnregMod			 为一组元素注销模块			 * @param {string} 模块名称 			 * @param {string} 模块版本号			 * @param {object} 配置属性			 * @return {object} 返回本身			 */			allUnregMod:function(name,version){				var i,n,t,ins;				for (i=0,n=this.length;i<n;i++){					t=this.slice(i,i+1);					ins=t.getMod(name,version);					if (ins){						ins.uninit();					}				}				return instances;			},						/** 			 * @method getMod			获取元素的模块实例			 * @param {string} 模块名称 			 * @param {string} 模块版本号			 * @return {object} 返回模块实例或者null			 */			getMod:function(name,version){				var t=this[0];				if (!t){					cQuery.error('getMod','the cDom object is empty');					return this;				}				if (!name||cQuery.type(name)!='string'){					cQuery.error('getMod','invalid mod name '+name);					return null;				}				if (!version||cQuery.type(version)!='string'){					cQuery.error('getMod','invalid mod version '+version);					return null;				}				var uid=cQuery.uid(t);				var instances=cQuery.mod._getInstanceOpt(name,version);				if (instances){					if (uid in instances){						return instances[uid];					}				}				cQuery.error('getMod','No instance found '+name+' , '+version);				return null;			},						/** 			 * @method hasClass			判断元素是否具有某个class			 * @param {string} class的名称			 * @return {boolean} 返回true或者false			 */			hasClass:function(cns){				var t=this[0];				if (!t){					cQuery.error('hasClass','the cDom object is empty');					return this;				}				var cn=cns.trim().split(usedRe.space);				var ocn=' '+t.className.replace(usedRe.space,' ')+' ';				var i,n;				for (i=0,n=cn.length;i<n;i++){					if (ocn.indexOf(' '+cn[i]+' ')>-1){						return true;					}				}				return false;			},						/** 			 * @method addClass			为元素增加某个class			 * @param {string} class的名称			 * @return {boolean} 返回自身			 */			addClass:function(cns){				var i,j,m,n,t,cn,ocn;				if (!cns){					return this;				}				cn=cns.trim().split(usedRe.space);				for (i=0,m=this.length;i<m;i++){					t=this[i];					ocn=t.className;					if (ocn){						ocn=' '+ocn.replace(usedRe.space,' ')+' ';						for (j=0,n=cn.length;j<n;j++){							if (ocn.indexOf(' '+cn[i]+' ')==-1){								t.className+=' '+cn[j];							}						}					}else{						t.className=cns;					}				}				return this;			},						/** 			 * @method removeClass			为元素移除某个class			 * @param {string} class的名称			 * @return {boolean} 返回自身			 */			removeClass:function(cns){				var i,n,re,t;				if (cns){					re=new RegExp('(^|\\s)('+cns.trim().toReString().replace(usedRe.space,'|')+')(?=\\s|$)','g');				}				for (i=0,n=this.length;i<n;i++){					t=this[i];					t.className=cns?t.className.replace(re,'').trim():'';				}				return this;			},						/** 			 * @method toggleClass 为元素切换class			 * @param {string} class的名称			 * @return {boolean} 返回自身			 */			toggleClass:function(cns){				var i,j,m,n,re,t;				if (!cns){					return;				}				cn=cns.trim().split(usedRe.space);				for (i=0,m=this.length;i<m;i++){					t=this[i];					if (ocn){						ocn=' '+ocn.replace(usedRe.space,' ')+' ';						for (j=0,n=cn.length;j<n;j++){							if (ocn.indexOf(' '+cn[j]+' ')==-1){								ocn+=' '+cn[j];							}else{								ocn=ocn.replace(' '+cn[j]+' ','');							}						}					}else{						t.className=cns;					}				}				return this;			}		};		 /**		 * @class cQuery.cookie		 * 设置cookie		 * @namespace cQuery		 */		cQuery.cookie={			/**			 * @method set			 * 设置cookie			 * @param {string} cookie的名称			 * @param {string} cokie的子键			 * @param {string} 值			 * @param {object} 配置项			 */			set : function(name, subKey, value, options) {				options = options || {};				if (value === null) {					value = '';					options.expires = -1;				}				var expires = '';				if (options.expires && (typeof options.expires == 'number' || options.expires.toUTCString)) {					var date;					if (typeof options.expires == 'number') {						date = new Date();						date.setTime(date.getTime() + (options.expires * 24 * 60 * 60 * 1000));					} else {						date = options.expires;					}					expires = '; expires=' + date.toUTCString(); // use expires attribute, max-age is not supported by IE				}				var path = options.path ? '; path=' + options.path : '';				var domain = options.domain ? '; domain=' + options.domain : '';				var secure = options.secure ? '; secure' : '';				if (subKey){					var orginalValue=cQuery.cookie.get(name,false)||"";					if (orginalValue){						orginalValue=(orginalValue+"&").replace(new RegExp("(^|&)\\s*"+encodeURIComponent(subKey)+"=[^&]+&"),"$1");					}					document.cookie= [encodeURIComponent(name), "=" ,orginalValue, encodeURIComponent(subKey),"=",encodeURIComponent(value),expires, path, domain, secure].join('');				}else{					document.cookie= [encodeURIComponent(name), '=', encodeURIComponent(value), expires, path, domain, secure].join('');				}								// try {				// 	var url = location.href;				// } catch (e) {				// 	var url = document.URL;				// }								// if(/[test|testp|testu]\.sh\.ctriptravel\.com/.test(url)){				// 	$_bf && $_bf.tracklog && $_bf.tracklog("useCookie", url);				// }			},			/**			 * @method get			 * 获取cookie			 * @param {string} cookie的名称			 * @param {string} cokie的子键			 */			get: function(name,subkey){				var arr=document.cookie.match(new RegExp("(?:^|;)\\s*"+encodeURIComponent(name)+"=([^;]+)"));				if (subkey===false)					return arr?arr[1]:null;				if (arr&&subkey)					arr=arr[1].match(new RegExp("(?:^|&)\\s*"+encodeURIComponent(subkey)+"=([^&]+)"));				return arr?decodeURIComponent(arr[1]):null;			},			del: function(name,subKey,options){				options = options || {};				var path = options.path ? '; path=' + options.path : '';				var domain = options.domain ? '; domain=' + options.domain : '';				if (subKey){					var orginalValue=cQuery.cookie.get(name,false);					if (orginalValue===null)						return;					orginalValue=orginalValue.replace(new RegExp("(^|&)\\s*"+encodeURIComponent(subKey)+"=[^&]+"),"").replace(/^\s*&/,"");					if (orginalValue){						document.cookie=encodeURIComponent(name)+"="+orginalValue;						return;					}				}				var expires=new Date();				expires.setTime(expires.getTime()-1);				document.cookie=encodeURIComponent(name)+"="+(domain?"; domain="+domain:"")+"; path="+(path||"/")+"; expires="+expires.toGMTString();			}		};				['firstChild','lastChild','previousSibling','nextSibling','childNodes','parentNode','offsetParent'].each(function(cmd){			cQuery.fn[cmd]=function(){				var arr=[],k=0,obj;				for (var i=0;i<this.length;i++){					obj=this[i][cmd];					if (obj)						arr[k++]=obj;				}				return this.pushStack(arr);			};		});				//domReady的执行事件		function domReady(){			cQuery.isReady=true;			if (document.removeEventListener){				document.removeEventListener('DOMContentLoaded',domReady,false);				window.removeEventListener('load',domReady,false);			}else if (document.detachEvent){				window.detachEvent('onload',domReady);			}			cQuery.event.trigger(document.documentElement,'ready');		}				function pageLoaded(){			cQuery.isLoaded=true;			if (document.removeEventListener){				window.removeEventListener('load',pageLoaded,false);			}else if (document.detachEvent){				window.detachEvent('onload',pageLoaded);			}		}				function doScrollCheck(){			if (cQuery.isReady){				return;			}			try{				document.documentElement.doScroll('left');				domReady();			}catch (errA){				setTimeout(doScrollCheck,1);			}		}						(function(){			if (document.readyState==='complete'||window.$LAB&&$LAB.isReady){				setTimeout(domReady,1);				return;			}			//Mozilla,Opera,Webkit,IE9			if (document.addEventListener){				document.addEventListener('DOMContentLoaded',domReady,false);				window.addEventListener('load',domReady,false);			}			//IE6,IE7,IE8			else if (document.attachEvent){				window.attachEvent('onload',domReady);				var t;				try{					t=window.frameElement==null;				}catch (errA){				}				if (document.documentElement.doScroll&&t){					setTimeout(doScrollCheck,1);				}			}		})();		(function(){			if (window.$LAB&&$LAB.isLoaded){				cQuery.isLoaded=true;			//Mozilla,Opera,Webkit,IE9			}else if (document.addEventListener){				window.addEventListener('load',pageLoaded,false);			//IE6,IE7,IE8			}else if (document.attachEvent){				window.attachEvent('onload',pageLoaded);			}		})();		//生成js container		(function(){			var c=document.createElement('container');			c.style.cssText='position:absolute;top:0;left:0;width:0;height:0;z-index:100;';			var t=document.body;			if (!t){				document.write('<span id="__body__" style="display:none;">cQuery</span>');			}			t=document.body.firstChild;			if (t){				document.body.insertBefore(c,t);			}else{				document.body.appendChild(c);			}			t=document.getElementById('__body__');			if (t){				t.parentNode.removeChild(t);			}			//c.innerHTML='<form id=\"__historyForm__\" name=\"__historyForm__\"><textarea id="__historyTextarea__" name="__historyTextarea__"></textarea></form>';			cQuery.container=cQuery(c);			//var ht=cQuery('#__historyTextarea__');			//cQuery(window).bind('beforeunload',function(){			//	ht.value('historyBack');			//});			//location.hash="#a"+Math.random()*1000;			//cQuery.log('container',ht.value());		})();		//active element		(function(){			if (!('activeElement' in document)){				var html=cQuery('html');				function focusLog(){					activeEl=this;				}				html.bind('mousedown',function(e){					var t=cQuery(e.target);					t.bind('focus',focusLog);					setTimeout(function(){						t.unbind('focus',focusLog);					});				});			}		})();		//navigator type		(function(){			var historyStorage=cQuery.storage.get('__history__',{});			cQuery.isNavigator=true;			cQuery.isBack=false;			cQuery.isRefresh=false;			var storage={};			cQuery.pageStorage={				get:function(key){					return key in storage?storage[key]:cQuery.undefined;				},				set:function(key,value){					storage[key]=value;					return true;				},				remove:function(key){					delete storage[key];				},				keys:function(){					var arr=[],k=0;					for (var key in storage){						arr[k++]=key;					}					return arr;				},				clear:function(){					storage={};					return true;				},				reset:function(){					storage={};					historyStorage={};					return true;				}			};			for (var key in historyStorage){				if (historyStorage[key].time+3600000<+new Date()){					delete historyStorage[key];				}			}			var backHash='';			try{				backHash=location.hash;			}catch(errA){}			if (usedRe.isUrlUniqueHash.test(backHash)){				var t=historyStorage[backHash];				if (t){					if (window.performance&&performance.navigation.type){						switch (performance.navigation.type){							case 1:								cQuery.isNavigator=false;								cQuery.isRefresh=true;								break;							case 2:								cQuery.isNavigator=false;								cQuery.isBack=true;								break;						}					}else{						/*if (t.referrer==document.referrer&&t.url==location.href&&t.length==history.length){							cQuery.isNavigator=false;							cQuery.isRefresh=true;						}else{*/							cQuery.isNavigator=false;							cQuery.isBack=true;						//}					}					if (cQuery.isBack){						storage=t.storage||{};					}				}			}else{				backHash='#'+cQuery.uid();			}			cQuery(window).bind('beforeunload',function(e){				var url='';				try{					url=location.href;				}catch(errA){					url=document.URL;				}				historyStorage[backHash]={					time:+new Date(),					length:history.length,					url:url,					referrer:document.referrer,					storage:storage				};				cQuery.storage.set('__history__',historyStorage);				if (cQuery.browser.isChrome&&history.replaceState){					history.replaceState(null,null,backHash);				}else{					try{						location.replace(backHash);					}catch(errA){}				}			},{priority:99});		})();		/**		 * @cfg config 默认配置		 *<pre>		{			namespace:'$',  //空间名称			allowDebug:false, //是否debug			loadAsync:true, //是否异步加载			jQueryPath:'http://127.0.0.1:81/code/js/_src_/cQuery_110421/jquery-1.6.2.js', //jquery文件的目录			modPath:'http://127.0.0.1:81/code/js/_src_/cQuery_110421/mod/', //模块配置的目录			loadMultiMod:true,  //是否支持多模块同时加载			modBuffer:true,  //是否支持模块缓冲			charset:'gb2312',	// gb2312 , big5 ,utf-8  页面编码			now:'' //现在的时间		}		</pre>		 */		var config={			namespace:'$',			loadAsync:true,			jQueryPath:'http://webresource.c-ctrip.com/code/cquery/jquery/jquery-1.6.2.js',			//modPath:'http://webresource.ui.sh.ctriptravel.com/code/js/_src_/cQuery_110421/mod/',			modPath:'http://webresource.c-ctrip.com/code/cquery/mod/',			loadMultiMod:true,			modBuffer:true,			charset:(document.charset||document.characterSet||'utf-8').toLowerCase(),			now:new Date(),			blankPage:'about:blank',			allowDebug:false		};		//获取或设置配置		cQuery.config=function(arg1,arg2){			var t=cQuery.type(arg1);			switch (t){				case 'string':					if (arguments.length>1)						config[arg1]=arg2;					else						return config[arg1];					break;				case 'object':					cQuery.extend(config,arg1);					break;			}		};		//Chrome下charset的问题		if(cQuery.config('charset')=='gbk'){			cQuery.config('charset','gb2312');		}		//读取配置		(function(){			var s=document.getElementsByTagName('script');			for (var i=0,n=s.length;i<n;i++){				if (usedRe.isSelfScript.test(s[i].src)){					var t=s[i].text.trim();					if (t){						var opt=cQuery.parseJSON(t);						if (opt){							cQuery.config(opt);						}					}					return;				}			}		})();		//初始化命名空间		window[cQuery.config('namespace')]=cQuery;		//ready		cQuery.ready(function(){			//cQuery.log('Event','Domready');			try{				insertCS()				//insertNTS();			}catch (errA){			}		});		function insertCS() {			var s = document.getElementsByTagName('script')[0];			var cs_domain = (document.domain || "").match(/ctrip(travel)?\.com$/);			if (cs_domain && !cs_domain[1]) {				var se = document.createElement("script");				se.type = "text/javascript";				se.async = true;				se.src = "http://www." + cs_domain[0] + "/rp/uiScript.asp";				s.parentNode.insertBefore(se, s);				//document.getElementsByTagName("head")[0].appendChild(se);			}		}	}catch(errX){		if (window.cQuery&&cQuery.error){			cQuery.error(errX);		}else{			var err={				name:fixErrorString(errX.name||''),				msg:fixErrorString(errX.message||errX.description||''),				file:fixErrorString(errX.fileName||errX.sourceURL||''),				line:errX.lineNumber||errX.line||0,				number:errX.number||0,				stack:fixErrorString(errX.stack||'')			};			var log='[cQuery Init Error]';			for (var key in err){				if (err.hasOwnProperty(key)){					var val=err[key].toString().replace(/[\r\n]+/g,'; ');					log+=' ###'+key+'###: '+(val||'null');				}			}			if (log.length>1500){				log=log.slice(0,1500)+'...';			}			var fn=new Function('err','throw err;');			if (/msie (\d+)/i.test(navigator.userAgent)){				fn(new Error(err.number,log));			}else{				fn(new Error(log,err.file,err.line));			}		}	}})();(function () {	var slist=document.getElementsByTagName('script') || [];	var reg=/_bfa\.min\.js/i;	for(var i=0;i<slist.length;i++){		if(reg.test(slist[i].src)){			return;		}	}	if(window.$_bf || window.$LAB || window.CtripJsLoader){		return;	}	var d=new Date();	var v='?v='+d.getFullYear()+d.getMonth()+'_'+d.getDate()+'.js';	var bf = document.createElement('script');	bf.type = 'text/javascript';	bf.charset = 'utf-8';	bf.async = true;	try {		var p = 'https:' == document.location.protocol;	} catch (e) {		var p = 'https:' == document.URL.match(/[^:]+/) + ":";	}	bf.src=(p?"https://s.c-ctrip.com/_bfa.min.js"+v:'http://webresource.c-ctrip.com/code/ubt/_bfa.min.js'+v);	var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(bf, s);	 })();