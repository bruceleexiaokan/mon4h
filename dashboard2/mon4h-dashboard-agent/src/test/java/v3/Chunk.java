/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package v3;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

public class Chunk implements org.apache.thrift.TBase<Chunk, Chunk._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Chunk");

  private static final org.apache.thrift.protocol.TField HOST_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("hostIp", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PROCESS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("processId", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField LOG_EVENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("logEvents", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField SPANS_FIELD_DESC = new org.apache.thrift.protocol.TField("spans", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField METRICS_FIELD_DESC = new org.apache.thrift.protocol.TField("metrics", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField EVENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("events", org.apache.thrift.protocol.TType.LIST, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ChunkStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ChunkTupleSchemeFactory());
  }

  private String hostIp; // required
  private String hostName; // required
  private String appId; // required
  private long processId; // optional
  private List<LogEvent> logEvents; // required
  private List<Span> spans; // required
  private List<MetricEvent> metrics; // required
  private List<Event> events; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HOST_IP((short)1, "hostIp"),
    HOST_NAME((short)2, "hostName"),
    APP_ID((short)4, "appId"),
    PROCESS_ID((short)5, "processId"),
    LOG_EVENTS((short)6, "logEvents"),
    SPANS((short)7, "spans"),
    METRICS((short)8, "metrics"),
    EVENTS((short)9, "events");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HOST_IP
          return HOST_IP;
        case 2: // HOST_NAME
          return HOST_NAME;
        case 4: // APP_ID
          return APP_ID;
        case 5: // PROCESS_ID
          return PROCESS_ID;
        case 6: // LOG_EVENTS
          return LOG_EVENTS;
        case 7: // SPANS
          return SPANS;
        case 8: // METRICS
          return METRICS;
        case 9: // EVENTS
          return EVENTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PROCESSID_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  private _Fields optionals[] = {_Fields.PROCESS_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HOST_IP, new org.apache.thrift.meta_data.FieldMetaData("hostIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("hostName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROCESS_ID, new org.apache.thrift.meta_data.FieldMetaData("processId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOG_EVENTS, new org.apache.thrift.meta_data.FieldMetaData("logEvents", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LogEvent.class))));
    tmpMap.put(_Fields.SPANS, new org.apache.thrift.meta_data.FieldMetaData("spans", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Span.class))));
    tmpMap.put(_Fields.METRICS, new org.apache.thrift.meta_data.FieldMetaData("metrics", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MetricEvent.class))));
    tmpMap.put(_Fields.EVENTS, new org.apache.thrift.meta_data.FieldMetaData("events", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Event.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Chunk.class, metaDataMap);
  }

  public Chunk() {
  }

  public Chunk(
    String hostIp,
    String hostName,
    String appId,
    List<LogEvent> logEvents,
    List<Span> spans,
    List<MetricEvent> metrics,
    List<Event> events)
  {
    this();
    this.hostIp = hostIp;
    this.hostName = hostName;
    this.appId = appId;
    this.logEvents = logEvents;
    this.spans = spans;
    this.metrics = metrics;
    this.events = events;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Chunk(Chunk other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetHostIp()) {
      this.hostIp = other.hostIp;
    }
    if (other.isSetHostName()) {
      this.hostName = other.hostName;
    }
    if (other.isSetAppId()) {
      this.appId = other.appId;
    }
    this.processId = other.processId;
    if (other.isSetLogEvents()) {
      List<LogEvent> __this__logEvents = new ArrayList<LogEvent>();
      for (LogEvent other_element : other.logEvents) {
        __this__logEvents.add(new LogEvent(other_element));
      }
      this.logEvents = __this__logEvents;
    }
    if (other.isSetSpans()) {
      List<Span> __this__spans = new ArrayList<Span>();
      for (Span other_element : other.spans) {
        __this__spans.add(new Span(other_element));
      }
      this.spans = __this__spans;
    }
    if (other.isSetMetrics()) {
      List<MetricEvent> __this__metrics = new ArrayList<MetricEvent>();
      for (MetricEvent other_element : other.metrics) {
        __this__metrics.add(new MetricEvent(other_element));
      }
      this.metrics = __this__metrics;
    }
    if (other.isSetEvents()) {
      List<Event> __this__events = new ArrayList<Event>();
      for (Event other_element : other.events) {
        __this__events.add(new Event(other_element));
      }
      this.events = __this__events;
    }
  }

  public Chunk deepCopy() {
    return new Chunk(this);
  }

  @Override
  public void clear() {
    this.hostIp = null;
    this.hostName = null;
    this.appId = null;
    setProcessIdIsSet(false);
    this.processId = 0;
    this.logEvents = null;
    this.spans = null;
    this.metrics = null;
    this.events = null;
  }

  public String getHostIp() {
    return this.hostIp;
  }

  public void setHostIp(String hostIp) {
    this.hostIp = hostIp;
  }

  public void unsetHostIp() {
    this.hostIp = null;
  }

  /** Returns true if field hostIp is set (has been assigned a value) and false otherwise */
  public boolean isSetHostIp() {
    return this.hostIp != null;
  }

  public void setHostIpIsSet(boolean value) {
    if (!value) {
      this.hostIp = null;
    }
  }

  public String getHostName() {
    return this.hostName;
  }

  public void setHostName(String hostName) {
    this.hostName = hostName;
  }

  public void unsetHostName() {
    this.hostName = null;
  }

  /** Returns true if field hostName is set (has been assigned a value) and false otherwise */
  public boolean isSetHostName() {
    return this.hostName != null;
  }

  public void setHostNameIsSet(boolean value) {
    if (!value) {
      this.hostName = null;
    }
  }

  public String getAppId() {
    return this.appId;
  }

  public void setAppId(String appId) {
    this.appId = appId;
  }

  public void unsetAppId() {
    this.appId = null;
  }

  /** Returns true if field appId is set (has been assigned a value) and false otherwise */
  public boolean isSetAppId() {
    return this.appId != null;
  }

  public void setAppIdIsSet(boolean value) {
    if (!value) {
      this.appId = null;
    }
  }

  public long getProcessId() {
    return this.processId;
  }

  public void setProcessId(long processId) {
    this.processId = processId;
    setProcessIdIsSet(true);
  }

  public void unsetProcessId() {
    __isset_bit_vector.clear(__PROCESSID_ISSET_ID);
  }

  /** Returns true if field processId is set (has been assigned a value) and false otherwise */
  public boolean isSetProcessId() {
    return __isset_bit_vector.get(__PROCESSID_ISSET_ID);
  }

  public void setProcessIdIsSet(boolean value) {
    __isset_bit_vector.set(__PROCESSID_ISSET_ID, value);
  }

  public int getLogEventsSize() {
    return (this.logEvents == null) ? 0 : this.logEvents.size();
  }

  public java.util.Iterator<LogEvent> getLogEventsIterator() {
    return (this.logEvents == null) ? null : this.logEvents.iterator();
  }

  public void addToLogEvents(LogEvent elem) {
    if (this.logEvents == null) {
      this.logEvents = new ArrayList<LogEvent>();
    }
    this.logEvents.add(elem);
  }

  public List<LogEvent> getLogEvents() {
    return this.logEvents;
  }

  public void setLogEvents(List<LogEvent> logEvents) {
    this.logEvents = logEvents;
  }

  public void unsetLogEvents() {
    this.logEvents = null;
  }

  /** Returns true if field logEvents is set (has been assigned a value) and false otherwise */
  public boolean isSetLogEvents() {
    return this.logEvents != null;
  }

  public void setLogEventsIsSet(boolean value) {
    if (!value) {
      this.logEvents = null;
    }
  }

  public int getSpansSize() {
    return (this.spans == null) ? 0 : this.spans.size();
  }

  public java.util.Iterator<Span> getSpansIterator() {
    return (this.spans == null) ? null : this.spans.iterator();
  }

  public void addToSpans(Span elem) {
    if (this.spans == null) {
      this.spans = new ArrayList<Span>();
    }
    this.spans.add(elem);
  }

  public List<Span> getSpans() {
    return this.spans;
  }

  public void setSpans(List<Span> spans) {
    this.spans = spans;
  }

  public void unsetSpans() {
    this.spans = null;
  }

  /** Returns true if field spans is set (has been assigned a value) and false otherwise */
  public boolean isSetSpans() {
    return this.spans != null;
  }

  public void setSpansIsSet(boolean value) {
    if (!value) {
      this.spans = null;
    }
  }

  public int getMetricsSize() {
    return (this.metrics == null) ? 0 : this.metrics.size();
  }

  public java.util.Iterator<MetricEvent> getMetricsIterator() {
    return (this.metrics == null) ? null : this.metrics.iterator();
  }

  public void addToMetrics(MetricEvent elem) {
    if (this.metrics == null) {
      this.metrics = new ArrayList<MetricEvent>();
    }
    this.metrics.add(elem);
  }

  public List<MetricEvent> getMetrics() {
    return this.metrics;
  }

  public void setMetrics(List<MetricEvent> metrics) {
    this.metrics = metrics;
  }

  public void unsetMetrics() {
    this.metrics = null;
  }

  /** Returns true if field metrics is set (has been assigned a value) and false otherwise */
  public boolean isSetMetrics() {
    return this.metrics != null;
  }

  public void setMetricsIsSet(boolean value) {
    if (!value) {
      this.metrics = null;
    }
  }

  public int getEventsSize() {
    return (this.events == null) ? 0 : this.events.size();
  }

  public java.util.Iterator<Event> getEventsIterator() {
    return (this.events == null) ? null : this.events.iterator();
  }

  public void addToEvents(Event elem) {
    if (this.events == null) {
      this.events = new ArrayList<Event>();
    }
    this.events.add(elem);
  }

  public List<Event> getEvents() {
    return this.events;
  }

  public void setEvents(List<Event> events) {
    this.events = events;
  }

  public void unsetEvents() {
    this.events = null;
  }

  /** Returns true if field events is set (has been assigned a value) and false otherwise */
  public boolean isSetEvents() {
    return this.events != null;
  }

  public void setEventsIsSet(boolean value) {
    if (!value) {
      this.events = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HOST_IP:
      if (value == null) {
        unsetHostIp();
      } else {
        setHostIp((String)value);
      }
      break;

    case HOST_NAME:
      if (value == null) {
        unsetHostName();
      } else {
        setHostName((String)value);
      }
      break;

    case APP_ID:
      if (value == null) {
        unsetAppId();
      } else {
        setAppId((String)value);
      }
      break;

    case PROCESS_ID:
      if (value == null) {
        unsetProcessId();
      } else {
        setProcessId((Long)value);
      }
      break;

    case LOG_EVENTS:
      if (value == null) {
        unsetLogEvents();
      } else {
        setLogEvents((List<LogEvent>)value);
      }
      break;

    case SPANS:
      if (value == null) {
        unsetSpans();
      } else {
        setSpans((List<Span>)value);
      }
      break;

    case METRICS:
      if (value == null) {
        unsetMetrics();
      } else {
        setMetrics((List<MetricEvent>)value);
      }
      break;

    case EVENTS:
      if (value == null) {
        unsetEvents();
      } else {
        setEvents((List<Event>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HOST_IP:
      return getHostIp();

    case HOST_NAME:
      return getHostName();

    case APP_ID:
      return getAppId();

    case PROCESS_ID:
      return Long.valueOf(getProcessId());

    case LOG_EVENTS:
      return getLogEvents();

    case SPANS:
      return getSpans();

    case METRICS:
      return getMetrics();

    case EVENTS:
      return getEvents();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HOST_IP:
      return isSetHostIp();
    case HOST_NAME:
      return isSetHostName();
    case APP_ID:
      return isSetAppId();
    case PROCESS_ID:
      return isSetProcessId();
    case LOG_EVENTS:
      return isSetLogEvents();
    case SPANS:
      return isSetSpans();
    case METRICS:
      return isSetMetrics();
    case EVENTS:
      return isSetEvents();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Chunk)
      return this.equals((Chunk)that);
    return false;
  }

  public boolean equals(Chunk that) {
    if (that == null)
      return false;

    boolean this_present_hostIp = true && this.isSetHostIp();
    boolean that_present_hostIp = true && that.isSetHostIp();
    if (this_present_hostIp || that_present_hostIp) {
      if (!(this_present_hostIp && that_present_hostIp))
        return false;
      if (!this.hostIp.equals(that.hostIp))
        return false;
    }

    boolean this_present_hostName = true && this.isSetHostName();
    boolean that_present_hostName = true && that.isSetHostName();
    if (this_present_hostName || that_present_hostName) {
      if (!(this_present_hostName && that_present_hostName))
        return false;
      if (!this.hostName.equals(that.hostName))
        return false;
    }

    boolean this_present_appId = true && this.isSetAppId();
    boolean that_present_appId = true && that.isSetAppId();
    if (this_present_appId || that_present_appId) {
      if (!(this_present_appId && that_present_appId))
        return false;
      if (!this.appId.equals(that.appId))
        return false;
    }

    boolean this_present_processId = true && this.isSetProcessId();
    boolean that_present_processId = true && that.isSetProcessId();
    if (this_present_processId || that_present_processId) {
      if (!(this_present_processId && that_present_processId))
        return false;
      if (this.processId != that.processId)
        return false;
    }

    boolean this_present_logEvents = true && this.isSetLogEvents();
    boolean that_present_logEvents = true && that.isSetLogEvents();
    if (this_present_logEvents || that_present_logEvents) {
      if (!(this_present_logEvents && that_present_logEvents))
        return false;
      if (!this.logEvents.equals(that.logEvents))
        return false;
    }

    boolean this_present_spans = true && this.isSetSpans();
    boolean that_present_spans = true && that.isSetSpans();
    if (this_present_spans || that_present_spans) {
      if (!(this_present_spans && that_present_spans))
        return false;
      if (!this.spans.equals(that.spans))
        return false;
    }

    boolean this_present_metrics = true && this.isSetMetrics();
    boolean that_present_metrics = true && that.isSetMetrics();
    if (this_present_metrics || that_present_metrics) {
      if (!(this_present_metrics && that_present_metrics))
        return false;
      if (!this.metrics.equals(that.metrics))
        return false;
    }

    boolean this_present_events = true && this.isSetEvents();
    boolean that_present_events = true && that.isSetEvents();
    if (this_present_events || that_present_events) {
      if (!(this_present_events && that_present_events))
        return false;
      if (!this.events.equals(that.events))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_hostIp = true && (isSetHostIp());
    builder.append(present_hostIp);
    if (present_hostIp)
      builder.append(hostIp);

    boolean present_hostName = true && (isSetHostName());
    builder.append(present_hostName);
    if (present_hostName)
      builder.append(hostName);

    boolean present_appId = true && (isSetAppId());
    builder.append(present_appId);
    if (present_appId)
      builder.append(appId);

    boolean present_processId = true && (isSetProcessId());
    builder.append(present_processId);
    if (present_processId)
      builder.append(processId);

    boolean present_logEvents = true && (isSetLogEvents());
    builder.append(present_logEvents);
    if (present_logEvents)
      builder.append(logEvents);

    boolean present_spans = true && (isSetSpans());
    builder.append(present_spans);
    if (present_spans)
      builder.append(spans);

    boolean present_metrics = true && (isSetMetrics());
    builder.append(present_metrics);
    if (present_metrics)
      builder.append(metrics);

    boolean present_events = true && (isSetEvents());
    builder.append(present_events);
    if (present_events)
      builder.append(events);

    return builder.toHashCode();
  }

  public int compareTo(Chunk other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Chunk typedOther = (Chunk)other;

    lastComparison = Boolean.valueOf(isSetHostIp()).compareTo(typedOther.isSetHostIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostIp, typedOther.hostIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHostName()).compareTo(typedOther.isSetHostName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, typedOther.hostName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppId()).compareTo(typedOther.isSetAppId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, typedOther.appId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProcessId()).compareTo(typedOther.isSetProcessId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcessId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processId, typedOther.processId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogEvents()).compareTo(typedOther.isSetLogEvents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogEvents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logEvents, typedOther.logEvents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpans()).compareTo(typedOther.isSetSpans());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpans()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spans, typedOther.spans);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetrics()).compareTo(typedOther.isSetMetrics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetrics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metrics, typedOther.metrics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEvents()).compareTo(typedOther.isSetEvents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.events, typedOther.events);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Chunk(");
    boolean first = true;

    sb.append("hostIp:");
    if (this.hostIp == null) {
      sb.append("null");
    } else {
      sb.append(this.hostIp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hostName:");
    if (this.hostName == null) {
      sb.append("null");
    } else {
      sb.append(this.hostName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appId:");
    if (this.appId == null) {
      sb.append("null");
    } else {
      sb.append(this.appId);
    }
    first = false;
    if (isSetProcessId()) {
      if (!first) sb.append(", ");
      sb.append("processId:");
      sb.append(this.processId);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("logEvents:");
    if (this.logEvents == null) {
      sb.append("null");
    } else {
      sb.append(this.logEvents);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("spans:");
    if (this.spans == null) {
      sb.append("null");
    } else {
      sb.append(this.spans);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metrics:");
    if (this.metrics == null) {
      sb.append("null");
    } else {
      sb.append(this.metrics);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("events:");
    if (this.events == null) {
      sb.append("null");
    } else {
      sb.append(this.events);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ChunkStandardSchemeFactory implements SchemeFactory {
    public ChunkStandardScheme getScheme() {
      return new ChunkStandardScheme();
    }
  }

  private static class ChunkStandardScheme extends StandardScheme<Chunk> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Chunk struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HOST_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hostIp = iprot.readString();
              struct.setHostIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HOST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hostName = iprot.readString();
              struct.setHostNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // APP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appId = iprot.readString();
              struct.setAppIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PROCESS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.processId = iprot.readI64();
              struct.setProcessIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LOG_EVENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list52 = iprot.readListBegin();
                struct.logEvents = new ArrayList<LogEvent>(_list52.size);
                for (int _i53 = 0; _i53 < _list52.size; ++_i53)
                {
                  LogEvent _elem54; // required
                  _elem54 = new LogEvent();
                  _elem54.read(iprot);
                  struct.logEvents.add(_elem54);
                }
                iprot.readListEnd();
              }
              struct.setLogEventsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SPANS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list55 = iprot.readListBegin();
                struct.spans = new ArrayList<Span>(_list55.size);
                for (int _i56 = 0; _i56 < _list55.size; ++_i56)
                {
                  Span _elem57; // required
                  _elem57 = new Span();
                  _elem57.read(iprot);
                  struct.spans.add(_elem57);
                }
                iprot.readListEnd();
              }
              struct.setSpansIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // METRICS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list58 = iprot.readListBegin();
                struct.metrics = new ArrayList<MetricEvent>(_list58.size);
                for (int _i59 = 0; _i59 < _list58.size; ++_i59)
                {
                  MetricEvent _elem60; // required
                  _elem60 = new MetricEvent();
                  _elem60.read(iprot);
                  struct.metrics.add(_elem60);
                }
                iprot.readListEnd();
              }
              struct.setMetricsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EVENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list61 = iprot.readListBegin();
                struct.events = new ArrayList<Event>(_list61.size);
                for (int _i62 = 0; _i62 < _list61.size; ++_i62)
                {
                  Event _elem63; // required
                  _elem63 = new Event();
                  _elem63.read(iprot);
                  struct.events.add(_elem63);
                }
                iprot.readListEnd();
              }
              struct.setEventsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Chunk struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.hostIp != null) {
        oprot.writeFieldBegin(HOST_IP_FIELD_DESC);
        oprot.writeString(struct.hostIp);
        oprot.writeFieldEnd();
      }
      if (struct.hostName != null) {
        oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
        oprot.writeString(struct.hostName);
        oprot.writeFieldEnd();
      }
      if (struct.appId != null) {
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeString(struct.appId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetProcessId()) {
        oprot.writeFieldBegin(PROCESS_ID_FIELD_DESC);
        oprot.writeI64(struct.processId);
        oprot.writeFieldEnd();
      }
      if (struct.logEvents != null) {
        oprot.writeFieldBegin(LOG_EVENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.logEvents.size()));
          for (LogEvent _iter64 : struct.logEvents)
          {
            _iter64.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.spans != null) {
        oprot.writeFieldBegin(SPANS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.spans.size()));
          for (Span _iter65 : struct.spans)
          {
            _iter65.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.metrics != null) {
        oprot.writeFieldBegin(METRICS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.metrics.size()));
          for (MetricEvent _iter66 : struct.metrics)
          {
            _iter66.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.events != null) {
        oprot.writeFieldBegin(EVENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.events.size()));
          for (Event _iter67 : struct.events)
          {
            _iter67.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ChunkTupleSchemeFactory implements SchemeFactory {
    public ChunkTupleScheme getScheme() {
      return new ChunkTupleScheme();
    }
  }

  private static class ChunkTupleScheme extends TupleScheme<Chunk> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Chunk struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetHostIp()) {
        optionals.set(0);
      }
      if (struct.isSetHostName()) {
        optionals.set(1);
      }
      if (struct.isSetAppId()) {
        optionals.set(2);
      }
      if (struct.isSetProcessId()) {
        optionals.set(3);
      }
      if (struct.isSetLogEvents()) {
        optionals.set(4);
      }
      if (struct.isSetSpans()) {
        optionals.set(5);
      }
      if (struct.isSetMetrics()) {
        optionals.set(6);
      }
      if (struct.isSetEvents()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetHostIp()) {
        oprot.writeString(struct.hostIp);
      }
      if (struct.isSetHostName()) {
        oprot.writeString(struct.hostName);
      }
      if (struct.isSetAppId()) {
        oprot.writeString(struct.appId);
      }
      if (struct.isSetProcessId()) {
        oprot.writeI64(struct.processId);
      }
      if (struct.isSetLogEvents()) {
        {
          oprot.writeI32(struct.logEvents.size());
          for (LogEvent _iter68 : struct.logEvents)
          {
            _iter68.write(oprot);
          }
        }
      }
      if (struct.isSetSpans()) {
        {
          oprot.writeI32(struct.spans.size());
          for (Span _iter69 : struct.spans)
          {
            _iter69.write(oprot);
          }
        }
      }
      if (struct.isSetMetrics()) {
        {
          oprot.writeI32(struct.metrics.size());
          for (MetricEvent _iter70 : struct.metrics)
          {
            _iter70.write(oprot);
          }
        }
      }
      if (struct.isSetEvents()) {
        {
          oprot.writeI32(struct.events.size());
          for (Event _iter71 : struct.events)
          {
            _iter71.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Chunk struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.hostIp = iprot.readString();
        struct.setHostIpIsSet(true);
      }
      if (incoming.get(1)) {
        struct.hostName = iprot.readString();
        struct.setHostNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.appId = iprot.readString();
        struct.setAppIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.processId = iprot.readI64();
        struct.setProcessIdIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list72 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.logEvents = new ArrayList<LogEvent>(_list72.size);
          for (int _i73 = 0; _i73 < _list72.size; ++_i73)
          {
            LogEvent _elem74; // required
            _elem74 = new LogEvent();
            _elem74.read(iprot);
            struct.logEvents.add(_elem74);
          }
        }
        struct.setLogEventsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list75 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.spans = new ArrayList<Span>(_list75.size);
          for (int _i76 = 0; _i76 < _list75.size; ++_i76)
          {
            Span _elem77; // required
            _elem77 = new Span();
            _elem77.read(iprot);
            struct.spans.add(_elem77);
          }
        }
        struct.setSpansIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list78 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.metrics = new ArrayList<MetricEvent>(_list78.size);
          for (int _i79 = 0; _i79 < _list78.size; ++_i79)
          {
            MetricEvent _elem80; // required
            _elem80 = new MetricEvent();
            _elem80.read(iprot);
            struct.metrics.add(_elem80);
          }
        }
        struct.setMetricsIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list81 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.events = new ArrayList<Event>(_list81.size);
          for (int _i82 = 0; _i82 < _list81.size; ++_i82)
          {
            Event _elem83; // required
            _elem83 = new Event();
            _elem83.read(iprot);
            struct.events.add(_elem83);
          }
        }
        struct.setEventsIsSet(true);
      }
    }
  }

}

