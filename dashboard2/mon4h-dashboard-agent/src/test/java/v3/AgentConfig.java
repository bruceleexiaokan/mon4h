/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package v3;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

public class AgentConfig implements org.apache.thrift.TBase<AgentConfig, AgentConfig._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AgentConfig");

  private static final org.apache.thrift.protocol.TField APP_LOG_ENABLED_FIELD_DESC = new org.apache.thrift.protocol.TField("appLogEnabled", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField APP_LOG_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("appLogLevel", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TRACE_ENABLED_FIELD_DESC = new org.apache.thrift.protocol.TField("traceEnabled", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField TRACE_LOG_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("traceLogLevel", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField FLUSH_PERIOD_FIELD_DESC = new org.apache.thrift.protocol.TField("flushPeriod", org.apache.thrift.protocol.TType.I16, (short)5);
  private static final org.apache.thrift.protocol.TField METRIC_LOG_ENABLED_FIELD_DESC = new org.apache.thrift.protocol.TField("metricLogEnabled", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField URL_LOG_SAMPLE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("urlLogSampleRate", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField MAX_MESSAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("maxMessageSize", org.apache.thrift.protocol.TType.I16, (short)8);
  private static final org.apache.thrift.protocol.TField EVENT_ENABLED_FIELD_DESC = new org.apache.thrift.protocol.TField("eventEnabled", org.apache.thrift.protocol.TType.BOOL, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AgentConfigStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AgentConfigTupleSchemeFactory());
  }

  private boolean appLogEnabled; // required
  private LogLevel appLogLevel; // required
  private boolean traceEnabled; // required
  private LogLevel traceLogLevel; // required
  private short flushPeriod; // required
  private boolean metricLogEnabled; // required
  private double urlLogSampleRate; // required
  private short maxMessageSize; // required
  private boolean eventEnabled; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    APP_LOG_ENABLED((short)1, "appLogEnabled"),
    /**
     * 
     * @see LogLevel
     */
    APP_LOG_LEVEL((short)2, "appLogLevel"),
    TRACE_ENABLED((short)3, "traceEnabled"),
    /**
     * 
     * @see LogLevel
     */
    TRACE_LOG_LEVEL((short)4, "traceLogLevel"),
    FLUSH_PERIOD((short)5, "flushPeriod"),
    METRIC_LOG_ENABLED((short)6, "metricLogEnabled"),
    URL_LOG_SAMPLE_RATE((short)7, "urlLogSampleRate"),
    MAX_MESSAGE_SIZE((short)8, "maxMessageSize"),
    EVENT_ENABLED((short)9, "eventEnabled");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APP_LOG_ENABLED
          return APP_LOG_ENABLED;
        case 2: // APP_LOG_LEVEL
          return APP_LOG_LEVEL;
        case 3: // TRACE_ENABLED
          return TRACE_ENABLED;
        case 4: // TRACE_LOG_LEVEL
          return TRACE_LOG_LEVEL;
        case 5: // FLUSH_PERIOD
          return FLUSH_PERIOD;
        case 6: // METRIC_LOG_ENABLED
          return METRIC_LOG_ENABLED;
        case 7: // URL_LOG_SAMPLE_RATE
          return URL_LOG_SAMPLE_RATE;
        case 8: // MAX_MESSAGE_SIZE
          return MAX_MESSAGE_SIZE;
        case 9: // EVENT_ENABLED
          return EVENT_ENABLED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __APPLOGENABLED_ISSET_ID = 0;
  private static final int __TRACEENABLED_ISSET_ID = 1;
  private static final int __FLUSHPERIOD_ISSET_ID = 2;
  private static final int __METRICLOGENABLED_ISSET_ID = 3;
  private static final int __URLLOGSAMPLERATE_ISSET_ID = 4;
  private static final int __MAXMESSAGESIZE_ISSET_ID = 5;
  private static final int __EVENTENABLED_ISSET_ID = 6;
  private BitSet __isset_bit_vector = new BitSet(7);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APP_LOG_ENABLED, new org.apache.thrift.meta_data.FieldMetaData("appLogEnabled", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.APP_LOG_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("appLogLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, LogLevel.class)));
    tmpMap.put(_Fields.TRACE_ENABLED, new org.apache.thrift.meta_data.FieldMetaData("traceEnabled", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TRACE_LOG_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("traceLogLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, LogLevel.class)));
    tmpMap.put(_Fields.FLUSH_PERIOD, new org.apache.thrift.meta_data.FieldMetaData("flushPeriod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.METRIC_LOG_ENABLED, new org.apache.thrift.meta_data.FieldMetaData("metricLogEnabled", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.URL_LOG_SAMPLE_RATE, new org.apache.thrift.meta_data.FieldMetaData("urlLogSampleRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MAX_MESSAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("maxMessageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.EVENT_ENABLED, new org.apache.thrift.meta_data.FieldMetaData("eventEnabled", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AgentConfig.class, metaDataMap);
  }

  public AgentConfig() {
  }

  public AgentConfig(
    boolean appLogEnabled,
    LogLevel appLogLevel,
    boolean traceEnabled,
    LogLevel traceLogLevel,
    short flushPeriod,
    boolean metricLogEnabled,
    double urlLogSampleRate,
    short maxMessageSize,
    boolean eventEnabled)
  {
    this();
    this.appLogEnabled = appLogEnabled;
    setAppLogEnabledIsSet(true);
    this.appLogLevel = appLogLevel;
    this.traceEnabled = traceEnabled;
    setTraceEnabledIsSet(true);
    this.traceLogLevel = traceLogLevel;
    this.flushPeriod = flushPeriod;
    setFlushPeriodIsSet(true);
    this.metricLogEnabled = metricLogEnabled;
    setMetricLogEnabledIsSet(true);
    this.urlLogSampleRate = urlLogSampleRate;
    setUrlLogSampleRateIsSet(true);
    this.maxMessageSize = maxMessageSize;
    setMaxMessageSizeIsSet(true);
    this.eventEnabled = eventEnabled;
    setEventEnabledIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AgentConfig(AgentConfig other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.appLogEnabled = other.appLogEnabled;
    if (other.isSetAppLogLevel()) {
      this.appLogLevel = other.appLogLevel;
    }
    this.traceEnabled = other.traceEnabled;
    if (other.isSetTraceLogLevel()) {
      this.traceLogLevel = other.traceLogLevel;
    }
    this.flushPeriod = other.flushPeriod;
    this.metricLogEnabled = other.metricLogEnabled;
    this.urlLogSampleRate = other.urlLogSampleRate;
    this.maxMessageSize = other.maxMessageSize;
    this.eventEnabled = other.eventEnabled;
  }

  public AgentConfig deepCopy() {
    return new AgentConfig(this);
  }

  @Override
  public void clear() {
    setAppLogEnabledIsSet(false);
    this.appLogEnabled = false;
    this.appLogLevel = null;
    setTraceEnabledIsSet(false);
    this.traceEnabled = false;
    this.traceLogLevel = null;
    setFlushPeriodIsSet(false);
    this.flushPeriod = 0;
    setMetricLogEnabledIsSet(false);
    this.metricLogEnabled = false;
    setUrlLogSampleRateIsSet(false);
    this.urlLogSampleRate = 0.0;
    setMaxMessageSizeIsSet(false);
    this.maxMessageSize = 0;
    setEventEnabledIsSet(false);
    this.eventEnabled = false;
  }

  public boolean isAppLogEnabled() {
    return this.appLogEnabled;
  }

  public void setAppLogEnabled(boolean appLogEnabled) {
    this.appLogEnabled = appLogEnabled;
    setAppLogEnabledIsSet(true);
  }

  public void unsetAppLogEnabled() {
    __isset_bit_vector.clear(__APPLOGENABLED_ISSET_ID);
  }

  /** Returns true if field appLogEnabled is set (has been assigned a value) and false otherwise */
  public boolean isSetAppLogEnabled() {
    return __isset_bit_vector.get(__APPLOGENABLED_ISSET_ID);
  }

  public void setAppLogEnabledIsSet(boolean value) {
    __isset_bit_vector.set(__APPLOGENABLED_ISSET_ID, value);
  }

  /**
   * 
   * @see LogLevel
   */
  public LogLevel getAppLogLevel() {
    return this.appLogLevel;
  }

  /**
   * 
   * @see LogLevel
   */
  public void setAppLogLevel(LogLevel appLogLevel) {
    this.appLogLevel = appLogLevel;
  }

  public void unsetAppLogLevel() {
    this.appLogLevel = null;
  }

  /** Returns true if field appLogLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetAppLogLevel() {
    return this.appLogLevel != null;
  }

  public void setAppLogLevelIsSet(boolean value) {
    if (!value) {
      this.appLogLevel = null;
    }
  }

  public boolean isTraceEnabled() {
    return this.traceEnabled;
  }

  public void setTraceEnabled(boolean traceEnabled) {
    this.traceEnabled = traceEnabled;
    setTraceEnabledIsSet(true);
  }

  public void unsetTraceEnabled() {
    __isset_bit_vector.clear(__TRACEENABLED_ISSET_ID);
  }

  /** Returns true if field traceEnabled is set (has been assigned a value) and false otherwise */
  public boolean isSetTraceEnabled() {
    return __isset_bit_vector.get(__TRACEENABLED_ISSET_ID);
  }

  public void setTraceEnabledIsSet(boolean value) {
    __isset_bit_vector.set(__TRACEENABLED_ISSET_ID, value);
  }

  /**
   * 
   * @see LogLevel
   */
  public LogLevel getTraceLogLevel() {
    return this.traceLogLevel;
  }

  /**
   * 
   * @see LogLevel
   */
  public void setTraceLogLevel(LogLevel traceLogLevel) {
    this.traceLogLevel = traceLogLevel;
  }

  public void unsetTraceLogLevel() {
    this.traceLogLevel = null;
  }

  /** Returns true if field traceLogLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetTraceLogLevel() {
    return this.traceLogLevel != null;
  }

  public void setTraceLogLevelIsSet(boolean value) {
    if (!value) {
      this.traceLogLevel = null;
    }
  }

  public short getFlushPeriod() {
    return this.flushPeriod;
  }

  public void setFlushPeriod(short flushPeriod) {
    this.flushPeriod = flushPeriod;
    setFlushPeriodIsSet(true);
  }

  public void unsetFlushPeriod() {
    __isset_bit_vector.clear(__FLUSHPERIOD_ISSET_ID);
  }

  /** Returns true if field flushPeriod is set (has been assigned a value) and false otherwise */
  public boolean isSetFlushPeriod() {
    return __isset_bit_vector.get(__FLUSHPERIOD_ISSET_ID);
  }

  public void setFlushPeriodIsSet(boolean value) {
    __isset_bit_vector.set(__FLUSHPERIOD_ISSET_ID, value);
  }

  public boolean isMetricLogEnabled() {
    return this.metricLogEnabled;
  }

  public void setMetricLogEnabled(boolean metricLogEnabled) {
    this.metricLogEnabled = metricLogEnabled;
    setMetricLogEnabledIsSet(true);
  }

  public void unsetMetricLogEnabled() {
    __isset_bit_vector.clear(__METRICLOGENABLED_ISSET_ID);
  }

  /** Returns true if field metricLogEnabled is set (has been assigned a value) and false otherwise */
  public boolean isSetMetricLogEnabled() {
    return __isset_bit_vector.get(__METRICLOGENABLED_ISSET_ID);
  }

  public void setMetricLogEnabledIsSet(boolean value) {
    __isset_bit_vector.set(__METRICLOGENABLED_ISSET_ID, value);
  }

  public double getUrlLogSampleRate() {
    return this.urlLogSampleRate;
  }

  public void setUrlLogSampleRate(double urlLogSampleRate) {
    this.urlLogSampleRate = urlLogSampleRate;
    setUrlLogSampleRateIsSet(true);
  }

  public void unsetUrlLogSampleRate() {
    __isset_bit_vector.clear(__URLLOGSAMPLERATE_ISSET_ID);
  }

  /** Returns true if field urlLogSampleRate is set (has been assigned a value) and false otherwise */
  public boolean isSetUrlLogSampleRate() {
    return __isset_bit_vector.get(__URLLOGSAMPLERATE_ISSET_ID);
  }

  public void setUrlLogSampleRateIsSet(boolean value) {
    __isset_bit_vector.set(__URLLOGSAMPLERATE_ISSET_ID, value);
  }

  public short getMaxMessageSize() {
    return this.maxMessageSize;
  }

  public void setMaxMessageSize(short maxMessageSize) {
    this.maxMessageSize = maxMessageSize;
    setMaxMessageSizeIsSet(true);
  }

  public void unsetMaxMessageSize() {
    __isset_bit_vector.clear(__MAXMESSAGESIZE_ISSET_ID);
  }

  /** Returns true if field maxMessageSize is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxMessageSize() {
    return __isset_bit_vector.get(__MAXMESSAGESIZE_ISSET_ID);
  }

  public void setMaxMessageSizeIsSet(boolean value) {
    __isset_bit_vector.set(__MAXMESSAGESIZE_ISSET_ID, value);
  }

  public boolean isEventEnabled() {
    return this.eventEnabled;
  }

  public void setEventEnabled(boolean eventEnabled) {
    this.eventEnabled = eventEnabled;
    setEventEnabledIsSet(true);
  }

  public void unsetEventEnabled() {
    __isset_bit_vector.clear(__EVENTENABLED_ISSET_ID);
  }

  /** Returns true if field eventEnabled is set (has been assigned a value) and false otherwise */
  public boolean isSetEventEnabled() {
    return __isset_bit_vector.get(__EVENTENABLED_ISSET_ID);
  }

  public void setEventEnabledIsSet(boolean value) {
    __isset_bit_vector.set(__EVENTENABLED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case APP_LOG_ENABLED:
      if (value == null) {
        unsetAppLogEnabled();
      } else {
        setAppLogEnabled((Boolean)value);
      }
      break;

    case APP_LOG_LEVEL:
      if (value == null) {
        unsetAppLogLevel();
      } else {
        setAppLogLevel((LogLevel)value);
      }
      break;

    case TRACE_ENABLED:
      if (value == null) {
        unsetTraceEnabled();
      } else {
        setTraceEnabled((Boolean)value);
      }
      break;

    case TRACE_LOG_LEVEL:
      if (value == null) {
        unsetTraceLogLevel();
      } else {
        setTraceLogLevel((LogLevel)value);
      }
      break;

    case FLUSH_PERIOD:
      if (value == null) {
        unsetFlushPeriod();
      } else {
        setFlushPeriod((Short)value);
      }
      break;

    case METRIC_LOG_ENABLED:
      if (value == null) {
        unsetMetricLogEnabled();
      } else {
        setMetricLogEnabled((Boolean)value);
      }
      break;

    case URL_LOG_SAMPLE_RATE:
      if (value == null) {
        unsetUrlLogSampleRate();
      } else {
        setUrlLogSampleRate((Double)value);
      }
      break;

    case MAX_MESSAGE_SIZE:
      if (value == null) {
        unsetMaxMessageSize();
      } else {
        setMaxMessageSize((Short)value);
      }
      break;

    case EVENT_ENABLED:
      if (value == null) {
        unsetEventEnabled();
      } else {
        setEventEnabled((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case APP_LOG_ENABLED:
      return Boolean.valueOf(isAppLogEnabled());

    case APP_LOG_LEVEL:
      return getAppLogLevel();

    case TRACE_ENABLED:
      return Boolean.valueOf(isTraceEnabled());

    case TRACE_LOG_LEVEL:
      return getTraceLogLevel();

    case FLUSH_PERIOD:
      return Short.valueOf(getFlushPeriod());

    case METRIC_LOG_ENABLED:
      return Boolean.valueOf(isMetricLogEnabled());

    case URL_LOG_SAMPLE_RATE:
      return Double.valueOf(getUrlLogSampleRate());

    case MAX_MESSAGE_SIZE:
      return Short.valueOf(getMaxMessageSize());

    case EVENT_ENABLED:
      return Boolean.valueOf(isEventEnabled());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case APP_LOG_ENABLED:
      return isSetAppLogEnabled();
    case APP_LOG_LEVEL:
      return isSetAppLogLevel();
    case TRACE_ENABLED:
      return isSetTraceEnabled();
    case TRACE_LOG_LEVEL:
      return isSetTraceLogLevel();
    case FLUSH_PERIOD:
      return isSetFlushPeriod();
    case METRIC_LOG_ENABLED:
      return isSetMetricLogEnabled();
    case URL_LOG_SAMPLE_RATE:
      return isSetUrlLogSampleRate();
    case MAX_MESSAGE_SIZE:
      return isSetMaxMessageSize();
    case EVENT_ENABLED:
      return isSetEventEnabled();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AgentConfig)
      return this.equals((AgentConfig)that);
    return false;
  }

  public boolean equals(AgentConfig that) {
    if (that == null)
      return false;

    boolean this_present_appLogEnabled = true;
    boolean that_present_appLogEnabled = true;
    if (this_present_appLogEnabled || that_present_appLogEnabled) {
      if (!(this_present_appLogEnabled && that_present_appLogEnabled))
        return false;
      if (this.appLogEnabled != that.appLogEnabled)
        return false;
    }

    boolean this_present_appLogLevel = true && this.isSetAppLogLevel();
    boolean that_present_appLogLevel = true && that.isSetAppLogLevel();
    if (this_present_appLogLevel || that_present_appLogLevel) {
      if (!(this_present_appLogLevel && that_present_appLogLevel))
        return false;
      if (!this.appLogLevel.equals(that.appLogLevel))
        return false;
    }

    boolean this_present_traceEnabled = true;
    boolean that_present_traceEnabled = true;
    if (this_present_traceEnabled || that_present_traceEnabled) {
      if (!(this_present_traceEnabled && that_present_traceEnabled))
        return false;
      if (this.traceEnabled != that.traceEnabled)
        return false;
    }

    boolean this_present_traceLogLevel = true && this.isSetTraceLogLevel();
    boolean that_present_traceLogLevel = true && that.isSetTraceLogLevel();
    if (this_present_traceLogLevel || that_present_traceLogLevel) {
      if (!(this_present_traceLogLevel && that_present_traceLogLevel))
        return false;
      if (!this.traceLogLevel.equals(that.traceLogLevel))
        return false;
    }

    boolean this_present_flushPeriod = true;
    boolean that_present_flushPeriod = true;
    if (this_present_flushPeriod || that_present_flushPeriod) {
      if (!(this_present_flushPeriod && that_present_flushPeriod))
        return false;
      if (this.flushPeriod != that.flushPeriod)
        return false;
    }

    boolean this_present_metricLogEnabled = true;
    boolean that_present_metricLogEnabled = true;
    if (this_present_metricLogEnabled || that_present_metricLogEnabled) {
      if (!(this_present_metricLogEnabled && that_present_metricLogEnabled))
        return false;
      if (this.metricLogEnabled != that.metricLogEnabled)
        return false;
    }

    boolean this_present_urlLogSampleRate = true;
    boolean that_present_urlLogSampleRate = true;
    if (this_present_urlLogSampleRate || that_present_urlLogSampleRate) {
      if (!(this_present_urlLogSampleRate && that_present_urlLogSampleRate))
        return false;
      if (this.urlLogSampleRate != that.urlLogSampleRate)
        return false;
    }

    boolean this_present_maxMessageSize = true;
    boolean that_present_maxMessageSize = true;
    if (this_present_maxMessageSize || that_present_maxMessageSize) {
      if (!(this_present_maxMessageSize && that_present_maxMessageSize))
        return false;
      if (this.maxMessageSize != that.maxMessageSize)
        return false;
    }

    boolean this_present_eventEnabled = true;
    boolean that_present_eventEnabled = true;
    if (this_present_eventEnabled || that_present_eventEnabled) {
      if (!(this_present_eventEnabled && that_present_eventEnabled))
        return false;
      if (this.eventEnabled != that.eventEnabled)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_appLogEnabled = true;
    builder.append(present_appLogEnabled);
    if (present_appLogEnabled)
      builder.append(appLogEnabled);

    boolean present_appLogLevel = true && (isSetAppLogLevel());
    builder.append(present_appLogLevel);
    if (present_appLogLevel)
      builder.append(appLogLevel.getValue());

    boolean present_traceEnabled = true;
    builder.append(present_traceEnabled);
    if (present_traceEnabled)
      builder.append(traceEnabled);

    boolean present_traceLogLevel = true && (isSetTraceLogLevel());
    builder.append(present_traceLogLevel);
    if (present_traceLogLevel)
      builder.append(traceLogLevel.getValue());

    boolean present_flushPeriod = true;
    builder.append(present_flushPeriod);
    if (present_flushPeriod)
      builder.append(flushPeriod);

    boolean present_metricLogEnabled = true;
    builder.append(present_metricLogEnabled);
    if (present_metricLogEnabled)
      builder.append(metricLogEnabled);

    boolean present_urlLogSampleRate = true;
    builder.append(present_urlLogSampleRate);
    if (present_urlLogSampleRate)
      builder.append(urlLogSampleRate);

    boolean present_maxMessageSize = true;
    builder.append(present_maxMessageSize);
    if (present_maxMessageSize)
      builder.append(maxMessageSize);

    boolean present_eventEnabled = true;
    builder.append(present_eventEnabled);
    if (present_eventEnabled)
      builder.append(eventEnabled);

    return builder.toHashCode();
  }

  public int compareTo(AgentConfig other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    AgentConfig typedOther = (AgentConfig)other;

    lastComparison = Boolean.valueOf(isSetAppLogEnabled()).compareTo(typedOther.isSetAppLogEnabled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppLogEnabled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appLogEnabled, typedOther.appLogEnabled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppLogLevel()).compareTo(typedOther.isSetAppLogLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppLogLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appLogLevel, typedOther.appLogLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraceEnabled()).compareTo(typedOther.isSetTraceEnabled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraceEnabled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traceEnabled, typedOther.traceEnabled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraceLogLevel()).compareTo(typedOther.isSetTraceLogLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraceLogLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traceLogLevel, typedOther.traceLogLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlushPeriod()).compareTo(typedOther.isSetFlushPeriod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlushPeriod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flushPeriod, typedOther.flushPeriod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetricLogEnabled()).compareTo(typedOther.isSetMetricLogEnabled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetricLogEnabled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metricLogEnabled, typedOther.metricLogEnabled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrlLogSampleRate()).compareTo(typedOther.isSetUrlLogSampleRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrlLogSampleRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.urlLogSampleRate, typedOther.urlLogSampleRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxMessageSize()).compareTo(typedOther.isSetMaxMessageSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxMessageSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxMessageSize, typedOther.maxMessageSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventEnabled()).compareTo(typedOther.isSetEventEnabled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventEnabled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventEnabled, typedOther.eventEnabled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AgentConfig(");
    boolean first = true;

    sb.append("appLogEnabled:");
    sb.append(this.appLogEnabled);
    first = false;
    if (!first) sb.append(", ");
    sb.append("appLogLevel:");
    if (this.appLogLevel == null) {
      sb.append("null");
    } else {
      sb.append(this.appLogLevel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("traceEnabled:");
    sb.append(this.traceEnabled);
    first = false;
    if (!first) sb.append(", ");
    sb.append("traceLogLevel:");
    if (this.traceLogLevel == null) {
      sb.append("null");
    } else {
      sb.append(this.traceLogLevel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("flushPeriod:");
    sb.append(this.flushPeriod);
    first = false;
    if (!first) sb.append(", ");
    sb.append("metricLogEnabled:");
    sb.append(this.metricLogEnabled);
    first = false;
    if (!first) sb.append(", ");
    sb.append("urlLogSampleRate:");
    sb.append(this.urlLogSampleRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxMessageSize:");
    sb.append(this.maxMessageSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("eventEnabled:");
    sb.append(this.eventEnabled);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AgentConfigStandardSchemeFactory implements SchemeFactory {
    public AgentConfigStandardScheme getScheme() {
      return new AgentConfigStandardScheme();
    }
  }

  private static class AgentConfigStandardScheme extends StandardScheme<AgentConfig> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AgentConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APP_LOG_ENABLED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.appLogEnabled = iprot.readBool();
              struct.setAppLogEnabledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APP_LOG_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.appLogLevel = LogLevel.findByValue(iprot.readI32());
              struct.setAppLogLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TRACE_ENABLED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.traceEnabled = iprot.readBool();
              struct.setTraceEnabledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TRACE_LOG_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.traceLogLevel = LogLevel.findByValue(iprot.readI32());
              struct.setTraceLogLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FLUSH_PERIOD
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.flushPeriod = iprot.readI16();
              struct.setFlushPeriodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // METRIC_LOG_ENABLED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.metricLogEnabled = iprot.readBool();
              struct.setMetricLogEnabledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // URL_LOG_SAMPLE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.urlLogSampleRate = iprot.readDouble();
              struct.setUrlLogSampleRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MAX_MESSAGE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.maxMessageSize = iprot.readI16();
              struct.setMaxMessageSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EVENT_ENABLED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.eventEnabled = iprot.readBool();
              struct.setEventEnabledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AgentConfig struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(APP_LOG_ENABLED_FIELD_DESC);
      oprot.writeBool(struct.appLogEnabled);
      oprot.writeFieldEnd();
      if (struct.appLogLevel != null) {
        oprot.writeFieldBegin(APP_LOG_LEVEL_FIELD_DESC);
        oprot.writeI32(struct.appLogLevel.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TRACE_ENABLED_FIELD_DESC);
      oprot.writeBool(struct.traceEnabled);
      oprot.writeFieldEnd();
      if (struct.traceLogLevel != null) {
        oprot.writeFieldBegin(TRACE_LOG_LEVEL_FIELD_DESC);
        oprot.writeI32(struct.traceLogLevel.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FLUSH_PERIOD_FIELD_DESC);
      oprot.writeI16(struct.flushPeriod);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(METRIC_LOG_ENABLED_FIELD_DESC);
      oprot.writeBool(struct.metricLogEnabled);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(URL_LOG_SAMPLE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.urlLogSampleRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_MESSAGE_SIZE_FIELD_DESC);
      oprot.writeI16(struct.maxMessageSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EVENT_ENABLED_FIELD_DESC);
      oprot.writeBool(struct.eventEnabled);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AgentConfigTupleSchemeFactory implements SchemeFactory {
    public AgentConfigTupleScheme getScheme() {
      return new AgentConfigTupleScheme();
    }
  }

  private static class AgentConfigTupleScheme extends TupleScheme<AgentConfig> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AgentConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAppLogEnabled()) {
        optionals.set(0);
      }
      if (struct.isSetAppLogLevel()) {
        optionals.set(1);
      }
      if (struct.isSetTraceEnabled()) {
        optionals.set(2);
      }
      if (struct.isSetTraceLogLevel()) {
        optionals.set(3);
      }
      if (struct.isSetFlushPeriod()) {
        optionals.set(4);
      }
      if (struct.isSetMetricLogEnabled()) {
        optionals.set(5);
      }
      if (struct.isSetUrlLogSampleRate()) {
        optionals.set(6);
      }
      if (struct.isSetMaxMessageSize()) {
        optionals.set(7);
      }
      if (struct.isSetEventEnabled()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetAppLogEnabled()) {
        oprot.writeBool(struct.appLogEnabled);
      }
      if (struct.isSetAppLogLevel()) {
        oprot.writeI32(struct.appLogLevel.getValue());
      }
      if (struct.isSetTraceEnabled()) {
        oprot.writeBool(struct.traceEnabled);
      }
      if (struct.isSetTraceLogLevel()) {
        oprot.writeI32(struct.traceLogLevel.getValue());
      }
      if (struct.isSetFlushPeriod()) {
        oprot.writeI16(struct.flushPeriod);
      }
      if (struct.isSetMetricLogEnabled()) {
        oprot.writeBool(struct.metricLogEnabled);
      }
      if (struct.isSetUrlLogSampleRate()) {
        oprot.writeDouble(struct.urlLogSampleRate);
      }
      if (struct.isSetMaxMessageSize()) {
        oprot.writeI16(struct.maxMessageSize);
      }
      if (struct.isSetEventEnabled()) {
        oprot.writeBool(struct.eventEnabled);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AgentConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.appLogEnabled = iprot.readBool();
        struct.setAppLogEnabledIsSet(true);
      }
      if (incoming.get(1)) {
        struct.appLogLevel = LogLevel.findByValue(iprot.readI32());
        struct.setAppLogLevelIsSet(true);
      }
      if (incoming.get(2)) {
        struct.traceEnabled = iprot.readBool();
        struct.setTraceEnabledIsSet(true);
      }
      if (incoming.get(3)) {
        struct.traceLogLevel = LogLevel.findByValue(iprot.readI32());
        struct.setTraceLogLevelIsSet(true);
      }
      if (incoming.get(4)) {
        struct.flushPeriod = iprot.readI16();
        struct.setFlushPeriodIsSet(true);
      }
      if (incoming.get(5)) {
        struct.metricLogEnabled = iprot.readBool();
        struct.setMetricLogEnabledIsSet(true);
      }
      if (incoming.get(6)) {
        struct.urlLogSampleRate = iprot.readDouble();
        struct.setUrlLogSampleRateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.maxMessageSize = iprot.readI16();
        struct.setMaxMessageSizeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.eventEnabled = iprot.readBool();
        struct.setEventEnabledIsSet(true);
      }
    }
  }

}

