/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package v3;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

public class MetricEvent implements org.apache.thrift.TBase<MetricEvent, MetricEvent._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MetricEvent");

  private static final org.apache.thrift.protocol.TField CREATED_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createdTime", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField VALUE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("valueType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("tags", org.apache.thrift.protocol.TType.SET, (short)5);
  private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TAGS_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("tagsMap", org.apache.thrift.protocol.TType.MAP, (short)7);
  private static final org.apache.thrift.protocol.TField VALUE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("valueList", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MetricEventStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MetricEventTupleSchemeFactory());
  }

  private long createdTime; // required
  private String name; // required
  private String value; // required
  private MetricValueType valueType; // required
  private Set<String> tags; // required
  private String ns; // optional
  private Map<String,String> tagsMap; // optional
  private List<Double> valueList; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CREATED_TIME((short)1, "createdTime"),
    NAME((short)2, "name"),
    VALUE((short)3, "value"),
    /**
     * 
     * @see MetricValueType
     */
    VALUE_TYPE((short)4, "valueType"),
    TAGS((short)5, "tags"),
    NS((short)6, "ns"),
    TAGS_MAP((short)7, "tagsMap"),
    VALUE_LIST((short)8, "valueList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CREATED_TIME
          return CREATED_TIME;
        case 2: // NAME
          return NAME;
        case 3: // VALUE
          return VALUE;
        case 4: // VALUE_TYPE
          return VALUE_TYPE;
        case 5: // TAGS
          return TAGS;
        case 6: // NS
          return NS;
        case 7: // TAGS_MAP
          return TAGS_MAP;
        case 8: // VALUE_LIST
          return VALUE_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CREATEDTIME_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  private _Fields optionals[] = {_Fields.NS,_Fields.TAGS_MAP,_Fields.VALUE_LIST};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CREATED_TIME, new org.apache.thrift.meta_data.FieldMetaData("createdTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VALUE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("valueType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MetricValueType.class)));
    tmpMap.put(_Fields.TAGS, new org.apache.thrift.meta_data.FieldMetaData("tags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAGS_MAP, new org.apache.thrift.meta_data.FieldMetaData("tagsMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.VALUE_LIST, new org.apache.thrift.meta_data.FieldMetaData("valueList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MetricEvent.class, metaDataMap);
  }

  public MetricEvent() {
  }

  public MetricEvent(
    long createdTime,
    String name,
    String value,
    MetricValueType valueType,
    Set<String> tags)
  {
    this();
    this.createdTime = createdTime;
    setCreatedTimeIsSet(true);
    this.name = name;
    this.value = value;
    this.valueType = valueType;
    this.tags = tags;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MetricEvent(MetricEvent other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.createdTime = other.createdTime;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetValue()) {
      this.value = other.value;
    }
    if (other.isSetValueType()) {
      this.valueType = other.valueType;
    }
    if (other.isSetTags()) {
      Set<String> __this__tags = new HashSet<String>();
      for (String other_element : other.tags) {
        __this__tags.add(other_element);
      }
      this.tags = __this__tags;
    }
    if (other.isSetNs()) {
      this.ns = other.ns;
    }
    if (other.isSetTagsMap()) {
      Map<String,String> __this__tagsMap = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.tagsMap.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__tagsMap_copy_key = other_element_key;

        String __this__tagsMap_copy_value = other_element_value;

        __this__tagsMap.put(__this__tagsMap_copy_key, __this__tagsMap_copy_value);
      }
      this.tagsMap = __this__tagsMap;
    }
    if (other.isSetValueList()) {
      List<Double> __this__valueList = new ArrayList<Double>();
      for (Double other_element : other.valueList) {
        __this__valueList.add(other_element);
      }
      this.valueList = __this__valueList;
    }
  }

  public MetricEvent deepCopy() {
    return new MetricEvent(this);
  }

  @Override
  public void clear() {
    setCreatedTimeIsSet(false);
    this.createdTime = 0;
    this.name = null;
    this.value = null;
    this.valueType = null;
    this.tags = null;
    this.ns = null;
    this.tagsMap = null;
    this.valueList = null;
  }

  public long getCreatedTime() {
    return this.createdTime;
  }

  public void setCreatedTime(long createdTime) {
    this.createdTime = createdTime;
    setCreatedTimeIsSet(true);
  }

  public void unsetCreatedTime() {
    __isset_bit_vector.clear(__CREATEDTIME_ISSET_ID);
  }

  /** Returns true if field createdTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedTime() {
    return __isset_bit_vector.get(__CREATEDTIME_ISSET_ID);
  }

  public void setCreatedTimeIsSet(boolean value) {
    __isset_bit_vector.set(__CREATEDTIME_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getValue() {
    return this.value;
  }

  public void setValue(String value) {
    this.value = value;
  }

  public void unsetValue() {
    this.value = null;
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return this.value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  /**
   * 
   * @see MetricValueType
   */
  public MetricValueType getValueType() {
    return this.valueType;
  }

  /**
   * 
   * @see MetricValueType
   */
  public void setValueType(MetricValueType valueType) {
    this.valueType = valueType;
  }

  public void unsetValueType() {
    this.valueType = null;
  }

  /** Returns true if field valueType is set (has been assigned a value) and false otherwise */
  public boolean isSetValueType() {
    return this.valueType != null;
  }

  public void setValueTypeIsSet(boolean value) {
    if (!value) {
      this.valueType = null;
    }
  }

  public int getTagsSize() {
    return (this.tags == null) ? 0 : this.tags.size();
  }

  public java.util.Iterator<String> getTagsIterator() {
    return (this.tags == null) ? null : this.tags.iterator();
  }

  public void addToTags(String elem) {
    if (this.tags == null) {
      this.tags = new HashSet<String>();
    }
    this.tags.add(elem);
  }

  public Set<String> getTags() {
    return this.tags;
  }

  public void setTags(Set<String> tags) {
    this.tags = tags;
  }

  public void unsetTags() {
    this.tags = null;
  }

  /** Returns true if field tags is set (has been assigned a value) and false otherwise */
  public boolean isSetTags() {
    return this.tags != null;
  }

  public void setTagsIsSet(boolean value) {
    if (!value) {
      this.tags = null;
    }
  }

  public String getNs() {
    return this.ns;
  }

  public void setNs(String ns) {
    this.ns = ns;
  }

  public void unsetNs() {
    this.ns = null;
  }

  /** Returns true if field ns is set (has been assigned a value) and false otherwise */
  public boolean isSetNs() {
    return this.ns != null;
  }

  public void setNsIsSet(boolean value) {
    if (!value) {
      this.ns = null;
    }
  }

  public int getTagsMapSize() {
    return (this.tagsMap == null) ? 0 : this.tagsMap.size();
  }

  public void putToTagsMap(String key, String val) {
    if (this.tagsMap == null) {
      this.tagsMap = new HashMap<String,String>();
    }
    this.tagsMap.put(key, val);
  }

  public Map<String,String> getTagsMap() {
    return this.tagsMap;
  }

  public void setTagsMap(Map<String,String> tagsMap) {
    this.tagsMap = tagsMap;
  }

  public void unsetTagsMap() {
    this.tagsMap = null;
  }

  /** Returns true if field tagsMap is set (has been assigned a value) and false otherwise */
  public boolean isSetTagsMap() {
    return this.tagsMap != null;
  }

  public void setTagsMapIsSet(boolean value) {
    if (!value) {
      this.tagsMap = null;
    }
  }

  public int getValueListSize() {
    return (this.valueList == null) ? 0 : this.valueList.size();
  }

  public java.util.Iterator<Double> getValueListIterator() {
    return (this.valueList == null) ? null : this.valueList.iterator();
  }

  public void addToValueList(double elem) {
    if (this.valueList == null) {
      this.valueList = new ArrayList<Double>();
    }
    this.valueList.add(elem);
  }

  public List<Double> getValueList() {
    return this.valueList;
  }

  public void setValueList(List<Double> valueList) {
    this.valueList = valueList;
  }

  public void unsetValueList() {
    this.valueList = null;
  }

  /** Returns true if field valueList is set (has been assigned a value) and false otherwise */
  public boolean isSetValueList() {
    return this.valueList != null;
  }

  public void setValueListIsSet(boolean value) {
    if (!value) {
      this.valueList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CREATED_TIME:
      if (value == null) {
        unsetCreatedTime();
      } else {
        setCreatedTime((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((String)value);
      }
      break;

    case VALUE_TYPE:
      if (value == null) {
        unsetValueType();
      } else {
        setValueType((MetricValueType)value);
      }
      break;

    case TAGS:
      if (value == null) {
        unsetTags();
      } else {
        setTags((Set<String>)value);
      }
      break;

    case NS:
      if (value == null) {
        unsetNs();
      } else {
        setNs((String)value);
      }
      break;

    case TAGS_MAP:
      if (value == null) {
        unsetTagsMap();
      } else {
        setTagsMap((Map<String,String>)value);
      }
      break;

    case VALUE_LIST:
      if (value == null) {
        unsetValueList();
      } else {
        setValueList((List<Double>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CREATED_TIME:
      return Long.valueOf(getCreatedTime());

    case NAME:
      return getName();

    case VALUE:
      return getValue();

    case VALUE_TYPE:
      return getValueType();

    case TAGS:
      return getTags();

    case NS:
      return getNs();

    case TAGS_MAP:
      return getTagsMap();

    case VALUE_LIST:
      return getValueList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CREATED_TIME:
      return isSetCreatedTime();
    case NAME:
      return isSetName();
    case VALUE:
      return isSetValue();
    case VALUE_TYPE:
      return isSetValueType();
    case TAGS:
      return isSetTags();
    case NS:
      return isSetNs();
    case TAGS_MAP:
      return isSetTagsMap();
    case VALUE_LIST:
      return isSetValueList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MetricEvent)
      return this.equals((MetricEvent)that);
    return false;
  }

  public boolean equals(MetricEvent that) {
    if (that == null)
      return false;

    boolean this_present_createdTime = true;
    boolean that_present_createdTime = true;
    if (this_present_createdTime || that_present_createdTime) {
      if (!(this_present_createdTime && that_present_createdTime))
        return false;
      if (this.createdTime != that.createdTime)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!this.value.equals(that.value))
        return false;
    }

    boolean this_present_valueType = true && this.isSetValueType();
    boolean that_present_valueType = true && that.isSetValueType();
    if (this_present_valueType || that_present_valueType) {
      if (!(this_present_valueType && that_present_valueType))
        return false;
      if (!this.valueType.equals(that.valueType))
        return false;
    }

    boolean this_present_tags = true && this.isSetTags();
    boolean that_present_tags = true && that.isSetTags();
    if (this_present_tags || that_present_tags) {
      if (!(this_present_tags && that_present_tags))
        return false;
      if (!this.tags.equals(that.tags))
        return false;
    }

    boolean this_present_ns = true && this.isSetNs();
    boolean that_present_ns = true && that.isSetNs();
    if (this_present_ns || that_present_ns) {
      if (!(this_present_ns && that_present_ns))
        return false;
      if (!this.ns.equals(that.ns))
        return false;
    }

    boolean this_present_tagsMap = true && this.isSetTagsMap();
    boolean that_present_tagsMap = true && that.isSetTagsMap();
    if (this_present_tagsMap || that_present_tagsMap) {
      if (!(this_present_tagsMap && that_present_tagsMap))
        return false;
      if (!this.tagsMap.equals(that.tagsMap))
        return false;
    }

    boolean this_present_valueList = true && this.isSetValueList();
    boolean that_present_valueList = true && that.isSetValueList();
    if (this_present_valueList || that_present_valueList) {
      if (!(this_present_valueList && that_present_valueList))
        return false;
      if (!this.valueList.equals(that.valueList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_createdTime = true;
    builder.append(present_createdTime);
    if (present_createdTime)
      builder.append(createdTime);

    boolean present_name = true && (isSetName());
    builder.append(present_name);
    if (present_name)
      builder.append(name);

    boolean present_value = true && (isSetValue());
    builder.append(present_value);
    if (present_value)
      builder.append(value);

    boolean present_valueType = true && (isSetValueType());
    builder.append(present_valueType);
    if (present_valueType)
      builder.append(valueType.getValue());

    boolean present_tags = true && (isSetTags());
    builder.append(present_tags);
    if (present_tags)
      builder.append(tags);

    boolean present_ns = true && (isSetNs());
    builder.append(present_ns);
    if (present_ns)
      builder.append(ns);

    boolean present_tagsMap = true && (isSetTagsMap());
    builder.append(present_tagsMap);
    if (present_tagsMap)
      builder.append(tagsMap);

    boolean present_valueList = true && (isSetValueList());
    builder.append(present_valueList);
    if (present_valueList)
      builder.append(valueList);

    return builder.toHashCode();
  }

  public int compareTo(MetricEvent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    MetricEvent typedOther = (MetricEvent)other;

    lastComparison = Boolean.valueOf(isSetCreatedTime()).compareTo(typedOther.isSetCreatedTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdTime, typedOther.createdTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, typedOther.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValueType()).compareTo(typedOther.isSetValueType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValueType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valueType, typedOther.valueType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTags()).compareTo(typedOther.isSetTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, typedOther.tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTagsMap()).compareTo(typedOther.isSetTagsMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagsMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagsMap, typedOther.tagsMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValueList()).compareTo(typedOther.isSetValueList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValueList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valueList, typedOther.valueList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MetricEvent(");
    boolean first = true;

    sb.append("createdTime:");
    sb.append(this.createdTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("value:");
    if (this.value == null) {
      sb.append("null");
    } else {
      sb.append(this.value);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("valueType:");
    if (this.valueType == null) {
      sb.append("null");
    } else {
      sb.append(this.valueType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tags:");
    if (this.tags == null) {
      sb.append("null");
    } else {
      sb.append(this.tags);
    }
    first = false;
    if (isSetNs()) {
      if (!first) sb.append(", ");
      sb.append("ns:");
      if (this.ns == null) {
        sb.append("null");
      } else {
        sb.append(this.ns);
      }
      first = false;
    }
    if (isSetTagsMap()) {
      if (!first) sb.append(", ");
      sb.append("tagsMap:");
      if (this.tagsMap == null) {
        sb.append("null");
      } else {
        sb.append(this.tagsMap);
      }
      first = false;
    }
    if (isSetValueList()) {
      if (!first) sb.append(", ");
      sb.append("valueList:");
      if (this.valueList == null) {
        sb.append("null");
      } else {
        sb.append(this.valueList);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MetricEventStandardSchemeFactory implements SchemeFactory {
    public MetricEventStandardScheme getScheme() {
      return new MetricEventStandardScheme();
    }
  }

  private static class MetricEventStandardScheme extends StandardScheme<MetricEvent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MetricEvent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CREATED_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createdTime = iprot.readI64();
              struct.setCreatedTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.value = iprot.readString();
              struct.setValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VALUE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.valueType = MetricValueType.findByValue(iprot.readI32());
              struct.setValueTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set10 = iprot.readSetBegin();
                struct.tags = new HashSet<String>(2*_set10.size);
                for (int _i11 = 0; _i11 < _set10.size; ++_i11)
                {
                  String _elem12; // required
                  _elem12 = iprot.readString();
                  struct.tags.add(_elem12);
                }
                iprot.readSetEnd();
              }
              struct.setTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ns = iprot.readString();
              struct.setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TAGS_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map13 = iprot.readMapBegin();
                struct.tagsMap = new HashMap<String,String>(2*_map13.size);
                for (int _i14 = 0; _i14 < _map13.size; ++_i14)
                {
                  String _key15; // required
                  String _val16; // required
                  _key15 = iprot.readString();
                  _val16 = iprot.readString();
                  struct.tagsMap.put(_key15, _val16);
                }
                iprot.readMapEnd();
              }
              struct.setTagsMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // VALUE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list17 = iprot.readListBegin();
                struct.valueList = new ArrayList<Double>(_list17.size);
                for (int _i18 = 0; _i18 < _list17.size; ++_i18)
                {
                  double _elem19; // required
                  _elem19 = iprot.readDouble();
                  struct.valueList.add(_elem19);
                }
                iprot.readListEnd();
              }
              struct.setValueListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MetricEvent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CREATED_TIME_FIELD_DESC);
      oprot.writeI64(struct.createdTime);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.value != null) {
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        oprot.writeString(struct.value);
        oprot.writeFieldEnd();
      }
      if (struct.valueType != null) {
        oprot.writeFieldBegin(VALUE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.valueType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.tags != null) {
        oprot.writeFieldBegin(TAGS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.tags.size()));
          for (String _iter20 : struct.tags)
          {
            oprot.writeString(_iter20);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.ns != null) {
        if (struct.isSetNs()) {
          oprot.writeFieldBegin(NS_FIELD_DESC);
          oprot.writeString(struct.ns);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tagsMap != null) {
        if (struct.isSetTagsMap()) {
          oprot.writeFieldBegin(TAGS_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.tagsMap.size()));
            for (Map.Entry<String, String> _iter21 : struct.tagsMap.entrySet())
            {
              oprot.writeString(_iter21.getKey());
              oprot.writeString(_iter21.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.valueList != null) {
        if (struct.isSetValueList()) {
          oprot.writeFieldBegin(VALUE_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.valueList.size()));
            for (double _iter22 : struct.valueList)
            {
              oprot.writeDouble(_iter22);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MetricEventTupleSchemeFactory implements SchemeFactory {
    public MetricEventTupleScheme getScheme() {
      return new MetricEventTupleScheme();
    }
  }

  private static class MetricEventTupleScheme extends TupleScheme<MetricEvent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MetricEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCreatedTime()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetValue()) {
        optionals.set(2);
      }
      if (struct.isSetValueType()) {
        optionals.set(3);
      }
      if (struct.isSetTags()) {
        optionals.set(4);
      }
      if (struct.isSetNs()) {
        optionals.set(5);
      }
      if (struct.isSetTagsMap()) {
        optionals.set(6);
      }
      if (struct.isSetValueList()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetCreatedTime()) {
        oprot.writeI64(struct.createdTime);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetValue()) {
        oprot.writeString(struct.value);
      }
      if (struct.isSetValueType()) {
        oprot.writeI32(struct.valueType.getValue());
      }
      if (struct.isSetTags()) {
        {
          oprot.writeI32(struct.tags.size());
          for (String _iter23 : struct.tags)
          {
            oprot.writeString(_iter23);
          }
        }
      }
      if (struct.isSetNs()) {
        oprot.writeString(struct.ns);
      }
      if (struct.isSetTagsMap()) {
        {
          oprot.writeI32(struct.tagsMap.size());
          for (Map.Entry<String, String> _iter24 : struct.tagsMap.entrySet())
          {
            oprot.writeString(_iter24.getKey());
            oprot.writeString(_iter24.getValue());
          }
        }
      }
      if (struct.isSetValueList()) {
        {
          oprot.writeI32(struct.valueList.size());
          for (double _iter25 : struct.valueList)
          {
            oprot.writeDouble(_iter25);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MetricEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.createdTime = iprot.readI64();
        struct.setCreatedTimeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.value = iprot.readString();
        struct.setValueIsSet(true);
      }
      if (incoming.get(3)) {
        struct.valueType = MetricValueType.findByValue(iprot.readI32());
        struct.setValueTypeIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TSet _set26 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.tags = new HashSet<String>(2*_set26.size);
          for (int _i27 = 0; _i27 < _set26.size; ++_i27)
          {
            String _elem28; // required
            _elem28 = iprot.readString();
            struct.tags.add(_elem28);
          }
        }
        struct.setTagsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.ns = iprot.readString();
        struct.setNsIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TMap _map29 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.tagsMap = new HashMap<String,String>(2*_map29.size);
          for (int _i30 = 0; _i30 < _map29.size; ++_i30)
          {
            String _key31; // required
            String _val32; // required
            _key31 = iprot.readString();
            _val32 = iprot.readString();
            struct.tagsMap.put(_key31, _val32);
          }
        }
        struct.setTagsMapIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list33 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.valueList = new ArrayList<Double>(_list33.size);
          for (int _i34 = 0; _i34 < _list33.size; ++_i34)
          {
            double _elem35; // required
            _elem35 = iprot.readDouble();
            struct.valueList.add(_elem35);
          }
        }
        struct.setValueListIsSet(true);
      }
    }
  }

}

